{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"themes/fexo/source/css/styles.css","path":"css/styles.css","modified":1,"renderable":1},{"_id":"themes/fexo/source/images/avatar.jpg","path":"images/avatar.jpg","modified":1,"renderable":1},{"_id":"themes/fexo/source/sass/styles.scss","path":"sass/styles.scss","modified":1,"renderable":1},{"_id":"themes/fexo/source/js/app.js","path":"js/app.js","modified":1,"renderable":1},{"_id":"themes/fexo/source/js/bundle.js","path":"js/bundle.js","modified":1,"renderable":1},{"_id":"themes/fexo/source/js/scroll-spy.js","path":"js/scroll-spy.js","modified":1,"renderable":1},{"_id":"themes/fexo/source/js/util.js","path":"js/util.js","modified":1,"renderable":1},{"_id":"themes/fexo/source/js/fastclick.js","path":"js/fastclick.js","modified":1,"renderable":1},{"_id":"themes/fexo/source/js/zenscroll.js","path":"js/zenscroll.js","modified":1,"renderable":1},{"_id":"themes/fexo/source/fonts/PoiretOne-Regular.eot","path":"fonts/PoiretOne-Regular.eot","modified":1,"renderable":1},{"_id":"themes/fexo/source/fonts/PoiretOne-Regular.ttf","path":"fonts/PoiretOne-Regular.ttf","modified":1,"renderable":1},{"_id":"themes/fexo/source/fonts/PoiretOne-Regular.woff","path":"fonts/PoiretOne-Regular.woff","modified":1,"renderable":1},{"_id":"themes/fexo/source/fonts/calligraffitti-regular-webfont.eot","path":"fonts/calligraffitti-regular-webfont.eot","modified":1,"renderable":1},{"_id":"themes/fexo/source/fonts/calligraffitti-regular-webfont.woff","path":"fonts/calligraffitti-regular-webfont.woff","modified":1,"renderable":1},{"_id":"themes/fexo/source/fonts/calligraffitti-regular-webfont.woff2","path":"fonts/calligraffitti-regular-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/fexo/source/fonts/fontello.eot","path":"fonts/fontello.eot","modified":1,"renderable":1},{"_id":"themes/fexo/source/fonts/fontello.svg","path":"fonts/fontello.svg","modified":1,"renderable":1},{"_id":"themes/fexo/source/fonts/fontello.ttf","path":"fonts/fontello.ttf","modified":1,"renderable":1},{"_id":"themes/fexo/source/fonts/fontello.woff","path":"fonts/fontello.woff","modified":1,"renderable":1},{"_id":"themes/fexo/source/fonts/fontello.woff2","path":"fonts/fontello.woff2","modified":1,"renderable":1},{"_id":"source/images/2020/02/flutter_fonts_01.png","path":"images/2020/02/flutter_fonts_01.png","modified":1,"renderable":0},{"_id":"source/images/2020/02/flutter_fonts_02.png","path":"images/2020/02/flutter_fonts_02.png","modified":1,"renderable":0},{"_id":"source/images/2020/02/flutter_language_03.png","path":"images/2020/02/flutter_language_03.png","modified":1,"renderable":0},{"_id":"source/images/2020/02/flutter_language_05.png","path":"images/2020/02/flutter_language_05.png","modified":1,"renderable":0},{"_id":"source/images/2020/02/flutter_language_06.png","path":"images/2020/02/flutter_language_06.png","modified":1,"renderable":0},{"_id":"source/images/2018/01/01.png","path":"images/2018/01/01.png","modified":1,"renderable":0},{"_id":"source/images/2020/04/flutter_channel_01.png","path":"images/2020/04/flutter_channel_01.png","modified":1,"renderable":0},{"_id":"source/images/2019/09/02.png","path":"images/2019/09/02.png","modified":1,"renderable":0},{"_id":"source/images/2019/09/08.png","path":"images/2019/09/08.png","modified":1,"renderable":0},{"_id":"source/images/2019/09/17.png","path":"images/2019/09/17.png","modified":1,"renderable":0},{"_id":"source/images/2019/07/02.png","path":"images/2019/07/02.png","modified":1,"renderable":0},{"_id":"source/images/2019/07/03.png","path":"images/2019/07/03.png","modified":1,"renderable":0},{"_id":"source/images/2019/07/05.png","path":"images/2019/07/05.png","modified":1,"renderable":0},{"_id":"source/images/2021/01/android_fps_02.png","path":"images/2021/01/android_fps_02.png","modified":1,"renderable":0},{"_id":"source/images/2021/01/android_fps_03.png","path":"images/2021/01/android_fps_03.png","modified":1,"renderable":0},{"_id":"source/images/2021/01/android_fps_04.png","path":"images/2021/01/android_fps_04.png","modified":1,"renderable":0},{"_id":"source/images/2021/01/android_fps_05.png","path":"images/2021/01/android_fps_05.png","modified":1,"renderable":0},{"_id":"source/images/2021/01/android_fps_06.png","path":"images/2021/01/android_fps_06.png","modified":1,"renderable":0},{"_id":"source/images/2021/01/android_fps_08.png","path":"images/2021/01/android_fps_08.png","modified":1,"renderable":0},{"_id":"source/images/2019/10/03.png","path":"images/2019/10/03.png","modified":1,"renderable":0},{"_id":"source/images/2019/10/04.png","path":"images/2019/10/04.png","modified":1,"renderable":0},{"_id":"source/images/2019/10/05.png","path":"images/2019/10/05.png","modified":1,"renderable":0},{"_id":"source/images/2019/10/06.png","path":"images/2019/10/06.png","modified":1,"renderable":0},{"_id":"themes/fexo/source/css/styles.css.map","path":"css/styles.css.map","modified":1,"renderable":1},{"_id":"themes/fexo/source/images/avatar.png","path":"images/avatar.png","modified":1,"renderable":1},{"_id":"themes/fexo/source/images/qr-wechat.png","path":"images/qr-wechat.png","modified":1,"renderable":1},{"_id":"themes/fexo/source/fonts/calligraffitti-regular-webfont.ttf","path":"fonts/calligraffitti-regular-webfont.ttf","modified":1,"renderable":1},{"_id":"source/images/2017/12/02-2.png","path":"images/2017/12/02-2.png","modified":1,"renderable":0},{"_id":"source/images/2020/02/flutter_language_01.png","path":"images/2020/02/flutter_language_01.png","modified":1,"renderable":0},{"_id":"source/images/2020/03/native_flutter_01.png","path":"images/2020/03/native_flutter_01.png","modified":1,"renderable":0},{"_id":"source/images/2019/09/03.png","path":"images/2019/09/03.png","modified":1,"renderable":0},{"_id":"source/images/2019/09/05.png","path":"images/2019/09/05.png","modified":1,"renderable":0},{"_id":"source/images/2019/09/06.png","path":"images/2019/09/06.png","modified":1,"renderable":0},{"_id":"source/images/2019/09/09.png","path":"images/2019/09/09.png","modified":1,"renderable":0},{"_id":"source/images/2019/09/13.png","path":"images/2019/09/13.png","modified":1,"renderable":0},{"_id":"source/images/2019/09/16.png","path":"images/2019/09/16.png","modified":1,"renderable":0},{"_id":"source/images/2019/09/18.png","path":"images/2019/09/18.png","modified":1,"renderable":0},{"_id":"source/images/2019/09/19.png","path":"images/2019/09/19.png","modified":1,"renderable":0},{"_id":"source/images/2019/09/20.png","path":"images/2019/09/20.png","modified":1,"renderable":0},{"_id":"source/images/2019/09/21.png","path":"images/2019/09/21.png","modified":1,"renderable":0},{"_id":"source/images/2019/07/01.png","path":"images/2019/07/01.png","modified":1,"renderable":0},{"_id":"source/images/2021/01/android_fps_01.png","path":"images/2021/01/android_fps_01.png","modified":1,"renderable":0},{"_id":"themes/fexo/source/images/qr-alipay.png","path":"images/qr-alipay.png","modified":1,"renderable":1},{"_id":"themes/fexo/source/fonts/PoiretOne-Regular.svg","path":"fonts/PoiretOne-Regular.svg","modified":1,"renderable":1},{"_id":"source/images/2017/06/01-1.png","path":"images/2017/06/01-1.png","modified":1,"renderable":0},{"_id":"source/images/2020/03/native_flutter_02.png","path":"images/2020/03/native_flutter_02.png","modified":1,"renderable":0},{"_id":"source/images/2019/09/01.png","path":"images/2019/09/01.png","modified":1,"renderable":0},{"_id":"source/images/2019/09/11.png","path":"images/2019/09/11.png","modified":1,"renderable":0},{"_id":"source/images/2019/09/14.png","path":"images/2019/09/14.png","modified":1,"renderable":0},{"_id":"source/images/2019/09/15.png","path":"images/2019/09/15.png","modified":1,"renderable":0},{"_id":"source/images/2019/10/01.png","path":"images/2019/10/01.png","modified":1,"renderable":0},{"_id":"source/images/2018/06/01-13.png","path":"images/2018/06/01-13.png","modified":1,"renderable":0},{"_id":"source/images/2018/06/01-5.png","path":"images/2018/06/01-5.png","modified":1,"renderable":0},{"_id":"source/images/2020/01/flutter_build_03.png","path":"images/2020/01/flutter_build_03.png","modified":1,"renderable":0},{"_id":"source/images/2019/06/01.png","path":"images/2019/06/01.png","modified":1,"renderable":0},{"_id":"source/images/2019/09/04.png","path":"images/2019/09/04.png","modified":1,"renderable":0},{"_id":"source/images/2019/10/02.png","path":"images/2019/10/02.png","modified":1,"renderable":0},{"_id":"source/images/2017/12/02-3.png","path":"images/2017/12/02-3.png","modified":1,"renderable":0},{"_id":"source/images/2018/06/01-12.png","path":"images/2018/06/01-12.png","modified":1,"renderable":0},{"_id":"source/images/2018/06/01-8.png","path":"images/2018/06/01-8.png","modified":1,"renderable":0},{"_id":"source/images/2020/02/flutter_language_04.png","path":"images/2020/02/flutter_language_04.png","modified":1,"renderable":0},{"_id":"source/images/2021/01/android_fps_07.png","path":"images/2021/01/android_fps_07.png","modified":1,"renderable":0},{"_id":"themes/fexo/source/fonts/calligraffitti-regular-webfont.svg","path":"fonts/calligraffitti-regular-webfont.svg","modified":1,"renderable":1},{"_id":"source/images/2017/12/02-1.png","path":"images/2017/12/02-1.png","modified":1,"renderable":0},{"_id":"source/images/2018/06/01-11.png","path":"images/2018/06/01-11.png","modified":1,"renderable":0},{"_id":"source/images/2018/06/01-7.png","path":"images/2018/06/01-7.png","modified":1,"renderable":0},{"_id":"source/images/2020/01/flutter_build_01.png","path":"images/2020/01/flutter_build_01.png","modified":1,"renderable":0},{"_id":"source/images/2019/09/07.png","path":"images/2019/09/07.png","modified":1,"renderable":0},{"_id":"source/images/2019/09/12.png","path":"images/2019/09/12.png","modified":1,"renderable":0},{"_id":"source/images/2019/09/22.png","path":"images/2019/09/22.png","modified":1,"renderable":0},{"_id":"source/images/2019/07/04.png","path":"images/2019/07/04.png","modified":1,"renderable":0},{"_id":"themes/fexo/source/fonts/Lobster-Regular.eot","path":"fonts/Lobster-Regular.eot","modified":1,"renderable":1},{"_id":"themes/fexo/source/fonts/Lobster-Regular.woff","path":"fonts/Lobster-Regular.woff","modified":1,"renderable":1},{"_id":"source/images/2018/06/01-01.png","path":"images/2018/06/01-01.png","modified":1,"renderable":0},{"_id":"source/images/2018/06/01-4.png","path":"images/2018/06/01-4.png","modified":1,"renderable":0},{"_id":"source/images/2018/06/01-6.png","path":"images/2018/06/01-6.png","modified":1,"renderable":0},{"_id":"source/images/2018/06/01-9.png","path":"images/2018/06/01-9.png","modified":1,"renderable":0},{"_id":"source/images/2020/01/flutter_build_02.png","path":"images/2020/01/flutter_build_02.png","modified":1,"renderable":0},{"_id":"source/images/2020/02/flutter_language_02.png","path":"images/2020/02/flutter_language_02.png","modified":1,"renderable":0},{"_id":"source/images/2020/05/mac-terminal-proxy-01.png","path":"images/2020/05/mac-terminal-proxy-01.png","modified":1,"renderable":0},{"_id":"source/images/2019/09/10.png","path":"images/2019/09/10.png","modified":1,"renderable":0},{"_id":"source/images/2019/10/07.png","path":"images/2019/10/07.png","modified":1,"renderable":0},{"_id":"themes/fexo/source/fonts/Lobster-Regular.ttf","path":"fonts/Lobster-Regular.ttf","modified":1,"renderable":1},{"_id":"source/images/2021/07/company-project-git-01.png","path":"images/2021/07/company-project-git-01.png","modified":1,"renderable":0},{"_id":"source/images/2017/01/03-1.png","path":"images/2017/01/03-1.png","modified":1,"renderable":0},{"_id":"source/images/2018/06/01-10.png","path":"images/2018/06/01-10.png","modified":1,"renderable":0},{"_id":"source/images/2018/06/01-2.png","path":"images/2018/06/01-2.png","modified":1,"renderable":0},{"_id":"source/images/2018/06/01-3.png","path":"images/2018/06/01-3.png","modified":1,"renderable":0},{"_id":"source/images/2021/07/company-project-git-02.png","path":"images/2021/07/company-project-git-02.png","modified":1,"renderable":0},{"_id":"themes/fexo/source/fonts/Lobster-Regular.svg","path":"fonts/Lobster-Regular.svg","modified":1,"renderable":1},{"_id":"source/images/2016-01.jpeg","path":"images/2016-01.jpeg","modified":1,"renderable":0},{"_id":"source/images/2017/06/01-3.jpg","path":"images/2017/06/01-3.jpg","modified":1,"renderable":0},{"_id":"source/images/2017/06/01-2.jpg","path":"images/2017/06/01-2.jpg","modified":1,"renderable":0},{"_id":"source/images/2017/12/02-4.png","path":"images/2017/12/02-4.png","modified":1,"renderable":0},{"_id":"source/images/2020/04/flutter_channel_02.gif","path":"images/2020/04/flutter_channel_02.gif","modified":1,"renderable":0}],"Cache":[{"_id":"source/.DS_Store","hash":"7305c5fac19e3cc3a59e7858b9415ce67195a073","modified":1628266643424},{"_id":"source/CNAME","hash":"20e3f9268b0476cdd2fd7b097a3893c044f886fc","modified":1560700019951},{"_id":"themes/fexo/.csscomb.json","hash":"0bff596879c2556634b9a92abe5b1606dc77fd1c","modified":1560185550886},{"_id":"themes/fexo/.DS_Store","hash":"3ba8347de38a3fada1f1459f2ff1f19c0860a0c8","modified":1628088602116},{"_id":"themes/fexo/.gitignore","hash":"cb475326f4d34c639c3dc1abddc03a2539dafbc9","modified":1560185550886},{"_id":"themes/fexo/LICENSE","hash":"db4cb5aef6072a96721b5428fdd999647c049d55","modified":1560185550886},{"_id":"themes/fexo/README.md","hash":"35cd346c229e17ed83609ee94b5d6493c4ab9982","modified":1560185550886},{"_id":"themes/fexo/_config.yml","hash":"311538c6db77b17a6a4511c1216ec52c1845a186","modified":1562513515843},{"_id":"themes/fexo/gulpfile.js","hash":"dc8e67be9205210ca5d5776cc54ab8d76ead96a0","modified":1560185550887},{"_id":"themes/fexo/package.json","hash":"7e0642c0349ee1368304918d68c0a6a4f52aa435","modified":1560185550896},{"_id":"source/_posts/android-app-bundle.md","hash":"956fa606301545b6d2d41536fb8043e75219d832","modified":1571840424008},{"_id":"source/_posts/android-change-font.md","hash":"6e65001ab28b835571f99b935e61a2a36fa60db8","modified":1562425860293},{"_id":"source/_posts/android-elephant.md","hash":"ca967335d64b317ae1e8c7521d895fd5c174ecc8","modified":1560358787126},{"_id":"source/_posts/android-fps.md","hash":"bc17e8ede294e0c25b2f8b2f3ca545cb129efd96","modified":1609942069794},{"_id":"source/_posts/android-reduce-apk-size.md","hash":"ddca60c528783fcda9b5cc3ca7919ce5d04e77d8","modified":1568129814474},{"_id":"source/_posts/.DS_Store","hash":"dd201bd4a720af950b86b2f2acff1b733be873fc","modified":1605887869401},{"_id":"source/_posts/android-resume.md","hash":"fdfbc7ee93763762e0fe96234ddf0579355e4fe5","modified":1560270668931},{"_id":"source/_posts/android-rtl.md","hash":"de691ba9af7c6135cadfef386168da4ffce6640c","modified":1569061152077},{"_id":"source/_posts/android-setting-proxy.md","hash":"0400823b00302800647ee84e61280a2ec6525b21","modified":1561214743968},{"_id":"source/_posts/android-viewbindings.md","hash":"d4915c16c810b818a8b463e15f842f0eecfff6a8","modified":1560440540493},{"_id":"source/_posts/bottom-sheet-dialog-height.md","hash":"8a0e8a4618b21fcdde125d54e0e3a1715186ca1a","modified":1560872886451},{"_id":"source/_posts/company-project-git.md","hash":"7c0f453de4c609882e7457b501d96856ca134485","modified":1628090270921},{"_id":"source/_posts/flutter-build.md","hash":"28879bb07eee9d2d4e9383582332c18c6c09d100","modified":1605888259206},{"_id":"source/_posts/flutter-channel.md","hash":"aef892a2f2243e1167eaedad662fb2a6e678b501","modified":1606317997343},{"_id":"source/_posts/flutter-font.md","hash":"0d39d32d7765645cf926f03069613495a0c07e42","modified":1606022420054},{"_id":"source/_posts/flutter-maven.md","hash":"07a28f0ef738ff014f74d5afc8db4bf6db7365e7","modified":1606401791892},{"_id":"source/_posts/flutter-language.md","hash":"a0621a4a8ffa78a67f03bceaeaf44cdc6344d216","modified":1606138236562},{"_id":"source/_posts/flutter-native.md","hash":"8653096711c93e46030ec76f2f60dd6f3d32fb9c","modified":1606317747866},{"_id":"source/_posts/git-command.md","hash":"e00321ca8af11124820a6cb46c9d04011abc4efe","modified":1560358763855},{"_id":"source/_posts/google-clound.md","hash":"9708454920eb7f417720523b75232f33262ab6ba","modified":1560358310735},{"_id":"source/_posts/hello-blog.md","hash":"4928190b256a43fc2c5e82a22d807a38e78b1268","modified":1560700832998},{"_id":"source/_posts/jenkins.md","hash":"8ca70d7adb8a9e01ef3b7ba148d30bbaade3dfd0","modified":1569334156046},{"_id":"source/_posts/jenkins-frp.md","hash":"3deeb21c96eec30c5e75f1d6021673c2e492b704","modified":1569333836137},{"_id":"source/_posts/mac-crontab.md","hash":"49870a1ef2ae9c5b7c8ee634034874d0a71ee405","modified":1561388064107},{"_id":"source/_posts/mac-terminal-proxy.md","hash":"278bdc7bd3feafdb089142fe6205c5c615f62e40","modified":1606491166346},{"_id":"source/_posts/play-reviews-research.md","hash":"65e2c3261dfe3bb27d83acdf0d3427d3362525ef","modified":1561565472044},{"_id":"source/_posts/python-learn.md","hash":"bc32840aa57e0fbd36818e8912c600e7a213dce8","modified":1562083754768},{"_id":"source/_posts/surge.md","hash":"64e303ee756ca81170bdf24dc192277225a05550","modified":1560358490605},{"_id":"source/_posts/xcode-hot-key.md","hash":"4ed09ab2991868959a3a1192fde23689411be692","modified":1564588587074},{"_id":"source/_posts/xiaomi-charles-crt.md","hash":"583a4656cab9b477036cc698c4b562e25a4d3989","modified":1561214071926},{"_id":"source/category/index.md","hash":"9b8a21b480b2d9f076b55852c5f65c7af81b1b62","modified":1560268477823},{"_id":"source/_posts/xiaomi-install-failed.md","hash":"e8ff692e4a99ec0de8e064a378e4eca74357f07d","modified":1561214080326},{"_id":"source/images/.DS_Store","hash":"523987f671e270c58ce7ff6bacab6d91e961045d","modified":1628096150860},{"_id":"source/project/index.md","hash":"4d60344688c45be4bbb37b3c0a0980489a77300e","modified":1561818792031},{"_id":"source/tag/index.md","hash":"ccb36d7e19a4b1f2481eca5c6aae3ed67add6bdf","modified":1560269070322},{"_id":"source/about/index.md","hash":"c6bc859d3e83b5567da8b70bfb490f5bedfa62cc","modified":1562517407668},{"_id":"source/search/index.md","hash":"033706e5969584ea2b6772eb51a3b6a48571ec7c","modified":1561303189077},{"_id":"themes/fexo/.git/ORIG_HEAD","hash":"7793d7bc482725f206010c0ffcb8cc30faf51eaa","modified":1560185629174},{"_id":"themes/fexo/.git/FETCH_HEAD","hash":"2db9c5024f66e88f0221323c8963065f949b3063","modified":1560185628626},{"_id":"themes/fexo/.git/COMMIT_EDITMSG","hash":"6070278c2e3b31bc1e40c485f66da5336bd2cbb0","modified":1560185615361},{"_id":"themes/fexo/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1560185550883},{"_id":"themes/fexo/.git/config","hash":"a04997723156ad92acd37b6b1249f76028b9aa2d","modified":1560185550884},{"_id":"themes/fexo/.git/index","hash":"33710cd20b0468a08303973859dac6ddb5076f96","modified":1560185550925},{"_id":"themes/fexo/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1560185520255},{"_id":"themes/fexo/.git/packed-refs","hash":"077850fec71c840ea9449390ab9f70474a6733d0","modified":1560185550881},{"_id":"themes/fexo/languages/default.yml","hash":"1a6762d52295b0f7586f40c35e713c0fd33c2a2b","modified":1560185550887},{"_id":"themes/fexo/languages/en.yml","hash":"b58364c7dfac61eddd64510f74ca7516da48f0cf","modified":1560185550887},{"_id":"themes/fexo/languages/no.yml","hash":"bf11017d77f64fbafb9c99ac219d076b20d53afc","modified":1560185550887},{"_id":"themes/fexo/languages/zh-CN.yml","hash":"1a6762d52295b0f7586f40c35e713c0fd33c2a2b","modified":1560185550887},{"_id":"themes/fexo/languages/zh-TW.yml","hash":"6141b4c7a094c74bd9df7c08908d92b561c1a0c0","modified":1560185550888},{"_id":"themes/fexo/layout/.DS_Store","hash":"b0753e14c187860e2418ff99fb5c93cd4dfa5854","modified":1561819537492},{"_id":"themes/fexo/layout/about.ejs","hash":"f1f06842f3fac2c7dd74811722431c5720e6cf8d","modified":1560185550893},{"_id":"themes/fexo/layout/archive.ejs","hash":"9c22251c328e937c444a9f5d4b324f97a78d324f","modified":1560185550894},{"_id":"themes/fexo/layout/category.ejs","hash":"e8c8209f74ac0c96c29dbdff38d0f43664417342","modified":1560185550894},{"_id":"themes/fexo/layout/index.ejs","hash":"9d33cd03e7a8adf8bbc124c248def36c15e681d0","modified":1560185550894},{"_id":"themes/fexo/layout/layout.ejs","hash":"ae485be0f6c0c431245e0cac21dc109c9d0125e8","modified":1560185550894},{"_id":"themes/fexo/layout/link.ejs","hash":"0144bdb1bc5f19763535b79b3302bf85bc0afbff","modified":1560185550895},{"_id":"themes/fexo/layout/post.ejs","hash":"8cf15be489f8f3c11ac0215c16cbce36c854555f","modified":1560185550895},{"_id":"themes/fexo/layout/project.ejs","hash":"5b15448ef4730c17336e7aa5eccd7a2037beb8f1","modified":1561819439001},{"_id":"themes/fexo/layout/search.ejs","hash":"8c6fc59bed1facf14dd6a48bdf8dd44452583f4d","modified":1560185550895},{"_id":"themes/fexo/layout/tag.ejs","hash":"ea8f39f11e6f8750edbf4130abf26168a403b1b4","modified":1560185550895},{"_id":"themes/fexo/yarn.lock","hash":"4c334209995c83f4c60032fc3ecb2a395ba38be3","modified":1560185550925},{"_id":"themes/fexo/source/.DS_Store","hash":"8def933058ecba57f4f5881022586f1ed6b78f8d","modified":1572273673016},{"_id":"source/images/2017/.DS_Store","hash":"dab0edb55295ecda912c5a77f943106d580fd748","modified":1628098293114},{"_id":"source/images/2018/.DS_Store","hash":"66a63623c95f51064f9368a759f4be2818c12fdc","modified":1628098293115},{"_id":"source/images/2020/.DS_Store","hash":"055d8070c400e2bc352876caecf5c4060b72f980","modified":1628098293112},{"_id":"source/images/2019/.DS_Store","hash":"64d390b41e9e7c9e6b42812c3d1cd486b89a3fb1","modified":1628098293117},{"_id":"source/images/2021/.DS_Store","hash":"60c9ef62a7bef547b41d7051190db9c27f5da27c","modified":1628096150866},{"_id":"themes/fexo/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1560185520255},{"_id":"themes/fexo/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1560185520257},{"_id":"themes/fexo/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1560185520256},{"_id":"themes/fexo/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1560185520258},{"_id":"themes/fexo/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1560185520259},{"_id":"themes/fexo/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1560185520259},{"_id":"themes/fexo/.git/hooks/pre-commit.sample","hash":"33729ad4ce51acda35094e581e4088f3167a0af8","modified":1560185520257},{"_id":"themes/fexo/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1560185520260},{"_id":"themes/fexo/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1560185520258},{"_id":"themes/fexo/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1560185520258},{"_id":"themes/fexo/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1560185520256},{"_id":"themes/fexo/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1560185520260},{"_id":"themes/fexo/.git/logs/HEAD","hash":"eea555f6aba75e038546f2a8f4d3966274d53602","modified":1560185550883},{"_id":"themes/fexo/layout/_partial/.DS_Store","hash":"4c39d5e3eca73b4082c198b4c8cb132890fcc596","modified":1561819605161},{"_id":"themes/fexo/layout/_partial/article.ejs","hash":"78c95b932b2f6d80e1765907b70df918fd00d694","modified":1560185550888},{"_id":"themes/fexo/layout/_partial/baidu-analytics.ejs","hash":"c19e4abec19c23840fff7f8a51f4aefbb2b7e8ca","modified":1560185550888},{"_id":"themes/fexo/layout/_partial/baidu-push.ejs","hash":"6950255d74efac8811d5b05d0d7a263c3c96486d","modified":1560185550888},{"_id":"themes/fexo/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1560185550893},{"_id":"themes/fexo/layout/_partial/head.ejs","hash":"c711336c4f4f970b276a244f121fed6eb02ee804","modified":1560185550893},{"_id":"themes/fexo/layout/_partial/home.ejs","hash":"225b8a001c7aace46f2b39676e968e7cba9a4277","modified":1560185550893},{"_id":"themes/fexo/layout/_partial/load-script.ejs","hash":"4675c917548817118f4a3c5d84acc98d6c61a1d8","modified":1560185550893},{"_id":"themes/fexo/layout/_partial/style.ejs","hash":"b3a5bbed9dbdba4934e9805a6d98fb7ff3ed040c","modified":1560185550893},{"_id":"themes/fexo/source/css/styles.css","hash":"1c1062a8115827ce4b8ecd4e166abacf93e1e558","modified":1560185550896},{"_id":"themes/fexo/source/images/avatar.jpg","hash":"06b315b1cde634d2313044a83c40b1ac10961134","modified":1560185550915},{"_id":"themes/fexo/source/sass/_animate.scss","hash":"8de97c948cb4b9c9b7a87c0f7332ed534c378e26","modified":1560185550917},{"_id":"themes/fexo/source/sass/_base.scss","hash":"83f01dbe82e47ce781c6e7eb8a793d95d97e168b","modified":1560185550917},{"_id":"themes/fexo/source/sass/_common.scss","hash":"f1ad269b3c2902411dcae94a04cd27e710783de3","modified":1560185550917},{"_id":"themes/fexo/source/sass/_fontello.scss","hash":"f2d6b86bb63459884cf63e8c045fd10c827396eb","modified":1560185550917},{"_id":"themes/fexo/source/sass/_fonts.scss","hash":"10e188d379782ae2ee10427544919557036d0137","modified":1560185550918},{"_id":"themes/fexo/source/sass/_highlight-js.scss","hash":"38a5c4d9f3a2943aff9bde1d624d710587e3bc05","modified":1560185550918},{"_id":"themes/fexo/source/sass/_type.scss","hash":"cc7a25654593030f5214d5adf85f12a954c373c5","modified":1560185550918},{"_id":"themes/fexo/source/sass/_normalize.scss","hash":"e58275a588bb631a37a2988145eea231ed23176b","modified":1560185550918},{"_id":"themes/fexo/source/sass/_variable.scss","hash":"7b05581ef035a88bd1191914ff992103c7812bdf","modified":1560185550918},{"_id":"themes/fexo/source/sass/styles.scss","hash":"86ebe05d6a2931dd6fceef1e50c31ca996dc20be","modified":1560185550924},{"_id":"themes/fexo/source/js/app.js","hash":"dca6a478f1ebfa27ea4bc36c0ab0692908705403","modified":1560185550916},{"_id":"themes/fexo/source/js/bundle.js","hash":"8b64dd44eec4521f554323fc0a1dbb07f61dc678","modified":1560185550916},{"_id":"themes/fexo/source/js/scroll-spy.js","hash":"cd7ba3d2982bc418d9eced6ef28bdcff83d4cb35","modified":1560185550916},{"_id":"themes/fexo/source/js/util.js","hash":"8136da2bec1faf5fe3e14fa436f501292fca8c07","modified":1560185550917},{"_id":"themes/fexo/source/js/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1560185550916},{"_id":"themes/fexo/source/js/zenscroll.js","hash":"bea2a3571555fdae64e8fc56f161f9a4f427b335","modified":1560185550917},{"_id":"themes/fexo/source/fonts/PoiretOne-Regular.eot","hash":"2a4ef0d00fb77d16e37c3da429698b029e7d2d2f","modified":1560185550909},{"_id":"themes/fexo/source/fonts/PoiretOne-Regular.ttf","hash":"2b186ce205301f7f3abd441f0372b72adcd2aee3","modified":1560185550910},{"_id":"themes/fexo/source/fonts/PoiretOne-Regular.woff","hash":"1cebcedde2c52261591bc322b176638798336a24","modified":1560185550910},{"_id":"themes/fexo/source/fonts/calligraffitti-regular-webfont.eot","hash":"4c7bcece73621f648fa71d58fa13c28670fed8ca","modified":1560185550911},{"_id":"themes/fexo/source/fonts/calligraffitti-regular-webfont.woff","hash":"1364845a3815740c572e29c83fd8d54f1c1ef5de","modified":1560185550913},{"_id":"themes/fexo/source/fonts/calligraffitti-regular-webfont.woff2","hash":"ba50c427166090361b0dab4c72136c7b451e86d4","modified":1560185550913},{"_id":"themes/fexo/source/fonts/fontello.eot","hash":"7732065eeaec4614e9548955d9bd30ccd7b149c1","modified":1560185550913},{"_id":"themes/fexo/source/fonts/fontello.svg","hash":"33a984f4482a5ba5e7bc67d82e8db63cda4e3ae1","modified":1560185550914},{"_id":"themes/fexo/source/fonts/fontello.ttf","hash":"e255d37ca14348e9a8532667a757ab552e58caff","modified":1560185550914},{"_id":"themes/fexo/source/fonts/fontello.woff","hash":"45737fea847f3942ef405f00ea4df940fbb6bbd9","modified":1560185550915},{"_id":"themes/fexo/source/fonts/fontello.woff2","hash":"1dfbc23328582f7cd9bcbe538224f6c762023e43","modified":1560185550915},{"_id":"source/images/2017/06/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1560358606241},{"_id":"source/images/2018/06/.DS_Store","hash":"8d944b316baa47b7c9dbfb77543cd26cd447a19b","modified":1560358333018},{"_id":"source/images/2020/02/flutter_fonts_01.png","hash":"8dd6a1c223d975ec2700e133f6f4ff43bc882879","modified":1605963282299},{"_id":"source/images/2020/02/flutter_fonts_02.png","hash":"56d89a6767cb48c1ddd3056197edded514c67620","modified":1605963282279},{"_id":"source/images/2020/02/flutter_language_03.png","hash":"fa95d509e9075c358e50c75d27b48d4993d6c960","modified":1606137988009},{"_id":"source/images/2020/02/flutter_language_05.png","hash":"19e402e2f907591f540a352c7786dc6db8a60778","modified":1606137988025},{"_id":"source/images/2020/02/flutter_language_06.png","hash":"71d39897ec876bb1b5330e392ba9d98a3da36f9a","modified":1606137988000},{"_id":"source/images/2018/01/01.png","hash":"325dfe89bfd00ac3e76d1e9295d105144cdd4c28","modified":1560523224381},{"_id":"source/images/2020/04/flutter_channel_01.png","hash":"c4f520ee91f2d582a278906b8dfe2eabd29594ca","modified":1606317781901},{"_id":"source/images/2019/09/02.png","hash":"6be315ae567720ea23c89f38e845e7451b699baa","modified":1568129068465},{"_id":"source/images/2019/09/08.png","hash":"a725c8aa633f2b5ca56526c44bc4439fbc4552d7","modified":1569333591056},{"_id":"source/images/2019/09/17.png","hash":"90b6717aaabe24a06a2f678890d00e7b9b234ccb","modified":1569333694376},{"_id":"source/images/2019/07/02.png","hash":"d5d7991478de93dc24fe6f030637098db13ef6e7","modified":1562424976557},{"_id":"source/images/2019/07/03.png","hash":"ff505cc6271edd27fb2fb855451f8033268921e9","modified":1562424989944},{"_id":"source/images/2019/07/05.png","hash":"0236676e81a5149caa3eeb8316a5306c28781f96","modified":1562425010138},{"_id":"source/images/2019/07/.DS_Store","hash":"53fc0e99c437d44fb57bb7140be1f53ab1077833","modified":1562425111167},{"_id":"source/images/2021/01/android_fps_02.png","hash":"3e2c43bc8ba675e4bbfda2bea7576a76e7b7b983","modified":1609941979964},{"_id":"source/images/2021/01/android_fps_03.png","hash":"bd9155986762ad4f42803cc5a8585621e8019e77","modified":1609941979939},{"_id":"source/images/2021/01/android_fps_04.png","hash":"055b7dd7f15a26ea33e1476313c662ad5df5d1af","modified":1609941979926},{"_id":"source/images/2021/01/android_fps_05.png","hash":"26e35db01dc74c319a796c4589475449c69433ed","modified":1609941979903},{"_id":"source/images/2021/01/android_fps_06.png","hash":"18edfe03b31f3d3441c424da58d846821e78d325","modified":1609941979883},{"_id":"source/images/2021/01/android_fps_08.png","hash":"c251a0e2e6469bab760ec16eb7f0ec29a082cd49","modified":1609941979837},{"_id":"source/images/2019/10/03.png","hash":"fea11d212e951529c2fd580b26fa1ec21da49d2b","modified":1571560971576},{"_id":"source/images/2019/10/04.png","hash":"18d9019e6dcfe6caeb8cd487602c75e0ed7dbdbc","modified":1571560982992},{"_id":"source/images/2019/10/.DS_Store","hash":"4ba2e964860438444836b75a3f0cb0b02e9916f7","modified":1571565620941},{"_id":"source/images/2019/10/05.png","hash":"2a956969aa6f8e7e39c1af4835378d3d0f6b0550","modified":1571560990302},{"_id":"source/images/2019/10/06.png","hash":"2ffa8852d2c32a227cd14dcb79cfde10452c9849","modified":1571561129243},{"_id":"themes/fexo/source/css/styles.css.map","hash":"9672a4e5f8c6e9742095c1ca33f1c68b3145a7e3","modified":1560185550898},{"_id":"themes/fexo/source/images/avatar.png","hash":"f33c05478287316a9b41044b10ee1c3e3d0f4d12","modified":1572184564106},{"_id":"themes/fexo/source/images/qr-wechat.png","hash":"94721f68d7b42224c962d667e9e0639e8987f4a4","modified":1560272940038},{"_id":"themes/fexo/source/sass/pages/_tag.scss","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1560185550924},{"_id":"themes/fexo/source/fonts/calligraffitti-regular-webfont.ttf","hash":"4688935c427ae40dcbf16523bc11d9fc10e359b5","modified":1560185550912},{"_id":"source/images/2017/12/02-2.png","hash":"85f61f5a6c3cfde556563aa15f97e6386d242596","modified":1540340690000},{"_id":"source/images/2020/02/flutter_language_01.png","hash":"cb542b28a744ccb1251ba3ff095c19ca14cca647","modified":1606137987981},{"_id":"source/images/2020/03/native_flutter_01.png","hash":"dc586346ee820d75a3014df425a3b11b8936d6c4","modified":1606231692490},{"_id":"source/images/2019/09/03.png","hash":"767a165079970b49cc4e21ce0860f420ae244966","modified":1568129078942},{"_id":"source/images/2019/09/05.png","hash":"3e8590c46e5a78f1be624b92bf33ca855cc2dbba","modified":1568129096031},{"_id":"source/images/2019/09/06.png","hash":"f6b90d060ca27b5de298201bb50552f517ac9dbe","modified":1569247560439},{"_id":"source/images/2019/09/09.png","hash":"d36286e0e406f0467ac6e1079776919bfbfaae2d","modified":1569333606664},{"_id":"source/images/2019/09/13.png","hash":"4dc3a7c1c72dc0cfb99caa3150cb571d19275356","modified":1569333656680},{"_id":"source/images/2019/09/16.png","hash":"389a9b6978337c4af9ead033ca39e2c385205d2d","modified":1569333686015},{"_id":"source/images/2019/09/18.png","hash":"9d21a468da4072116fbb7695975994c1cd74c5fb","modified":1569333704091},{"_id":"source/images/2019/09/19.png","hash":"52e614670f85d2db348c5c5d7dbebc43147e0c46","modified":1569333713243},{"_id":"source/images/2019/09/20.png","hash":"1a752abd4b4bdcb5497c0d6d693f296e0fa52b20","modified":1569333726995},{"_id":"source/images/2019/09/21.png","hash":"8f46eb87b6f460e390b6c737468d5217caab4c56","modified":1569333739109},{"_id":"source/images/2019/07/01.png","hash":"aaecffb98d4681997cb3c43b709fc42c9a33575f","modified":1562424949299},{"_id":"source/images/2021/01/android_fps_01.png","hash":"c54aa4846ffc8e5fb0518d3fcd5d099f561abed4","modified":1609941979989},{"_id":"themes/fexo/.git/refs/heads/master","hash":"7793d7bc482725f206010c0ffcb8cc30faf51eaa","modified":1560185550883},{"_id":"themes/fexo/layout/_partial/component/back-top.ejs","hash":"47f2b8306b901f0fffc6aa0cfa40db697a0c5aff","modified":1560185550888},{"_id":"themes/fexo/layout/_partial/component/category-box.ejs","hash":"f18e08e5c8718d5cd6672fc01e25ba457db0a385","modified":1560185550888},{"_id":"themes/fexo/layout/_partial/component/category.ejs","hash":"2429158ff177b8876de765498b54d0c91b3fc551","modified":1560185550889},{"_id":"themes/fexo/layout/_partial/component/changyan.ejs","hash":"e87c5fa6db61713b63264e467e11d7fde229e1c0","modified":1560185550889},{"_id":"themes/fexo/layout/_partial/component/comments.ejs","hash":"db8c87adcf9426984b959a014cae149f4c872cb1","modified":1560185550889},{"_id":"themes/fexo/layout/_partial/component/date.ejs","hash":"163fbd874481cb9e2b6da5282701a3fbaa4e367a","modified":1560185550889},{"_id":"themes/fexo/layout/_partial/component/disqus.ejs","hash":"21de7498d235a52337335108fce7446e1a21ea1c","modified":1560185550889},{"_id":"themes/fexo/layout/_partial/component/donation.ejs","hash":"b81e911bca334074fb4b504673a14f2f184b8536","modified":1560185550890},{"_id":"themes/fexo/layout/_partial/component/gentie.ejs","hash":"9b78a138fb93a71b481ab25c8dea2e082e5e9d6c","modified":1560185550890},{"_id":"themes/fexo/layout/_partial/component/gitalk.ejs","hash":"8bd0101b6673550fe1bf161cc005fb591ee8496c","modified":1560185550890},{"_id":"themes/fexo/layout/_partial/component/gitment.ejs","hash":"dda26e46ff84c896a96207ad33bb85a8f233f435","modified":1560185550890},{"_id":"themes/fexo/layout/_partial/component/hypercomments.ejs","hash":"321339582edb1dd9c4e4ca13108fe494d08494fc","modified":1560185550890},{"_id":"themes/fexo/layout/_partial/component/item-category-name.ejs","hash":"8ab52c9b5d5db1d3c1d343ecb405c4e15cd144ac","modified":1560185550890},{"_id":"themes/fexo/layout/_partial/component/item-post.ejs","hash":"722e5dbde2d4683eea08f2af922358db45b253b1","modified":1560185550891},{"_id":"themes/fexo/layout/_partial/component/item-tag.ejs","hash":"1b4c4e090c33ccfd44b531a5de9af16eec266512","modified":1560185550891},{"_id":"themes/fexo/layout/_partial/component/item-year.ejs","hash":"906a6aea44a30e83c4c4e449294c7e4d831c188e","modified":1560185550891},{"_id":"themes/fexo/layout/_partial/component/modal.ejs","hash":"8edceb2fd6c770691bd5cf4a35236c1def8410fe","modified":1560185550891},{"_id":"themes/fexo/layout/_partial/component/page-header.ejs","hash":"14bad32082d87d7eeb45c0e9079e72f0ae65dbf4","modified":1560185550891},{"_id":"themes/fexo/layout/_partial/component/pagination.ejs","hash":"ffbb548aee6e15cae924ee7f922f28b2403e8e45","modified":1560185550891},{"_id":"themes/fexo/layout/_partial/component/prev-net.ejs","hash":"d1cb2e61814bcbd25ccb1628f99b18316e029892","modified":1560185550892},{"_id":"themes/fexo/layout/_partial/component/tag-box.ejs","hash":"d648ea91ec9dc72bca80d70fbb66f7655bd0ea12","modified":1560185550892},{"_id":"themes/fexo/layout/_partial/component/tag-list.ejs","hash":"8535c40b573744ced738b051383c0feca80eb0e9","modified":1560185550892},{"_id":"themes/fexo/layout/_partial/component/title.ejs","hash":"e2fcdd904123186648513cfca4c7ad04921d2d57","modified":1560185550892},{"_id":"themes/fexo/layout/_partial/component/toc.ejs","hash":"000be428e925f5595af29eeba37ba6111f7f6511","modified":1560185550892},{"_id":"themes/fexo/layout/_partial/component/toolbox.ejs","hash":"fcfcccc5b231c4050f1a665b70f7738f9d070541","modified":1560185550892},{"_id":"themes/fexo/layout/_partial/component/uyan.ejs","hash":"afe757c6f45d24640b22d90db6f2799000c6f994","modified":1560185550892},{"_id":"themes/fexo/layout/_partial/component/valine.ejs","hash":"28d537af94571dd962ca37358c86d529eb4efa5e","modified":1560185550893},{"_id":"themes/fexo/source/images/qr-alipay.png","hash":"680ac59313cf60b83eaca0d4e022a081b144652e","modified":1560272975434},{"_id":"themes/fexo/source/sass/component/_category-box.scss","hash":"a807145b74d1b98270ea19ae35edd25b4c448bfa","modified":1560185550919},{"_id":"themes/fexo/source/sass/component/_back-top.scss","hash":"1c67da7007f4b9d8c65deea3d82c0f579e65f2c2","modified":1560185550919},{"_id":"themes/fexo/source/sass/component/_comments.scss","hash":"3e9b61bc08f38f947f54e942986a19a7f95ce723","modified":1560185550919},{"_id":"themes/fexo/source/sass/component/_donation.scss","hash":"d4d2d05e470978a38abf883be34ea2095132057a","modified":1560185550919},{"_id":"themes/fexo/source/sass/component/_hint.scss","hash":"2812b4e10313168f2e082b740c60d64a151d94c8","modified":1560185550919},{"_id":"themes/fexo/source/sass/component/_index.scss","hash":"a741a0bfb47d0acdef12cdeb968c104bb002f86d","modified":1560185550919},{"_id":"themes/fexo/source/sass/component/_item-category-name.scss","hash":"119840d160cd263b57e79e2099a81079d7eeee3d","modified":1560185550920},{"_id":"themes/fexo/source/sass/component/_item-post.scss","hash":"1fb2e9be2d2edbb538cfbce7c80d5847f88e2f05","modified":1560185550920},{"_id":"themes/fexo/source/sass/component/_item-title.scss","hash":"cdaca2858abc9428ef01103a7fbea8f095d856aa","modified":1560185550920},{"_id":"themes/fexo/source/sass/component/_item-year.scss","hash":"12c147dd4ab9587cd622083c86c2f6cf07d8e26a","modified":1560185550921},{"_id":"themes/fexo/source/sass/component/_list-post.scss","hash":"43564f6443385bf34e15672d1477d1c7560f5563","modified":1560185550921},{"_id":"themes/fexo/source/sass/component/_modal.scss","hash":"2f0ed96df388ec28445b1ce5c6a61a0a697f9a68","modified":1560185550921},{"_id":"themes/fexo/source/sass/component/_page-header.scss","hash":"893d0595ef48323dce449ef0d17308ce02b36087","modified":1560185550921},{"_id":"themes/fexo/source/sass/component/_pagination.scss","hash":"12c1880c518aee2e3ccf59661d01c308639f8a9e","modified":1560185550922},{"_id":"themes/fexo/source/sass/component/_prev-net.scss","hash":"634ef68823dda03bf9d42c740590581663c17351","modified":1560185550922},{"_id":"themes/fexo/source/sass/component/_table.scss","hash":"4899fb31d1be8d5c9c397fcbcfc2ff0c5b2e7f7f","modified":1560185550922},{"_id":"themes/fexo/source/sass/component/_tag-box.scss","hash":"7601951d09a75a7c39493bfa1b1da5ac989d9cda","modified":1560185550922},{"_id":"themes/fexo/source/sass/component/_toc.scss","hash":"3b4c083cb2ba4a88ca35b6d8259ee991c83b3406","modified":1560185550922},{"_id":"themes/fexo/source/sass/component/_toolbox-mobile.scss","hash":"f15b215b9bb103ee1773a01d8badd81bb7643710","modified":1560185550922},{"_id":"themes/fexo/source/sass/component/_toolbox.scss","hash":"964a480d4e7fad100463195cde2a3f67f9765c23","modified":1560185550923},{"_id":"themes/fexo/source/sass/pages/_about.scss","hash":"7d61e627ea5376390081e0b93db426ffc6c4dee8","modified":1560185550923},{"_id":"themes/fexo/source/sass/pages/_archive.scss","hash":"fefd54282a42ebb68b711f1cfefa1f67abbde05b","modified":1560185550923},{"_id":"themes/fexo/source/sass/pages/_category.scss","hash":"713242d10c0c8687c9e2f287f1beeb38de6cdbad","modified":1560185550923},{"_id":"themes/fexo/source/sass/pages/_home.scss","hash":"b65bb069ed28fbf223c5bb7e760882f79d20fa46","modified":1560185550923},{"_id":"themes/fexo/source/sass/pages/_index.scss","hash":"d9fe73a87585abad06a7dd77b67ec7ce6c24402c","modified":1560185550923},{"_id":"themes/fexo/source/sass/pages/_link.scss","hash":"d3a249423c7ee88d1cb3a12e03f6c42a0a4d45a1","modified":1560185550924},{"_id":"themes/fexo/source/sass/pages/_post.scss","hash":"c6f694568af362f9fe1e7e2b9909e47303178116","modified":1560185550924},{"_id":"themes/fexo/source/sass/pages/_project.scss","hash":"cab0947fc9d7926a07badaa567803cc7a0968f10","modified":1560185550924},{"_id":"themes/fexo/source/sass/pages/_search.scss","hash":"fd28f01829628c9d21f9391d5067ddcd836dad13","modified":1560185550924},{"_id":"themes/fexo/source/fonts/PoiretOne-Regular.svg","hash":"e21109783f218cb7849b12e867e0b775ce3fadda","modified":1560185550909},{"_id":"source/images/2017/06/01-1.png","hash":"ca507ce4c1efc3e4d3b6e789e723f8330101057a","modified":1540340690000},{"_id":"source/images/2020/03/native_flutter_02.png","hash":"66e51ffb3d86a9b6437617fc9210f8acc6b2c357","modified":1606231692536},{"_id":"source/images/2019/09/01.png","hash":"590103a1794c3235b7d188b043f70430b9d079ae","modified":1568129036238},{"_id":"source/images/2019/09/11.png","hash":"b80b41cf71c5bd9faea2e0328f2902d7bab3c688","modified":1569333633855},{"_id":"source/images/2019/09/14.png","hash":"74167369d6f1e073724ec0c9a1bd36b274041d1e","modified":1569333665532},{"_id":"source/images/2019/09/15.png","hash":"25f6f1de69eab8d1168161a6bc345cd8b21398b4","modified":1569333675824},{"_id":"source/images/2019/10/01.png","hash":"9a7d52564af7c14d8b7587186827e9730858f59e","modified":1571560949664},{"_id":"themes/fexo/.git/objects/pack/pack-db3c73e874113bb7724518ccacf5fc5f0e8907f0.idx","hash":"7ff28ac894f356c5c95bc7cc2b15862d4175e7cf","modified":1560185550873},{"_id":"source/images/2018/06/01-13.png","hash":"f528ec75ebba6a3419b12cc53e4855cf7ef07d4c","modified":1540340690000},{"_id":"source/images/2018/06/01-5.png","hash":"bbe69c3612b5ce0014d8b68aa4beda5243f9ab5f","modified":1540340690000},{"_id":"source/images/2020/01/flutter_build_03.png","hash":"b0d8ed00b8079f37ea6ce53d59e9f4d9e1b64f77","modified":1605581017000},{"_id":"source/images/2019/06/01.png","hash":"fa7c9ae69b41134cca82895b84da0bab40138082","modified":1560700627668},{"_id":"source/images/2019/09/04.png","hash":"4b726c5f048471c2674c606a9fc704963251a1bf","modified":1568129086830},{"_id":"source/images/2019/10/02.png","hash":"c4eab79815dae180fe5ce3426f858c796522300a","modified":1571560963859},{"_id":"themes/fexo/.git/logs/refs/heads/master","hash":"eea555f6aba75e038546f2a8f4d3966274d53602","modified":1560185550883},{"_id":"themes/fexo/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1560185550882},{"_id":"source/images/2017/12/02-3.png","hash":"9599f4c6e014e7a338c44e81baeabacffdcb514f","modified":1540340690000},{"_id":"source/images/2018/06/01-12.png","hash":"1cf40c875562a1a96e8250c8226426c1f825c19d","modified":1540340690000},{"_id":"source/images/2018/06/01-8.png","hash":"b2f2270eaa2423620a3a253ac49df991ad3f5bac","modified":1540340690000},{"_id":"source/images/2020/02/flutter_language_04.png","hash":"68f2ccf6fa1ebad51f7d9b66b5ec6079658eccfc","modified":1606137987942},{"_id":"source/images/2021/01/android_fps_07.png","hash":"274979dab7144814bb8568c4e30ae3f515e90ed5","modified":1609941979862},{"_id":"themes/fexo/source/fonts/calligraffitti-regular-webfont.svg","hash":"76e1e4cee6f2b5d596c635631938ee5eb6ab3e67","modified":1560185550911},{"_id":"source/images/2017/12/02-1.png","hash":"07af5f7e678f5fbbad80ce89e4d8ddbaae8dc935","modified":1540340690000},{"_id":"source/images/2018/06/01-11.png","hash":"7284bebf5413b1eef31941759ff87cbbecbbcd59","modified":1540340690000},{"_id":"source/images/2018/06/01-7.png","hash":"27922d51b2c418862d1f51111a729cc72b393dda","modified":1540340690000},{"_id":"source/images/2020/01/flutter_build_01.png","hash":"d31367fd095bdbe1eeb7a50145b95e05056e7c9a","modified":1605581017000},{"_id":"source/images/2019/09/07.png","hash":"93384178b16c67de8599f56a23cb60ddfa50d772","modified":1569333576035},{"_id":"source/images/2019/09/12.png","hash":"beeb86c76b204762d7e6330f82f7d27caa6a02bf","modified":1569333646051},{"_id":"source/images/2019/09/22.png","hash":"ca2f2c845f456df6666ca646495e1a07bb85e72b","modified":1569333747795},{"_id":"source/images/2019/07/04.png","hash":"da40ca39514fd582bbac9b53ab77b096e619ec71","modified":1562425001336},{"_id":"themes/fexo/.git/logs/refs/remotes/origin/HEAD","hash":"eea555f6aba75e038546f2a8f4d3966274d53602","modified":1560185550882},{"_id":"themes/fexo/source/fonts/Lobster-Regular.eot","hash":"4f0c85f63beb0d95610317e16f1d4acdd2962eee","modified":1560185550901},{"_id":"themes/fexo/source/fonts/Lobster-Regular.woff","hash":"298b80b1c9f694e1a055d62a5d809863c89baf50","modified":1560185550908},{"_id":"source/images/2018/06/01-01.png","hash":"569906a03d979087f050d90d34893d62d6780635","modified":1540340690000},{"_id":"source/images/2018/06/01-4.png","hash":"cfee3d808724a4da442adbaf6fcc9521e91a9bb9","modified":1540340690000},{"_id":"source/images/2018/06/01-6.png","hash":"cbdbe74cd9cb4f0805144a256077bc67f2aa7123","modified":1540340690000},{"_id":"source/images/2018/06/01-9.png","hash":"e6419535277ccd7d54a3f4e04ee4c2755e5edb87","modified":1540340690000},{"_id":"source/images/2020/01/flutter_build_02.png","hash":"0b3d7ea6a65d489cb5cfd23ec87033ecda708621","modified":1605581017000},{"_id":"source/images/2020/02/flutter_language_02.png","hash":"e118ec6ff0d4028f2eaaae92d30ab21c61f8747e","modified":1606137987963},{"_id":"source/images/2020/05/mac-terminal-proxy-01.png","hash":"5d97cfae86700afc6b329517dbd1e4fb4a3a4a07","modified":1606491044660},{"_id":"source/images/2019/09/10.png","hash":"29fbbc80027a9a748a99a43c2c55e3d05ade32b5","modified":1569333622262},{"_id":"source/images/2019/10/07.png","hash":"de139c0a6463da278b361f675cd4c4a930d9da88","modified":1571840395930},{"_id":"themes/fexo/source/fonts/Lobster-Regular.ttf","hash":"50a84291b7012bfdcf9ff5116d6c7aa3f257f37f","modified":1560185550906},{"_id":"source/images/2021/07/company-project-git-01.png","hash":"40514234cba3e4e78fcfe4654309037c8f69fc13","modified":1628089642537},{"_id":"source/images/2017/01/03-1.png","hash":"2d0d098fd69df53d6713544e971c2681c34792bc","modified":1540340690000},{"_id":"source/images/2018/06/01-10.png","hash":"d93fbeb30ceec729ec90acc5300574de8d9a470b","modified":1540340690000},{"_id":"source/images/2018/06/01-2.png","hash":"ae43d9180cb6c1c234a878a7eaf78c7201660096","modified":1540340690000},{"_id":"source/images/2018/06/01-3.png","hash":"0fc4f6494d0f7d6ebec7b8f9850b0abd432ea08d","modified":1540340690000},{"_id":"source/images/2021/07/company-project-git-02.png","hash":"6e74a55762f717d9a836e755dc5d4d5c5581fdf0","modified":1628089675064},{"_id":"themes/fexo/source/fonts/Lobster-Regular.svg","hash":"be1cab622c673942fb4d11a23c012227938b4792","modified":1560185550904},{"_id":"source/images/2016-01.jpeg","hash":"7195aa89cfb869a5d6ac80e87425990205ae1e93","modified":1560357362686},{"_id":"source/images/2017/06/01-3.jpg","hash":"5f9944e43598799f9690537173e259f4f0c3641d","modified":1540340690000},{"_id":"source/images/2017/06/01-2.jpg","hash":"91222a364210298be5a3a9bf05f5bf1904825212","modified":1540340690000},{"_id":"source/images/2017/12/02-4.png","hash":"8c474f24127ca08da67dcfc21b2f55f91327f18e","modified":1540340690000},{"_id":"source/images/2020/04/flutter_channel_02.gif","hash":"68920b2cc1b85e3f6ea043d7d43d3a1cfa860502","modified":1606317781882},{"_id":"themes/fexo/.git/objects/pack/pack-db3c73e874113bb7724518ccacf5fc5f0e8907f0.pack","hash":"37a9f489c893644eaf2c8aa002beb763720ddb08","modified":1560185615000}],"Category":[{"name":"Android","_id":"cks0kfic80006w3yz6jmtxmtm"},{"name":"随笔","_id":"cks0kfici000jw3yzgyuzi0uw"},{"name":"Git","_id":"cks0kficl000sw3yzmhhdanc2"},{"name":"Flutter","_id":"cks0kfico000zw3yzq9ekozu5"},{"name":"VPN","_id":"cks0kficw001lw3yzlv8fynnf"},{"name":"Blog","_id":"cks0kficz001sw3yz4gxtmftj"},{"name":"工具","_id":"cks0kfid2001zw3yzrth0kp3i"},{"name":"Python","_id":"cks0kfid60026w3yzs9git7ix"},{"name":"iOS","_id":"cks0kfidd002jw3yzojh03x4r"}],"Data":[],"Page":[{"title":"category","layout":"category","comments":0,"date":"2019-06-11T15:53:37.000Z","_content":"","source":"category/index.md","raw":"---\ntitle: category\nlayout: category\ncomments: false\ndate: 2019-06-11 23:53:37\n---\n","updated":"2019-06-11T15:54:37.823Z","path":"category/index.html","_id":"cks0kfic20001w3yz298yk2bt","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"project","layout":"project","comments":0,"_content":"","source":"project/index.md","raw":"---\ntitle: project\nlayout: project\ncomments: false\n---","date":"2019-06-29T14:33:12.031Z","updated":"2019-06-29T14:33:12.031Z","path":"project/index.html","_id":"cks0kfic40003w3yzfsjjkk3h","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tag","layout":"tag","comments":0,"date":"2019-06-11T16:03:54.000Z","_content":"","source":"tag/index.md","raw":"---\ntitle: tag\nlayout: tag\ncomments: false\ndate: 2019-06-12 00:03:54\n---\n","updated":"2019-06-11T16:04:30.322Z","path":"tag/index.html","_id":"cks0kfied0042w3yzyjl520jv","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"search","layout":"search","comments":0,"date":"2019-06-23T15:18:48.000Z","_content":"","source":"search/index.md","raw":"---\n---\ntitle: search\nlayout: search\ncomments: false\ndate: 2019-06-23 23:18:48\n---\n","updated":"2019-06-23T15:19:49.077Z","path":"search/index.html","_id":"cks0kfief0044w3yzymgr0p2k","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"关于我","date":"2019-06-18T15:05:08.000Z","comments":0,"_content":"\n这里是一位靠谱的 Android 开发工程师个人简历，目前只考虑 **广州** 或 **深圳** 这两个地方。\n\n如果您有靠谱的 Android 开发工作欢迎推荐，请邮件我索要完整的简历，发邮件时请使用公司邮箱并说明公司信息，谢谢。\n\n以下是我的邮箱：\n[huanggaojun13@gmail.com](mailto:huanggaojun13@gmail.com) \n\n## 个人信息\n\n- 3 年 Android 开发经验\n- 期望城市：广州/深圳\n- 个人博客: [https://gojun.me/](https://gojun.me/)\n- GitHub: [https://github.com/Freelander](https://github.com/Freelander) (746+ 个粉丝)\n\n## 工作经历\n\n###  [广州棒谷科技股份有限公司](https://www.banggood.cn/)\n\n**Android 中级开发工程师**\n\n**2016.12 - 至今**\n\n**公司简介：** 一家专注于跨境贸易 B2C 电子商务公司，拥有一支五千多人的年轻精英团队。\n\n#### **[KOYYE](https://play.google.com/store/apps/details?id=com.chicdeals)**\n\n**项目简介：** 公司新站点主打中东地区市场，应用支持中东阿拉伯语切换，目前用户量 1w+。\n\n**职责：Android 端独立负责人** \n\n**主要工作内容：**\n\n- 搭建项目基础架构，攻破项目难点；\n- 与产品运营工作人员对接需求，制定技术方案；\n- 版本快速迭代维护更新，完成产品需求；\n- 实现 App 国际化，多语言切换，适配兼容中东阿拉伯语；\n- 订单成交转化数据、归因、用户行为等统计数据埋点；\n- 国外支付方式 Paypal 支付、钱海信用卡等支付方式对接；\n- 接入第三方 Facebook、Firebase、AppFyler 等平台。\n\n#### **[Banggood](https://play.google.com/store/apps/details?id=com.banggood.client)**\n\n**项目简介：** 公司主项目拥有千万级别用户量的 App。\n\n**职责：Android 端主力开发** \n\n**主要工作内容：**\n\n- 重构旧版项目，搭建新架构，适应复杂业务处理；\n- 制定编码规范，推进团队协作使用 Git 工具；\n- 深入与设计师交流，参与 App 界面设计交互，推进 App 使用 Material Design 设计风格，提升应用在 Play Store 排名；\n- 配合运营部门推广工作， App 广告深度链接接管以及广告归因；\n- 对接 Google Analytics、Facebook 数据统计事件埋点。\n\n### [广州橙希网络科技有限公司](https://www.lagou.com/gongsi/122635.html)\n\n**Android 开发工程师**\n\n**2015.07 - 2016.11**\n\n**公司简介：** 一家专注于移动互联网领域的 App 软件开发公司\n\n#### **[天使孕育](https://www.wandoujia.com/apps/com.gdswf.mother)**\n\n**职责:** 医生端 Android 开发负责人，UI 界面搭建，api 接口请求数据绑定，多渠道上线打包混淆。\n\n**项目简介:** 天使孕育是公司外包广东省卫生发展总公司项目，主要功能使用友盟即时通讯实现孕妈与医生交 流，圈子类似微信朋友圈，孕妈预约挂号，使用高德定位找医生，与 Web 交互完成完成孕妈所有产前登记表 以及自我评测功能。\n\n#### **[拾翠](https://www.wandoujia.com/apps/com.chengxinet.shicui)**\n\n**职责:** 负责搭建成为商家模块界面，以及界面数据与后台对接工作。\n\n**项目简介:** 拾翠是中国首个手艺定制互联网平台，App 集成商家与用户一体，具有购物 App 的基本功能，用户 浏览商品详情，咨询商家，购买商品，支持微信支付宝支付等;商家模块主要功能发布商品，订单管理，交易 金额与订单量统计分析等等。\n\n\n## 开源项目\n\n### [Elephant](https://github.com/Freelander/Elephant)\n\n**Star 数: 958+**\n\nElephant 是 Laravel China (PHPHub) 社区第三方 Android 客户端，App UI 风格遵循了 Google Material Design 设计风格，项目使用到技术有 RxJava + Retrofit MVP，扫码登录，使用友盟统计分析等等。\n\n## 专业技能\n\n\n- 熟悉面向对象，了解封装、继承和接口设计，了解 MVP 与 MVVM 架构;\n- 熟悉自定义 View 绘制，以及手势、事件分发;\n- 熟悉 Material Design 设计，了解其规范，尺寸与层次;\n- 熟悉代码混淆，反编译 Apk，Apk 瘦身优化;\n- 熟悉使用第三方开源组件，Logger，Butterknife，Fresco，OkHttp， Gson 等等;\n- 熟悉 Android 国际化开发，多语言切换，中东阿拉伯语适配；\n- 熟悉国外  Google Analytics、Facebook 平台数据统计；\n- 熟悉 App 深度链接接管，以及广告归因统计；\n- 懂得性能优化，UI 过度绘制优化，布局优化；\n- 懂得如何选择优秀第三方开源库，认识大量的，各种各样的开源库;\n- 懂得将代码发布到 JitPack；\n- 具有编写规范，且易于维护代码的能力;\n- 能够快速掌握并集成一份第三方 SDK。\n\n\n## 技能专长\n\n以下都是我平时用过或熟悉的编程语言、框架、软件及工具，带 ^†^ 符号的是我比较喜欢和常用的。\n\n### 编程语言\n\n- [Java](https://www.java.com)^†^\n- [Kotlin](http://kotlinlang.org)^†^\n- [Python](https://www.python.org)\n\n\n### 框架\n\n- [RxAndroid](https://github.com/ReactiveX/RxAndroid)^†^\n- [EventBus](https://github.com/greenrobot/EventBus)^†^\n- [Retrofit](https://github.com/square/retrofit)^†^\n- [Gson](https://github.com/google/gson)^†^\n- [Glide](https://github.com/bumptech/glide)^†^\n- [Fresco](https://github.com/facebook/fresco)^†^\n- [OkHttp](https://github.com/square/okhttp)^†^\n\n\n### 工具软件\n\n- [Mac OS X](http://apple.com/macosx)^†^\n- [Android Studio](https://developer.android.com/studio/index.html?hl=zh-cn)^†^\n- [Charles](https://www.charlesproxy.com/)^†^\n- [Alfred 3](https://www.alfredapp.com)^†^\n- [Surge](https://nssurge.com/)^†^\n- [Git](https://git-scm.com)^†^\n- [iTerm](https://www.iterm2.com)^†^\n- [Postman](https://www.getpostman.com)^†^\n- [Sketch](https://www.sketch.com/)\n- [Adobe Photoshop](http://www.adobe.com/cn/products/cs6/photoshop.html)\n- [PyCharm](https://www.jetbrains.com/pycharm)\n- [XMind](https://www.xmind.cn)\n\n## 其他\n\n\n### 文档编写能力\n\n学习 Android 之初整理汇总了一份 Android 学习资料 [Android_Data](https://github.com/Freelander/Android_Data) 与 [Android 开源库排名](https://github.com/Freelander/Android_Data/blob/master/Android-Librarys-Top-100.md)，开放后受到圈内广大开发者好评。\n\n- Star 数: 7963+ \n- Fork: 2044+\n\n### UI 设计能力\n\n熟悉 PhotoShop 工具操作，对设计美感有高品质追求，独立设计 [Elephant](https://github.com/Freelander/Elephant) UI。\n\n### 英文能力\n\n目前负责开发的 App 语言均是英语，GitHub 上开源项目均使用英文文档。\n\n### 学习能力\n\n大部分 Android 相关的知识以及技术都是通过自学而来。\n\n\n## 致谢\n\n感谢您花时间阅读我的简历，期待能有机会和您共事。\n\n","source":"about/index.md","raw":"---\ntitle: 关于我\ndate: 2019-06-18 23:05:08\ncomments: false\n---\n\n这里是一位靠谱的 Android 开发工程师个人简历，目前只考虑 **广州** 或 **深圳** 这两个地方。\n\n如果您有靠谱的 Android 开发工作欢迎推荐，请邮件我索要完整的简历，发邮件时请使用公司邮箱并说明公司信息，谢谢。\n\n以下是我的邮箱：\n[huanggaojun13@gmail.com](mailto:huanggaojun13@gmail.com) \n\n## 个人信息\n\n- 3 年 Android 开发经验\n- 期望城市：广州/深圳\n- 个人博客: [https://gojun.me/](https://gojun.me/)\n- GitHub: [https://github.com/Freelander](https://github.com/Freelander) (746+ 个粉丝)\n\n## 工作经历\n\n###  [广州棒谷科技股份有限公司](https://www.banggood.cn/)\n\n**Android 中级开发工程师**\n\n**2016.12 - 至今**\n\n**公司简介：** 一家专注于跨境贸易 B2C 电子商务公司，拥有一支五千多人的年轻精英团队。\n\n#### **[KOYYE](https://play.google.com/store/apps/details?id=com.chicdeals)**\n\n**项目简介：** 公司新站点主打中东地区市场，应用支持中东阿拉伯语切换，目前用户量 1w+。\n\n**职责：Android 端独立负责人** \n\n**主要工作内容：**\n\n- 搭建项目基础架构，攻破项目难点；\n- 与产品运营工作人员对接需求，制定技术方案；\n- 版本快速迭代维护更新，完成产品需求；\n- 实现 App 国际化，多语言切换，适配兼容中东阿拉伯语；\n- 订单成交转化数据、归因、用户行为等统计数据埋点；\n- 国外支付方式 Paypal 支付、钱海信用卡等支付方式对接；\n- 接入第三方 Facebook、Firebase、AppFyler 等平台。\n\n#### **[Banggood](https://play.google.com/store/apps/details?id=com.banggood.client)**\n\n**项目简介：** 公司主项目拥有千万级别用户量的 App。\n\n**职责：Android 端主力开发** \n\n**主要工作内容：**\n\n- 重构旧版项目，搭建新架构，适应复杂业务处理；\n- 制定编码规范，推进团队协作使用 Git 工具；\n- 深入与设计师交流，参与 App 界面设计交互，推进 App 使用 Material Design 设计风格，提升应用在 Play Store 排名；\n- 配合运营部门推广工作， App 广告深度链接接管以及广告归因；\n- 对接 Google Analytics、Facebook 数据统计事件埋点。\n\n### [广州橙希网络科技有限公司](https://www.lagou.com/gongsi/122635.html)\n\n**Android 开发工程师**\n\n**2015.07 - 2016.11**\n\n**公司简介：** 一家专注于移动互联网领域的 App 软件开发公司\n\n#### **[天使孕育](https://www.wandoujia.com/apps/com.gdswf.mother)**\n\n**职责:** 医生端 Android 开发负责人，UI 界面搭建，api 接口请求数据绑定，多渠道上线打包混淆。\n\n**项目简介:** 天使孕育是公司外包广东省卫生发展总公司项目，主要功能使用友盟即时通讯实现孕妈与医生交 流，圈子类似微信朋友圈，孕妈预约挂号，使用高德定位找医生，与 Web 交互完成完成孕妈所有产前登记表 以及自我评测功能。\n\n#### **[拾翠](https://www.wandoujia.com/apps/com.chengxinet.shicui)**\n\n**职责:** 负责搭建成为商家模块界面，以及界面数据与后台对接工作。\n\n**项目简介:** 拾翠是中国首个手艺定制互联网平台，App 集成商家与用户一体，具有购物 App 的基本功能，用户 浏览商品详情，咨询商家，购买商品，支持微信支付宝支付等;商家模块主要功能发布商品，订单管理，交易 金额与订单量统计分析等等。\n\n\n## 开源项目\n\n### [Elephant](https://github.com/Freelander/Elephant)\n\n**Star 数: 958+**\n\nElephant 是 Laravel China (PHPHub) 社区第三方 Android 客户端，App UI 风格遵循了 Google Material Design 设计风格，项目使用到技术有 RxJava + Retrofit MVP，扫码登录，使用友盟统计分析等等。\n\n## 专业技能\n\n\n- 熟悉面向对象，了解封装、继承和接口设计，了解 MVP 与 MVVM 架构;\n- 熟悉自定义 View 绘制，以及手势、事件分发;\n- 熟悉 Material Design 设计，了解其规范，尺寸与层次;\n- 熟悉代码混淆，反编译 Apk，Apk 瘦身优化;\n- 熟悉使用第三方开源组件，Logger，Butterknife，Fresco，OkHttp， Gson 等等;\n- 熟悉 Android 国际化开发，多语言切换，中东阿拉伯语适配；\n- 熟悉国外  Google Analytics、Facebook 平台数据统计；\n- 熟悉 App 深度链接接管，以及广告归因统计；\n- 懂得性能优化，UI 过度绘制优化，布局优化；\n- 懂得如何选择优秀第三方开源库，认识大量的，各种各样的开源库;\n- 懂得将代码发布到 JitPack；\n- 具有编写规范，且易于维护代码的能力;\n- 能够快速掌握并集成一份第三方 SDK。\n\n\n## 技能专长\n\n以下都是我平时用过或熟悉的编程语言、框架、软件及工具，带 ^†^ 符号的是我比较喜欢和常用的。\n\n### 编程语言\n\n- [Java](https://www.java.com)^†^\n- [Kotlin](http://kotlinlang.org)^†^\n- [Python](https://www.python.org)\n\n\n### 框架\n\n- [RxAndroid](https://github.com/ReactiveX/RxAndroid)^†^\n- [EventBus](https://github.com/greenrobot/EventBus)^†^\n- [Retrofit](https://github.com/square/retrofit)^†^\n- [Gson](https://github.com/google/gson)^†^\n- [Glide](https://github.com/bumptech/glide)^†^\n- [Fresco](https://github.com/facebook/fresco)^†^\n- [OkHttp](https://github.com/square/okhttp)^†^\n\n\n### 工具软件\n\n- [Mac OS X](http://apple.com/macosx)^†^\n- [Android Studio](https://developer.android.com/studio/index.html?hl=zh-cn)^†^\n- [Charles](https://www.charlesproxy.com/)^†^\n- [Alfred 3](https://www.alfredapp.com)^†^\n- [Surge](https://nssurge.com/)^†^\n- [Git](https://git-scm.com)^†^\n- [iTerm](https://www.iterm2.com)^†^\n- [Postman](https://www.getpostman.com)^†^\n- [Sketch](https://www.sketch.com/)\n- [Adobe Photoshop](http://www.adobe.com/cn/products/cs6/photoshop.html)\n- [PyCharm](https://www.jetbrains.com/pycharm)\n- [XMind](https://www.xmind.cn)\n\n## 其他\n\n\n### 文档编写能力\n\n学习 Android 之初整理汇总了一份 Android 学习资料 [Android_Data](https://github.com/Freelander/Android_Data) 与 [Android 开源库排名](https://github.com/Freelander/Android_Data/blob/master/Android-Librarys-Top-100.md)，开放后受到圈内广大开发者好评。\n\n- Star 数: 7963+ \n- Fork: 2044+\n\n### UI 设计能力\n\n熟悉 PhotoShop 工具操作，对设计美感有高品质追求，独立设计 [Elephant](https://github.com/Freelander/Elephant) UI。\n\n### 英文能力\n\n目前负责开发的 App 语言均是英语，GitHub 上开源项目均使用英文文档。\n\n### 学习能力\n\n大部分 Android 相关的知识以及技术都是通过自学而来。\n\n\n## 致谢\n\n感谢您花时间阅读我的简历，期待能有机会和您共事。\n\n","updated":"2019-07-07T16:36:47.668Z","path":"about/index.html","layout":"page","_id":"cks0kfieg0046w3yz93a0h9rk","content":"<p>这里是一位靠谱的 Android 开发工程师个人简历，目前只考虑 <strong>广州</strong> 或 <strong>深圳</strong> 这两个地方。</p>\n<p>如果您有靠谱的 Android 开发工作欢迎推荐，请邮件我索要完整的简历，发邮件时请使用公司邮箱并说明公司信息，谢谢。</p>\n<p>以下是我的邮箱：<br><a href=\"mailto:huanggaojun13@gmail.com\" target=\"_blank\" rel=\"noopener\">huanggaojun13@gmail.com</a> </p>\n<h2 id=\"个人信息\"><a href=\"#个人信息\" class=\"headerlink\" title=\"个人信息\"></a>个人信息</h2><ul>\n<li>3 年 Android 开发经验</li>\n<li>期望城市：广州/深圳</li>\n<li>个人博客: <a href=\"https://gojun.me/\" target=\"_blank\" rel=\"noopener\">https://gojun.me/</a></li>\n<li>GitHub: <a href=\"https://github.com/Freelander\" target=\"_blank\" rel=\"noopener\">https://github.com/Freelander</a> (746+ 个粉丝)</li>\n</ul>\n<h2 id=\"工作经历\"><a href=\"#工作经历\" class=\"headerlink\" title=\"工作经历\"></a>工作经历</h2><h3 id=\"广州棒谷科技股份有限公司\"><a href=\"#广州棒谷科技股份有限公司\" class=\"headerlink\" title=\"广州棒谷科技股份有限公司\"></a><a href=\"https://www.banggood.cn/\" target=\"_blank\" rel=\"noopener\">广州棒谷科技股份有限公司</a></h3><p><strong>Android 中级开发工程师</strong></p>\n<p><strong>2016.12 - 至今</strong></p>\n<p><strong>公司简介：</strong> 一家专注于跨境贸易 B2C 电子商务公司，拥有一支五千多人的年轻精英团队。</p>\n<h4 id=\"KOYYE\"><a href=\"#KOYYE\" class=\"headerlink\" title=\"KOYYE\"></a><strong><a href=\"https://play.google.com/store/apps/details?id=com.chicdeals\" target=\"_blank\" rel=\"noopener\">KOYYE</a></strong></h4><p><strong>项目简介：</strong> 公司新站点主打中东地区市场，应用支持中东阿拉伯语切换，目前用户量 1w+。</p>\n<p><strong>职责：Android 端独立负责人</strong> </p>\n<p><strong>主要工作内容：</strong></p>\n<ul>\n<li>搭建项目基础架构，攻破项目难点；</li>\n<li>与产品运营工作人员对接需求，制定技术方案；</li>\n<li>版本快速迭代维护更新，完成产品需求；</li>\n<li>实现 App 国际化，多语言切换，适配兼容中东阿拉伯语；</li>\n<li>订单成交转化数据、归因、用户行为等统计数据埋点；</li>\n<li>国外支付方式 Paypal 支付、钱海信用卡等支付方式对接；</li>\n<li>接入第三方 Facebook、Firebase、AppFyler 等平台。</li>\n</ul>\n<h4 id=\"Banggood\"><a href=\"#Banggood\" class=\"headerlink\" title=\"Banggood\"></a><strong><a href=\"https://play.google.com/store/apps/details?id=com.banggood.client\" target=\"_blank\" rel=\"noopener\">Banggood</a></strong></h4><p><strong>项目简介：</strong> 公司主项目拥有千万级别用户量的 App。</p>\n<p><strong>职责：Android 端主力开发</strong> </p>\n<p><strong>主要工作内容：</strong></p>\n<ul>\n<li>重构旧版项目，搭建新架构，适应复杂业务处理；</li>\n<li>制定编码规范，推进团队协作使用 Git 工具；</li>\n<li>深入与设计师交流，参与 App 界面设计交互，推进 App 使用 Material Design 设计风格，提升应用在 Play Store 排名；</li>\n<li>配合运营部门推广工作， App 广告深度链接接管以及广告归因；</li>\n<li>对接 Google Analytics、Facebook 数据统计事件埋点。</li>\n</ul>\n<h3 id=\"广州橙希网络科技有限公司\"><a href=\"#广州橙希网络科技有限公司\" class=\"headerlink\" title=\"广州橙希网络科技有限公司\"></a><a href=\"https://www.lagou.com/gongsi/122635.html\" target=\"_blank\" rel=\"noopener\">广州橙希网络科技有限公司</a></h3><p><strong>Android 开发工程师</strong></p>\n<p><strong>2015.07 - 2016.11</strong></p>\n<p><strong>公司简介：</strong> 一家专注于移动互联网领域的 App 软件开发公司</p>\n<h4 id=\"天使孕育\"><a href=\"#天使孕育\" class=\"headerlink\" title=\"天使孕育\"></a><strong><a href=\"https://www.wandoujia.com/apps/com.gdswf.mother\" target=\"_blank\" rel=\"noopener\">天使孕育</a></strong></h4><p><strong>职责:</strong> 医生端 Android 开发负责人，UI 界面搭建，api 接口请求数据绑定，多渠道上线打包混淆。</p>\n<p><strong>项目简介:</strong> 天使孕育是公司外包广东省卫生发展总公司项目，主要功能使用友盟即时通讯实现孕妈与医生交 流，圈子类似微信朋友圈，孕妈预约挂号，使用高德定位找医生，与 Web 交互完成完成孕妈所有产前登记表 以及自我评测功能。</p>\n<h4 id=\"拾翠\"><a href=\"#拾翠\" class=\"headerlink\" title=\"拾翠\"></a><strong><a href=\"https://www.wandoujia.com/apps/com.chengxinet.shicui\" target=\"_blank\" rel=\"noopener\">拾翠</a></strong></h4><p><strong>职责:</strong> 负责搭建成为商家模块界面，以及界面数据与后台对接工作。</p>\n<p><strong>项目简介:</strong> 拾翠是中国首个手艺定制互联网平台，App 集成商家与用户一体，具有购物 App 的基本功能，用户 浏览商品详情，咨询商家，购买商品，支持微信支付宝支付等;商家模块主要功能发布商品，订单管理，交易 金额与订单量统计分析等等。</p>\n<h2 id=\"开源项目\"><a href=\"#开源项目\" class=\"headerlink\" title=\"开源项目\"></a>开源项目</h2><h3 id=\"Elephant\"><a href=\"#Elephant\" class=\"headerlink\" title=\"Elephant\"></a><a href=\"https://github.com/Freelander/Elephant\" target=\"_blank\" rel=\"noopener\">Elephant</a></h3><p><strong>Star 数: 958+</strong></p>\n<p>Elephant 是 Laravel China (PHPHub) 社区第三方 Android 客户端，App UI 风格遵循了 Google Material Design 设计风格，项目使用到技术有 RxJava + Retrofit MVP，扫码登录，使用友盟统计分析等等。</p>\n<h2 id=\"专业技能\"><a href=\"#专业技能\" class=\"headerlink\" title=\"专业技能\"></a>专业技能</h2><ul>\n<li>熟悉面向对象，了解封装、继承和接口设计，了解 MVP 与 MVVM 架构;</li>\n<li>熟悉自定义 View 绘制，以及手势、事件分发;</li>\n<li>熟悉 Material Design 设计，了解其规范，尺寸与层次;</li>\n<li>熟悉代码混淆，反编译 Apk，Apk 瘦身优化;</li>\n<li>熟悉使用第三方开源组件，Logger，Butterknife，Fresco，OkHttp， Gson 等等;</li>\n<li>熟悉 Android 国际化开发，多语言切换，中东阿拉伯语适配；</li>\n<li>熟悉国外  Google Analytics、Facebook 平台数据统计；</li>\n<li>熟悉 App 深度链接接管，以及广告归因统计；</li>\n<li>懂得性能优化，UI 过度绘制优化，布局优化；</li>\n<li>懂得如何选择优秀第三方开源库，认识大量的，各种各样的开源库;</li>\n<li>懂得将代码发布到 JitPack；</li>\n<li>具有编写规范，且易于维护代码的能力;</li>\n<li>能够快速掌握并集成一份第三方 SDK。</li>\n</ul>\n<h2 id=\"技能专长\"><a href=\"#技能专长\" class=\"headerlink\" title=\"技能专长\"></a>技能专长</h2><p>以下都是我平时用过或熟悉的编程语言、框架、软件及工具，带 ^†^ 符号的是我比较喜欢和常用的。</p>\n<h3 id=\"编程语言\"><a href=\"#编程语言\" class=\"headerlink\" title=\"编程语言\"></a>编程语言</h3><ul>\n<li><a href=\"https://www.java.com\" target=\"_blank\" rel=\"noopener\">Java</a>^†^</li>\n<li><a href=\"http://kotlinlang.org\" target=\"_blank\" rel=\"noopener\">Kotlin</a>^†^</li>\n<li><a href=\"https://www.python.org\" target=\"_blank\" rel=\"noopener\">Python</a></li>\n</ul>\n<h3 id=\"框架\"><a href=\"#框架\" class=\"headerlink\" title=\"框架\"></a>框架</h3><ul>\n<li><a href=\"https://github.com/ReactiveX/RxAndroid\" target=\"_blank\" rel=\"noopener\">RxAndroid</a>^†^</li>\n<li><a href=\"https://github.com/greenrobot/EventBus\" target=\"_blank\" rel=\"noopener\">EventBus</a>^†^</li>\n<li><a href=\"https://github.com/square/retrofit\" target=\"_blank\" rel=\"noopener\">Retrofit</a>^†^</li>\n<li><a href=\"https://github.com/google/gson\" target=\"_blank\" rel=\"noopener\">Gson</a>^†^</li>\n<li><a href=\"https://github.com/bumptech/glide\" target=\"_blank\" rel=\"noopener\">Glide</a>^†^</li>\n<li><a href=\"https://github.com/facebook/fresco\" target=\"_blank\" rel=\"noopener\">Fresco</a>^†^</li>\n<li><a href=\"https://github.com/square/okhttp\" target=\"_blank\" rel=\"noopener\">OkHttp</a>^†^</li>\n</ul>\n<h3 id=\"工具软件\"><a href=\"#工具软件\" class=\"headerlink\" title=\"工具软件\"></a>工具软件</h3><ul>\n<li><a href=\"http://apple.com/macosx\" target=\"_blank\" rel=\"noopener\">Mac OS X</a>^†^</li>\n<li><a href=\"https://developer.android.com/studio/index.html?hl=zh-cn\" target=\"_blank\" rel=\"noopener\">Android Studio</a>^†^</li>\n<li><a href=\"https://www.charlesproxy.com/\" target=\"_blank\" rel=\"noopener\">Charles</a>^†^</li>\n<li><a href=\"https://www.alfredapp.com\" target=\"_blank\" rel=\"noopener\">Alfred 3</a>^†^</li>\n<li><a href=\"https://nssurge.com/\" target=\"_blank\" rel=\"noopener\">Surge</a>^†^</li>\n<li><a href=\"https://git-scm.com\" target=\"_blank\" rel=\"noopener\">Git</a>^†^</li>\n<li><a href=\"https://www.iterm2.com\" target=\"_blank\" rel=\"noopener\">iTerm</a>^†^</li>\n<li><a href=\"https://www.getpostman.com\" target=\"_blank\" rel=\"noopener\">Postman</a>^†^</li>\n<li><a href=\"https://www.sketch.com/\" target=\"_blank\" rel=\"noopener\">Sketch</a></li>\n<li><a href=\"http://www.adobe.com/cn/products/cs6/photoshop.html\" target=\"_blank\" rel=\"noopener\">Adobe Photoshop</a></li>\n<li><a href=\"https://www.jetbrains.com/pycharm\" target=\"_blank\" rel=\"noopener\">PyCharm</a></li>\n<li><a href=\"https://www.xmind.cn\" target=\"_blank\" rel=\"noopener\">XMind</a></li>\n</ul>\n<h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><h3 id=\"文档编写能力\"><a href=\"#文档编写能力\" class=\"headerlink\" title=\"文档编写能力\"></a>文档编写能力</h3><p>学习 Android 之初整理汇总了一份 Android 学习资料 <a href=\"https://github.com/Freelander/Android_Data\" target=\"_blank\" rel=\"noopener\">Android_Data</a> 与 <a href=\"https://github.com/Freelander/Android_Data/blob/master/Android-Librarys-Top-100.md\" target=\"_blank\" rel=\"noopener\">Android 开源库排名</a>，开放后受到圈内广大开发者好评。</p>\n<ul>\n<li>Star 数: 7963+ </li>\n<li>Fork: 2044+</li>\n</ul>\n<h3 id=\"UI-设计能力\"><a href=\"#UI-设计能力\" class=\"headerlink\" title=\"UI 设计能力\"></a>UI 设计能力</h3><p>熟悉 PhotoShop 工具操作，对设计美感有高品质追求，独立设计 <a href=\"https://github.com/Freelander/Elephant\" target=\"_blank\" rel=\"noopener\">Elephant</a> UI。</p>\n<h3 id=\"英文能力\"><a href=\"#英文能力\" class=\"headerlink\" title=\"英文能力\"></a>英文能力</h3><p>目前负责开发的 App 语言均是英语，GitHub 上开源项目均使用英文文档。</p>\n<h3 id=\"学习能力\"><a href=\"#学习能力\" class=\"headerlink\" title=\"学习能力\"></a>学习能力</h3><p>大部分 Android 相关的知识以及技术都是通过自学而来。</p>\n<h2 id=\"致谢\"><a href=\"#致谢\" class=\"headerlink\" title=\"致谢\"></a>致谢</h2><p>感谢您花时间阅读我的简历，期待能有机会和您共事。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>这里是一位靠谱的 Android 开发工程师个人简历，目前只考虑 <strong>广州</strong> 或 <strong>深圳</strong> 这两个地方。</p>\n<p>如果您有靠谱的 Android 开发工作欢迎推荐，请邮件我索要完整的简历，发邮件时请使用公司邮箱并说明公司信息，谢谢。</p>\n<p>以下是我的邮箱：<br><a href=\"mailto:huanggaojun13@gmail.com\" target=\"_blank\" rel=\"noopener\">huanggaojun13@gmail.com</a> </p>\n<h2 id=\"个人信息\"><a href=\"#个人信息\" class=\"headerlink\" title=\"个人信息\"></a>个人信息</h2><ul>\n<li>3 年 Android 开发经验</li>\n<li>期望城市：广州/深圳</li>\n<li>个人博客: <a href=\"https://gojun.me/\" target=\"_blank\" rel=\"noopener\">https://gojun.me/</a></li>\n<li>GitHub: <a href=\"https://github.com/Freelander\" target=\"_blank\" rel=\"noopener\">https://github.com/Freelander</a> (746+ 个粉丝)</li>\n</ul>\n<h2 id=\"工作经历\"><a href=\"#工作经历\" class=\"headerlink\" title=\"工作经历\"></a>工作经历</h2><h3 id=\"广州棒谷科技股份有限公司\"><a href=\"#广州棒谷科技股份有限公司\" class=\"headerlink\" title=\"广州棒谷科技股份有限公司\"></a><a href=\"https://www.banggood.cn/\" target=\"_blank\" rel=\"noopener\">广州棒谷科技股份有限公司</a></h3><p><strong>Android 中级开发工程师</strong></p>\n<p><strong>2016.12 - 至今</strong></p>\n<p><strong>公司简介：</strong> 一家专注于跨境贸易 B2C 电子商务公司，拥有一支五千多人的年轻精英团队。</p>\n<h4 id=\"KOYYE\"><a href=\"#KOYYE\" class=\"headerlink\" title=\"KOYYE\"></a><strong><a href=\"https://play.google.com/store/apps/details?id=com.chicdeals\" target=\"_blank\" rel=\"noopener\">KOYYE</a></strong></h4><p><strong>项目简介：</strong> 公司新站点主打中东地区市场，应用支持中东阿拉伯语切换，目前用户量 1w+。</p>\n<p><strong>职责：Android 端独立负责人</strong> </p>\n<p><strong>主要工作内容：</strong></p>\n<ul>\n<li>搭建项目基础架构，攻破项目难点；</li>\n<li>与产品运营工作人员对接需求，制定技术方案；</li>\n<li>版本快速迭代维护更新，完成产品需求；</li>\n<li>实现 App 国际化，多语言切换，适配兼容中东阿拉伯语；</li>\n<li>订单成交转化数据、归因、用户行为等统计数据埋点；</li>\n<li>国外支付方式 Paypal 支付、钱海信用卡等支付方式对接；</li>\n<li>接入第三方 Facebook、Firebase、AppFyler 等平台。</li>\n</ul>\n<h4 id=\"Banggood\"><a href=\"#Banggood\" class=\"headerlink\" title=\"Banggood\"></a><strong><a href=\"https://play.google.com/store/apps/details?id=com.banggood.client\" target=\"_blank\" rel=\"noopener\">Banggood</a></strong></h4><p><strong>项目简介：</strong> 公司主项目拥有千万级别用户量的 App。</p>\n<p><strong>职责：Android 端主力开发</strong> </p>\n<p><strong>主要工作内容：</strong></p>\n<ul>\n<li>重构旧版项目，搭建新架构，适应复杂业务处理；</li>\n<li>制定编码规范，推进团队协作使用 Git 工具；</li>\n<li>深入与设计师交流，参与 App 界面设计交互，推进 App 使用 Material Design 设计风格，提升应用在 Play Store 排名；</li>\n<li>配合运营部门推广工作， App 广告深度链接接管以及广告归因；</li>\n<li>对接 Google Analytics、Facebook 数据统计事件埋点。</li>\n</ul>\n<h3 id=\"广州橙希网络科技有限公司\"><a href=\"#广州橙希网络科技有限公司\" class=\"headerlink\" title=\"广州橙希网络科技有限公司\"></a><a href=\"https://www.lagou.com/gongsi/122635.html\" target=\"_blank\" rel=\"noopener\">广州橙希网络科技有限公司</a></h3><p><strong>Android 开发工程师</strong></p>\n<p><strong>2015.07 - 2016.11</strong></p>\n<p><strong>公司简介：</strong> 一家专注于移动互联网领域的 App 软件开发公司</p>\n<h4 id=\"天使孕育\"><a href=\"#天使孕育\" class=\"headerlink\" title=\"天使孕育\"></a><strong><a href=\"https://www.wandoujia.com/apps/com.gdswf.mother\" target=\"_blank\" rel=\"noopener\">天使孕育</a></strong></h4><p><strong>职责:</strong> 医生端 Android 开发负责人，UI 界面搭建，api 接口请求数据绑定，多渠道上线打包混淆。</p>\n<p><strong>项目简介:</strong> 天使孕育是公司外包广东省卫生发展总公司项目，主要功能使用友盟即时通讯实现孕妈与医生交 流，圈子类似微信朋友圈，孕妈预约挂号，使用高德定位找医生，与 Web 交互完成完成孕妈所有产前登记表 以及自我评测功能。</p>\n<h4 id=\"拾翠\"><a href=\"#拾翠\" class=\"headerlink\" title=\"拾翠\"></a><strong><a href=\"https://www.wandoujia.com/apps/com.chengxinet.shicui\" target=\"_blank\" rel=\"noopener\">拾翠</a></strong></h4><p><strong>职责:</strong> 负责搭建成为商家模块界面，以及界面数据与后台对接工作。</p>\n<p><strong>项目简介:</strong> 拾翠是中国首个手艺定制互联网平台，App 集成商家与用户一体，具有购物 App 的基本功能，用户 浏览商品详情，咨询商家，购买商品，支持微信支付宝支付等;商家模块主要功能发布商品，订单管理，交易 金额与订单量统计分析等等。</p>\n<h2 id=\"开源项目\"><a href=\"#开源项目\" class=\"headerlink\" title=\"开源项目\"></a>开源项目</h2><h3 id=\"Elephant\"><a href=\"#Elephant\" class=\"headerlink\" title=\"Elephant\"></a><a href=\"https://github.com/Freelander/Elephant\" target=\"_blank\" rel=\"noopener\">Elephant</a></h3><p><strong>Star 数: 958+</strong></p>\n<p>Elephant 是 Laravel China (PHPHub) 社区第三方 Android 客户端，App UI 风格遵循了 Google Material Design 设计风格，项目使用到技术有 RxJava + Retrofit MVP，扫码登录，使用友盟统计分析等等。</p>\n<h2 id=\"专业技能\"><a href=\"#专业技能\" class=\"headerlink\" title=\"专业技能\"></a>专业技能</h2><ul>\n<li>熟悉面向对象，了解封装、继承和接口设计，了解 MVP 与 MVVM 架构;</li>\n<li>熟悉自定义 View 绘制，以及手势、事件分发;</li>\n<li>熟悉 Material Design 设计，了解其规范，尺寸与层次;</li>\n<li>熟悉代码混淆，反编译 Apk，Apk 瘦身优化;</li>\n<li>熟悉使用第三方开源组件，Logger，Butterknife，Fresco，OkHttp， Gson 等等;</li>\n<li>熟悉 Android 国际化开发，多语言切换，中东阿拉伯语适配；</li>\n<li>熟悉国外  Google Analytics、Facebook 平台数据统计；</li>\n<li>熟悉 App 深度链接接管，以及广告归因统计；</li>\n<li>懂得性能优化，UI 过度绘制优化，布局优化；</li>\n<li>懂得如何选择优秀第三方开源库，认识大量的，各种各样的开源库;</li>\n<li>懂得将代码发布到 JitPack；</li>\n<li>具有编写规范，且易于维护代码的能力;</li>\n<li>能够快速掌握并集成一份第三方 SDK。</li>\n</ul>\n<h2 id=\"技能专长\"><a href=\"#技能专长\" class=\"headerlink\" title=\"技能专长\"></a>技能专长</h2><p>以下都是我平时用过或熟悉的编程语言、框架、软件及工具，带 ^†^ 符号的是我比较喜欢和常用的。</p>\n<h3 id=\"编程语言\"><a href=\"#编程语言\" class=\"headerlink\" title=\"编程语言\"></a>编程语言</h3><ul>\n<li><a href=\"https://www.java.com\" target=\"_blank\" rel=\"noopener\">Java</a>^†^</li>\n<li><a href=\"http://kotlinlang.org\" target=\"_blank\" rel=\"noopener\">Kotlin</a>^†^</li>\n<li><a href=\"https://www.python.org\" target=\"_blank\" rel=\"noopener\">Python</a></li>\n</ul>\n<h3 id=\"框架\"><a href=\"#框架\" class=\"headerlink\" title=\"框架\"></a>框架</h3><ul>\n<li><a href=\"https://github.com/ReactiveX/RxAndroid\" target=\"_blank\" rel=\"noopener\">RxAndroid</a>^†^</li>\n<li><a href=\"https://github.com/greenrobot/EventBus\" target=\"_blank\" rel=\"noopener\">EventBus</a>^†^</li>\n<li><a href=\"https://github.com/square/retrofit\" target=\"_blank\" rel=\"noopener\">Retrofit</a>^†^</li>\n<li><a href=\"https://github.com/google/gson\" target=\"_blank\" rel=\"noopener\">Gson</a>^†^</li>\n<li><a href=\"https://github.com/bumptech/glide\" target=\"_blank\" rel=\"noopener\">Glide</a>^†^</li>\n<li><a href=\"https://github.com/facebook/fresco\" target=\"_blank\" rel=\"noopener\">Fresco</a>^†^</li>\n<li><a href=\"https://github.com/square/okhttp\" target=\"_blank\" rel=\"noopener\">OkHttp</a>^†^</li>\n</ul>\n<h3 id=\"工具软件\"><a href=\"#工具软件\" class=\"headerlink\" title=\"工具软件\"></a>工具软件</h3><ul>\n<li><a href=\"http://apple.com/macosx\" target=\"_blank\" rel=\"noopener\">Mac OS X</a>^†^</li>\n<li><a href=\"https://developer.android.com/studio/index.html?hl=zh-cn\" target=\"_blank\" rel=\"noopener\">Android Studio</a>^†^</li>\n<li><a href=\"https://www.charlesproxy.com/\" target=\"_blank\" rel=\"noopener\">Charles</a>^†^</li>\n<li><a href=\"https://www.alfredapp.com\" target=\"_blank\" rel=\"noopener\">Alfred 3</a>^†^</li>\n<li><a href=\"https://nssurge.com/\" target=\"_blank\" rel=\"noopener\">Surge</a>^†^</li>\n<li><a href=\"https://git-scm.com\" target=\"_blank\" rel=\"noopener\">Git</a>^†^</li>\n<li><a href=\"https://www.iterm2.com\" target=\"_blank\" rel=\"noopener\">iTerm</a>^†^</li>\n<li><a href=\"https://www.getpostman.com\" target=\"_blank\" rel=\"noopener\">Postman</a>^†^</li>\n<li><a href=\"https://www.sketch.com/\" target=\"_blank\" rel=\"noopener\">Sketch</a></li>\n<li><a href=\"http://www.adobe.com/cn/products/cs6/photoshop.html\" target=\"_blank\" rel=\"noopener\">Adobe Photoshop</a></li>\n<li><a href=\"https://www.jetbrains.com/pycharm\" target=\"_blank\" rel=\"noopener\">PyCharm</a></li>\n<li><a href=\"https://www.xmind.cn\" target=\"_blank\" rel=\"noopener\">XMind</a></li>\n</ul>\n<h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><h3 id=\"文档编写能力\"><a href=\"#文档编写能力\" class=\"headerlink\" title=\"文档编写能力\"></a>文档编写能力</h3><p>学习 Android 之初整理汇总了一份 Android 学习资料 <a href=\"https://github.com/Freelander/Android_Data\" target=\"_blank\" rel=\"noopener\">Android_Data</a> 与 <a href=\"https://github.com/Freelander/Android_Data/blob/master/Android-Librarys-Top-100.md\" target=\"_blank\" rel=\"noopener\">Android 开源库排名</a>，开放后受到圈内广大开发者好评。</p>\n<ul>\n<li>Star 数: 7963+ </li>\n<li>Fork: 2044+</li>\n</ul>\n<h3 id=\"UI-设计能力\"><a href=\"#UI-设计能力\" class=\"headerlink\" title=\"UI 设计能力\"></a>UI 设计能力</h3><p>熟悉 PhotoShop 工具操作，对设计美感有高品质追求，独立设计 <a href=\"https://github.com/Freelander/Elephant\" target=\"_blank\" rel=\"noopener\">Elephant</a> UI。</p>\n<h3 id=\"英文能力\"><a href=\"#英文能力\" class=\"headerlink\" title=\"英文能力\"></a>英文能力</h3><p>目前负责开发的 App 语言均是英语，GitHub 上开源项目均使用英文文档。</p>\n<h3 id=\"学习能力\"><a href=\"#学习能力\" class=\"headerlink\" title=\"学习能力\"></a>学习能力</h3><p>大部分 Android 相关的知识以及技术都是通过自学而来。</p>\n<h2 id=\"致谢\"><a href=\"#致谢\" class=\"headerlink\" title=\"致谢\"></a>致谢</h2><p>感谢您花时间阅读我的简历，期待能有机会和您共事。</p>\n"}],"Post":[{"title":"如何利用 Android App Bundle 进行 APK 瘦身 28%","date":"2019-10-20T08:37:26.000Z","_content":"\n\n## 介绍  \n\nAndroid App Bundle 是 Google 在 2018 年 IO 大会上推出一种新发布格式，通过此格式发布的应用，Google Play 商店会根据用户设备屏幕密度，CPU 架构 下发其对应的 APK，这就意味着用户下载的 APK 不会存在与自己设备不匹配的格式资源，从而也达到了大幅度减少 APK 大小。另外利用此格式还可以实现 ``动态组件化`` 的技术，此文不做该技术的过多介绍，感兴趣的可以到 [官方文档](https://developer.android.google.cn/studio/projects/dynamic-delivery) 了解。\n\n## 条件\n\n如果使用 Android App Bundle 发布格式，必须加入 ``Google Play 应用签名计划``。关于如何加入，可以详细查看这份 [官方指南](https://developer.android.com/studio/publish/app-signing#enroll)。\n\n**注意：**\n\n一旦你的应用使用了 Google 应用签名，用户下载的 APK 签名将会是 Google 生成的签名，而不是你自己为应用的签名。因此需要检查你应用使用到的第三方平台 SDK，如果有需要配置签名信息的，记得将 Google 生成的签名信息配置到其对应的地方。\n\n## 原理\n\n生成的 Android App Bundle 包，是不可以直接安装的，App Bundle 会根据设备屏幕密度、CPU 架构、Language 多个维度进行拆分，组装成对各种组合的 Apk；然后 Play Store 会根据用户设备配置，提供对应的组合 APK。通过下图可以促进你理解：\n\n![image](/images/2019/10/01.png)\n\n例如，用户的设备配置如下：arm，xhdpi，en_US，则最终用户下载的 APK 将是（base + arm + xhdpi + en）.apk的组合。\n\n如果用户在设备设置中更改/添加了新语言，则 Play Store 会检测到此情况，并尝试为在设备下载新的其他语言分类 APK。如果互联网不可用，则稍后将下载。\n\n## 如何构建 Android App Bundle\n\n### Android Studio 3.2 版本及以上\n\n>Android Studio --> Build --> Generate Signed Bundle/APK\n\n![image](/images/2019/10/02.png)\n\n![image](/images/2019/10/03.png)\n\n### 通过命令行构建\n\n```\n./gradlew bundleRelease\n```\n\n## 如何测试生成出来的 Android App Bundle\n\n### 本地使用 [bundletool](https://github.com/google/bundletool) 命令行工具\n\nbundletool 是一种底层工具，可供 Gradle、Android Studio 和 Google Play 用于编译 Android App Bundle 或将 App Bundle 转换为部署到设备的各种 APK。您也可以将 bundletool 作为一种命令行工具，用于重新创建、检查和验证应用 APK 的 Google Play 服务器端版本。\n\n下载地址：[GitHub 代码库](https://github.com/google/bundletool/releases)\n\n#### 1. 将 App Bundle 生成一组 APK\n\n将你从 Android Studio 构建生成的 App Bundle 为应用支持的所有设备生成一组 APK，用一个以 ``.apks`` 为文件扩展名的容器装起来。\n\n>如果您未指定签名信息，bundletool 会尝试使用调试密钥为 APK 签名，这里我为了方便我将这些 APK 部署到设备，添加了应用的签名信息。\n\n```\njava -jar bundletool.jar build-apks \n--bundle=/MyApp/my_app.aab\n--output=/MyApp/my_app.apks\n--ks=/MyApp/keystore.jks\n--ks-pass=file:/MyApp/keystore.pwd\n--ks-key-alias=MyKeyAlias\n--key-pass=file:/MyApp/key.pwd\n```\n\n#### 2. 将 APK 安装到连接的设备\n\n生成一组 APK 后，bundletool 可以将该组中适当 APK 的组合安装到连接的设备。\n\n```\njava -jar bundletool.jar install-apks --apks=/MyApp/my_app.apks\n```\n\n>如果连接了多个设备，请添加 --device-id=serial-id 标记来指定目标设备。\n\n#### 测试\n\n通过上面两条命令，已经为你即将发布的应用安装到你的设备上，最后检查下 app 运行情况，没问题就可以将刚才生成的 aab 上传到商店后台进行版本发布。\n\n#### 更多\n\n想了解更多关于 bundletool 工具的使用方法，可以到 [这里](https://developer.android.com/studio/command-line/bundletool) 了解。\n\n### 直接将 App Bundle 上传到应用 Play 商店后台\n\n这个操作很简单，跟平常发布版本操作差不多，具体如下：\n\n> 版本管理 --> 应用版本 --> 创建版本 --> 添加 Android App Bundle --> 保存\n\n此时想检查刚上传的 App Bundle 生成的 APK 情况，以及下载生成的 APK 到本地进行测试，操作步骤如下：\n\n> 版本管理 --> 软件工件库 --> 软件工件库草稿找到刚才上传的版本 --> 探索 --> 下载设备专属 APK\n\n![image](/images/2019/10/06.png)\n\n![image](/images/2019/10/04.png)\n\n## 实验\n\n### 本地语言包\n\n如果本身 App 是支持多语言的，在应用内切换语言，Play Store 无法检测应用语言改变，因此需要禁止 App Bundle 根据语言拆分安装包。\n\n在 App 下的 build.gradle 文件添加以下配置：\n\n```\nandroid {\n    bundle {\n        language {\n            // Specifies that the app bundle should not support\n            // configuration APKs for language resources. These\n            // resources are instead packaged with each base and\n            // dynamic feature APK.\n            enableSplit = false\n        }\n    }\n}\n```\n\n### 图片资源\n\n目前大部分应用图片资源只适配一些高分辨率 xxxhdpi，xxhdpi。\n\n验证 App Bundle 拆分出来的低分辨率包，是否会不存在高分辨率的图片资源？\n\n> 将生成 \"apks\" 的文件更改为 \"zip\" 格式 --> 解压 --> standalones --> 选一个低分辨率的安装包 --> 更改为 \"zip\" 格式 --> 解压 --> 查看资源文件\n\n![image](/images/2019/10/07.png)\n\n结果：低分辨率包依然存在我们项目高分辨率的图片。\n\n## 最后\n\n最后来看下使用 App Bundle 生成的 APK，与上个版本相比的数据。\n\n![image](/images/2019/10/05.png)\n\n## 资料\n\n- [官方文档介绍](https://developer.android.com/guide/app-bundle/)\n- [缩减应用大小](https://developer.android.com/topic/performance/reduce-apk-size)\n- [如何测试构建出来的 aab 包](https://developer.android.com/studio/command-line/bundletool)\n- [Android App瘦身新姿势——Android App Bundle](https://blog.csdn.net/u012124438/article/details/83508944)\n\n## 推荐阅读\n\n- [终极 Apk 瘦身优化](https://gojun.me/2019/09/10/android-reduce-apk-size/)\n","source":"_posts/android-app-bundle.md","raw":"---\ntitle: 如何利用 Android App Bundle 进行 APK 瘦身 28%\ndate: 2019-10-20 16:37:26\ntags: [Android]\n---\n\n\n## 介绍  \n\nAndroid App Bundle 是 Google 在 2018 年 IO 大会上推出一种新发布格式，通过此格式发布的应用，Google Play 商店会根据用户设备屏幕密度，CPU 架构 下发其对应的 APK，这就意味着用户下载的 APK 不会存在与自己设备不匹配的格式资源，从而也达到了大幅度减少 APK 大小。另外利用此格式还可以实现 ``动态组件化`` 的技术，此文不做该技术的过多介绍，感兴趣的可以到 [官方文档](https://developer.android.google.cn/studio/projects/dynamic-delivery) 了解。\n\n## 条件\n\n如果使用 Android App Bundle 发布格式，必须加入 ``Google Play 应用签名计划``。关于如何加入，可以详细查看这份 [官方指南](https://developer.android.com/studio/publish/app-signing#enroll)。\n\n**注意：**\n\n一旦你的应用使用了 Google 应用签名，用户下载的 APK 签名将会是 Google 生成的签名，而不是你自己为应用的签名。因此需要检查你应用使用到的第三方平台 SDK，如果有需要配置签名信息的，记得将 Google 生成的签名信息配置到其对应的地方。\n\n## 原理\n\n生成的 Android App Bundle 包，是不可以直接安装的，App Bundle 会根据设备屏幕密度、CPU 架构、Language 多个维度进行拆分，组装成对各种组合的 Apk；然后 Play Store 会根据用户设备配置，提供对应的组合 APK。通过下图可以促进你理解：\n\n![image](/images/2019/10/01.png)\n\n例如，用户的设备配置如下：arm，xhdpi，en_US，则最终用户下载的 APK 将是（base + arm + xhdpi + en）.apk的组合。\n\n如果用户在设备设置中更改/添加了新语言，则 Play Store 会检测到此情况，并尝试为在设备下载新的其他语言分类 APK。如果互联网不可用，则稍后将下载。\n\n## 如何构建 Android App Bundle\n\n### Android Studio 3.2 版本及以上\n\n>Android Studio --> Build --> Generate Signed Bundle/APK\n\n![image](/images/2019/10/02.png)\n\n![image](/images/2019/10/03.png)\n\n### 通过命令行构建\n\n```\n./gradlew bundleRelease\n```\n\n## 如何测试生成出来的 Android App Bundle\n\n### 本地使用 [bundletool](https://github.com/google/bundletool) 命令行工具\n\nbundletool 是一种底层工具，可供 Gradle、Android Studio 和 Google Play 用于编译 Android App Bundle 或将 App Bundle 转换为部署到设备的各种 APK。您也可以将 bundletool 作为一种命令行工具，用于重新创建、检查和验证应用 APK 的 Google Play 服务器端版本。\n\n下载地址：[GitHub 代码库](https://github.com/google/bundletool/releases)\n\n#### 1. 将 App Bundle 生成一组 APK\n\n将你从 Android Studio 构建生成的 App Bundle 为应用支持的所有设备生成一组 APK，用一个以 ``.apks`` 为文件扩展名的容器装起来。\n\n>如果您未指定签名信息，bundletool 会尝试使用调试密钥为 APK 签名，这里我为了方便我将这些 APK 部署到设备，添加了应用的签名信息。\n\n```\njava -jar bundletool.jar build-apks \n--bundle=/MyApp/my_app.aab\n--output=/MyApp/my_app.apks\n--ks=/MyApp/keystore.jks\n--ks-pass=file:/MyApp/keystore.pwd\n--ks-key-alias=MyKeyAlias\n--key-pass=file:/MyApp/key.pwd\n```\n\n#### 2. 将 APK 安装到连接的设备\n\n生成一组 APK 后，bundletool 可以将该组中适当 APK 的组合安装到连接的设备。\n\n```\njava -jar bundletool.jar install-apks --apks=/MyApp/my_app.apks\n```\n\n>如果连接了多个设备，请添加 --device-id=serial-id 标记来指定目标设备。\n\n#### 测试\n\n通过上面两条命令，已经为你即将发布的应用安装到你的设备上，最后检查下 app 运行情况，没问题就可以将刚才生成的 aab 上传到商店后台进行版本发布。\n\n#### 更多\n\n想了解更多关于 bundletool 工具的使用方法，可以到 [这里](https://developer.android.com/studio/command-line/bundletool) 了解。\n\n### 直接将 App Bundle 上传到应用 Play 商店后台\n\n这个操作很简单，跟平常发布版本操作差不多，具体如下：\n\n> 版本管理 --> 应用版本 --> 创建版本 --> 添加 Android App Bundle --> 保存\n\n此时想检查刚上传的 App Bundle 生成的 APK 情况，以及下载生成的 APK 到本地进行测试，操作步骤如下：\n\n> 版本管理 --> 软件工件库 --> 软件工件库草稿找到刚才上传的版本 --> 探索 --> 下载设备专属 APK\n\n![image](/images/2019/10/06.png)\n\n![image](/images/2019/10/04.png)\n\n## 实验\n\n### 本地语言包\n\n如果本身 App 是支持多语言的，在应用内切换语言，Play Store 无法检测应用语言改变，因此需要禁止 App Bundle 根据语言拆分安装包。\n\n在 App 下的 build.gradle 文件添加以下配置：\n\n```\nandroid {\n    bundle {\n        language {\n            // Specifies that the app bundle should not support\n            // configuration APKs for language resources. These\n            // resources are instead packaged with each base and\n            // dynamic feature APK.\n            enableSplit = false\n        }\n    }\n}\n```\n\n### 图片资源\n\n目前大部分应用图片资源只适配一些高分辨率 xxxhdpi，xxhdpi。\n\n验证 App Bundle 拆分出来的低分辨率包，是否会不存在高分辨率的图片资源？\n\n> 将生成 \"apks\" 的文件更改为 \"zip\" 格式 --> 解压 --> standalones --> 选一个低分辨率的安装包 --> 更改为 \"zip\" 格式 --> 解压 --> 查看资源文件\n\n![image](/images/2019/10/07.png)\n\n结果：低分辨率包依然存在我们项目高分辨率的图片。\n\n## 最后\n\n最后来看下使用 App Bundle 生成的 APK，与上个版本相比的数据。\n\n![image](/images/2019/10/05.png)\n\n## 资料\n\n- [官方文档介绍](https://developer.android.com/guide/app-bundle/)\n- [缩减应用大小](https://developer.android.com/topic/performance/reduce-apk-size)\n- [如何测试构建出来的 aab 包](https://developer.android.com/studio/command-line/bundletool)\n- [Android App瘦身新姿势——Android App Bundle](https://blog.csdn.net/u012124438/article/details/83508944)\n\n## 推荐阅读\n\n- [终极 Apk 瘦身优化](https://gojun.me/2019/09/10/android-reduce-apk-size/)\n","slug":"android-app-bundle","published":1,"updated":"2019-10-23T14:20:24.008Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cks0kfibw0000w3yz339kgxx5","content":"<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p>Android App Bundle 是 Google 在 2018 年 IO 大会上推出一种新发布格式，通过此格式发布的应用，Google Play 商店会根据用户设备屏幕密度，CPU 架构 下发其对应的 APK，这就意味着用户下载的 APK 不会存在与自己设备不匹配的格式资源，从而也达到了大幅度减少 APK 大小。另外利用此格式还可以实现 <code>动态组件化</code> 的技术，此文不做该技术的过多介绍，感兴趣的可以到 <a href=\"https://developer.android.google.cn/studio/projects/dynamic-delivery\" target=\"_blank\" rel=\"noopener\">官方文档</a> 了解。</p>\n<h2 id=\"条件\"><a href=\"#条件\" class=\"headerlink\" title=\"条件\"></a>条件</h2><p>如果使用 Android App Bundle 发布格式，必须加入 <code>Google Play 应用签名计划</code>。关于如何加入，可以详细查看这份 <a href=\"https://developer.android.com/studio/publish/app-signing#enroll\" target=\"_blank\" rel=\"noopener\">官方指南</a>。</p>\n<p><strong>注意：</strong></p>\n<p>一旦你的应用使用了 Google 应用签名，用户下载的 APK 签名将会是 Google 生成的签名，而不是你自己为应用的签名。因此需要检查你应用使用到的第三方平台 SDK，如果有需要配置签名信息的，记得将 Google 生成的签名信息配置到其对应的地方。</p>\n<h2 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h2><p>生成的 Android App Bundle 包，是不可以直接安装的，App Bundle 会根据设备屏幕密度、CPU 架构、Language 多个维度进行拆分，组装成对各种组合的 Apk；然后 Play Store 会根据用户设备配置，提供对应的组合 APK。通过下图可以促进你理解：</p>\n<p><img src=\"/images/2019/10/01.png\" alt=\"image\"></p>\n<p>例如，用户的设备配置如下：arm，xhdpi，en_US，则最终用户下载的 APK 将是（base + arm + xhdpi + en）.apk的组合。</p>\n<p>如果用户在设备设置中更改/添加了新语言，则 Play Store 会检测到此情况，并尝试为在设备下载新的其他语言分类 APK。如果互联网不可用，则稍后将下载。</p>\n<h2 id=\"如何构建-Android-App-Bundle\"><a href=\"#如何构建-Android-App-Bundle\" class=\"headerlink\" title=\"如何构建 Android App Bundle\"></a>如何构建 Android App Bundle</h2><h3 id=\"Android-Studio-3-2-版本及以上\"><a href=\"#Android-Studio-3-2-版本及以上\" class=\"headerlink\" title=\"Android Studio 3.2 版本及以上\"></a>Android Studio 3.2 版本及以上</h3><blockquote>\n<p>Android Studio –&gt; Build –&gt; Generate Signed Bundle/APK</p>\n</blockquote>\n<p><img src=\"/images/2019/10/02.png\" alt=\"image\"></p>\n<p><img src=\"/images/2019/10/03.png\" alt=\"image\"></p>\n<h3 id=\"通过命令行构建\"><a href=\"#通过命令行构建\" class=\"headerlink\" title=\"通过命令行构建\"></a>通过命令行构建</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./gradlew bundleRelease</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"如何测试生成出来的-Android-App-Bundle\"><a href=\"#如何测试生成出来的-Android-App-Bundle\" class=\"headerlink\" title=\"如何测试生成出来的 Android App Bundle\"></a>如何测试生成出来的 Android App Bundle</h2><h3 id=\"本地使用-bundletool-命令行工具\"><a href=\"#本地使用-bundletool-命令行工具\" class=\"headerlink\" title=\"本地使用 bundletool 命令行工具\"></a>本地使用 <a href=\"https://github.com/google/bundletool\" target=\"_blank\" rel=\"noopener\">bundletool</a> 命令行工具</h3><p>bundletool 是一种底层工具，可供 Gradle、Android Studio 和 Google Play 用于编译 Android App Bundle 或将 App Bundle 转换为部署到设备的各种 APK。您也可以将 bundletool 作为一种命令行工具，用于重新创建、检查和验证应用 APK 的 Google Play 服务器端版本。</p>\n<p>下载地址：<a href=\"https://github.com/google/bundletool/releases\" target=\"_blank\" rel=\"noopener\">GitHub 代码库</a></p>\n<h4 id=\"1-将-App-Bundle-生成一组-APK\"><a href=\"#1-将-App-Bundle-生成一组-APK\" class=\"headerlink\" title=\"1. 将 App Bundle 生成一组 APK\"></a>1. 将 App Bundle 生成一组 APK</h4><p>将你从 Android Studio 构建生成的 App Bundle 为应用支持的所有设备生成一组 APK，用一个以 <code>.apks</code> 为文件扩展名的容器装起来。</p>\n<blockquote>\n<p>如果您未指定签名信息，bundletool 会尝试使用调试密钥为 APK 签名，这里我为了方便我将这些 APK 部署到设备，添加了应用的签名信息。</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -jar bundletool.jar build-apks </span><br><span class=\"line\">--bundle=/MyApp/my_app.aab</span><br><span class=\"line\">--output=/MyApp/my_app.apks</span><br><span class=\"line\">--ks=/MyApp/keystore.jks</span><br><span class=\"line\">--ks-pass=file:/MyApp/keystore.pwd</span><br><span class=\"line\">--ks-key-alias=MyKeyAlias</span><br><span class=\"line\">--key-pass=file:/MyApp/key.pwd</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-将-APK-安装到连接的设备\"><a href=\"#2-将-APK-安装到连接的设备\" class=\"headerlink\" title=\"2. 将 APK 安装到连接的设备\"></a>2. 将 APK 安装到连接的设备</h4><p>生成一组 APK 后，bundletool 可以将该组中适当 APK 的组合安装到连接的设备。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -jar bundletool.jar install-apks --apks=/MyApp/my_app.apks</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>如果连接了多个设备，请添加 –device-id=serial-id 标记来指定目标设备。</p>\n</blockquote>\n<h4 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h4><p>通过上面两条命令，已经为你即将发布的应用安装到你的设备上，最后检查下 app 运行情况，没问题就可以将刚才生成的 aab 上传到商店后台进行版本发布。</p>\n<h4 id=\"更多\"><a href=\"#更多\" class=\"headerlink\" title=\"更多\"></a>更多</h4><p>想了解更多关于 bundletool 工具的使用方法，可以到 <a href=\"https://developer.android.com/studio/command-line/bundletool\" target=\"_blank\" rel=\"noopener\">这里</a> 了解。</p>\n<h3 id=\"直接将-App-Bundle-上传到应用-Play-商店后台\"><a href=\"#直接将-App-Bundle-上传到应用-Play-商店后台\" class=\"headerlink\" title=\"直接将 App Bundle 上传到应用 Play 商店后台\"></a>直接将 App Bundle 上传到应用 Play 商店后台</h3><p>这个操作很简单，跟平常发布版本操作差不多，具体如下：</p>\n<blockquote>\n<p>版本管理 –&gt; 应用版本 –&gt; 创建版本 –&gt; 添加 Android App Bundle –&gt; 保存</p>\n</blockquote>\n<p>此时想检查刚上传的 App Bundle 生成的 APK 情况，以及下载生成的 APK 到本地进行测试，操作步骤如下：</p>\n<blockquote>\n<p>版本管理 –&gt; 软件工件库 –&gt; 软件工件库草稿找到刚才上传的版本 –&gt; 探索 –&gt; 下载设备专属 APK</p>\n</blockquote>\n<p><img src=\"/images/2019/10/06.png\" alt=\"image\"></p>\n<p><img src=\"/images/2019/10/04.png\" alt=\"image\"></p>\n<h2 id=\"实验\"><a href=\"#实验\" class=\"headerlink\" title=\"实验\"></a>实验</h2><h3 id=\"本地语言包\"><a href=\"#本地语言包\" class=\"headerlink\" title=\"本地语言包\"></a>本地语言包</h3><p>如果本身 App 是支持多语言的，在应用内切换语言，Play Store 无法检测应用语言改变，因此需要禁止 App Bundle 根据语言拆分安装包。</p>\n<p>在 App 下的 build.gradle 文件添加以下配置：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">android &#123;</span><br><span class=\"line\">    bundle &#123;</span><br><span class=\"line\">        language &#123;</span><br><span class=\"line\">            // Specifies that the app bundle should not support</span><br><span class=\"line\">            // configuration APKs for language resources. These</span><br><span class=\"line\">            // resources are instead packaged with each base and</span><br><span class=\"line\">            // dynamic feature APK.</span><br><span class=\"line\">            enableSplit = false</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"图片资源\"><a href=\"#图片资源\" class=\"headerlink\" title=\"图片资源\"></a>图片资源</h3><p>目前大部分应用图片资源只适配一些高分辨率 xxxhdpi，xxhdpi。</p>\n<p>验证 App Bundle 拆分出来的低分辨率包，是否会不存在高分辨率的图片资源？</p>\n<blockquote>\n<p>将生成 “apks” 的文件更改为 “zip” 格式 –&gt; 解压 –&gt; standalones –&gt; 选一个低分辨率的安装包 –&gt; 更改为 “zip” 格式 –&gt; 解压 –&gt; 查看资源文件</p>\n</blockquote>\n<p><img src=\"/images/2019/10/07.png\" alt=\"image\"></p>\n<p>结果：低分辨率包依然存在我们项目高分辨率的图片。</p>\n<h2 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h2><p>最后来看下使用 App Bundle 生成的 APK，与上个版本相比的数据。</p>\n<p><img src=\"/images/2019/10/05.png\" alt=\"image\"></p>\n<h2 id=\"资料\"><a href=\"#资料\" class=\"headerlink\" title=\"资料\"></a>资料</h2><ul>\n<li><a href=\"https://developer.android.com/guide/app-bundle/\" target=\"_blank\" rel=\"noopener\">官方文档介绍</a></li>\n<li><a href=\"https://developer.android.com/topic/performance/reduce-apk-size\" target=\"_blank\" rel=\"noopener\">缩减应用大小</a></li>\n<li><a href=\"https://developer.android.com/studio/command-line/bundletool\" target=\"_blank\" rel=\"noopener\">如何测试构建出来的 aab 包</a></li>\n<li><a href=\"https://blog.csdn.net/u012124438/article/details/83508944\" target=\"_blank\" rel=\"noopener\">Android App瘦身新姿势——Android App Bundle</a></li>\n</ul>\n<h2 id=\"推荐阅读\"><a href=\"#推荐阅读\" class=\"headerlink\" title=\"推荐阅读\"></a>推荐阅读</h2><ul>\n<li><a href=\"https://gojun.me/2019/09/10/android-reduce-apk-size/\" target=\"_blank\" rel=\"noopener\">终极 Apk 瘦身优化</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p>Android App Bundle 是 Google 在 2018 年 IO 大会上推出一种新发布格式，通过此格式发布的应用，Google Play 商店会根据用户设备屏幕密度，CPU 架构 下发其对应的 APK，这就意味着用户下载的 APK 不会存在与自己设备不匹配的格式资源，从而也达到了大幅度减少 APK 大小。另外利用此格式还可以实现 <code>动态组件化</code> 的技术，此文不做该技术的过多介绍，感兴趣的可以到 <a href=\"https://developer.android.google.cn/studio/projects/dynamic-delivery\" target=\"_blank\" rel=\"noopener\">官方文档</a> 了解。</p>\n<h2 id=\"条件\"><a href=\"#条件\" class=\"headerlink\" title=\"条件\"></a>条件</h2><p>如果使用 Android App Bundle 发布格式，必须加入 <code>Google Play 应用签名计划</code>。关于如何加入，可以详细查看这份 <a href=\"https://developer.android.com/studio/publish/app-signing#enroll\" target=\"_blank\" rel=\"noopener\">官方指南</a>。</p>\n<p><strong>注意：</strong></p>\n<p>一旦你的应用使用了 Google 应用签名，用户下载的 APK 签名将会是 Google 生成的签名，而不是你自己为应用的签名。因此需要检查你应用使用到的第三方平台 SDK，如果有需要配置签名信息的，记得将 Google 生成的签名信息配置到其对应的地方。</p>\n<h2 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h2><p>生成的 Android App Bundle 包，是不可以直接安装的，App Bundle 会根据设备屏幕密度、CPU 架构、Language 多个维度进行拆分，组装成对各种组合的 Apk；然后 Play Store 会根据用户设备配置，提供对应的组合 APK。通过下图可以促进你理解：</p>\n<p><img src=\"/images/2019/10/01.png\" alt=\"image\"></p>\n<p>例如，用户的设备配置如下：arm，xhdpi，en_US，则最终用户下载的 APK 将是（base + arm + xhdpi + en）.apk的组合。</p>\n<p>如果用户在设备设置中更改/添加了新语言，则 Play Store 会检测到此情况，并尝试为在设备下载新的其他语言分类 APK。如果互联网不可用，则稍后将下载。</p>\n<h2 id=\"如何构建-Android-App-Bundle\"><a href=\"#如何构建-Android-App-Bundle\" class=\"headerlink\" title=\"如何构建 Android App Bundle\"></a>如何构建 Android App Bundle</h2><h3 id=\"Android-Studio-3-2-版本及以上\"><a href=\"#Android-Studio-3-2-版本及以上\" class=\"headerlink\" title=\"Android Studio 3.2 版本及以上\"></a>Android Studio 3.2 版本及以上</h3><blockquote>\n<p>Android Studio –&gt; Build –&gt; Generate Signed Bundle/APK</p>\n</blockquote>\n<p><img src=\"/images/2019/10/02.png\" alt=\"image\"></p>\n<p><img src=\"/images/2019/10/03.png\" alt=\"image\"></p>\n<h3 id=\"通过命令行构建\"><a href=\"#通过命令行构建\" class=\"headerlink\" title=\"通过命令行构建\"></a>通过命令行构建</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./gradlew bundleRelease</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"如何测试生成出来的-Android-App-Bundle\"><a href=\"#如何测试生成出来的-Android-App-Bundle\" class=\"headerlink\" title=\"如何测试生成出来的 Android App Bundle\"></a>如何测试生成出来的 Android App Bundle</h2><h3 id=\"本地使用-bundletool-命令行工具\"><a href=\"#本地使用-bundletool-命令行工具\" class=\"headerlink\" title=\"本地使用 bundletool 命令行工具\"></a>本地使用 <a href=\"https://github.com/google/bundletool\" target=\"_blank\" rel=\"noopener\">bundletool</a> 命令行工具</h3><p>bundletool 是一种底层工具，可供 Gradle、Android Studio 和 Google Play 用于编译 Android App Bundle 或将 App Bundle 转换为部署到设备的各种 APK。您也可以将 bundletool 作为一种命令行工具，用于重新创建、检查和验证应用 APK 的 Google Play 服务器端版本。</p>\n<p>下载地址：<a href=\"https://github.com/google/bundletool/releases\" target=\"_blank\" rel=\"noopener\">GitHub 代码库</a></p>\n<h4 id=\"1-将-App-Bundle-生成一组-APK\"><a href=\"#1-将-App-Bundle-生成一组-APK\" class=\"headerlink\" title=\"1. 将 App Bundle 生成一组 APK\"></a>1. 将 App Bundle 生成一组 APK</h4><p>将你从 Android Studio 构建生成的 App Bundle 为应用支持的所有设备生成一组 APK，用一个以 <code>.apks</code> 为文件扩展名的容器装起来。</p>\n<blockquote>\n<p>如果您未指定签名信息，bundletool 会尝试使用调试密钥为 APK 签名，这里我为了方便我将这些 APK 部署到设备，添加了应用的签名信息。</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -jar bundletool.jar build-apks </span><br><span class=\"line\">--bundle=/MyApp/my_app.aab</span><br><span class=\"line\">--output=/MyApp/my_app.apks</span><br><span class=\"line\">--ks=/MyApp/keystore.jks</span><br><span class=\"line\">--ks-pass=file:/MyApp/keystore.pwd</span><br><span class=\"line\">--ks-key-alias=MyKeyAlias</span><br><span class=\"line\">--key-pass=file:/MyApp/key.pwd</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-将-APK-安装到连接的设备\"><a href=\"#2-将-APK-安装到连接的设备\" class=\"headerlink\" title=\"2. 将 APK 安装到连接的设备\"></a>2. 将 APK 安装到连接的设备</h4><p>生成一组 APK 后，bundletool 可以将该组中适当 APK 的组合安装到连接的设备。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -jar bundletool.jar install-apks --apks=/MyApp/my_app.apks</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>如果连接了多个设备，请添加 –device-id=serial-id 标记来指定目标设备。</p>\n</blockquote>\n<h4 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h4><p>通过上面两条命令，已经为你即将发布的应用安装到你的设备上，最后检查下 app 运行情况，没问题就可以将刚才生成的 aab 上传到商店后台进行版本发布。</p>\n<h4 id=\"更多\"><a href=\"#更多\" class=\"headerlink\" title=\"更多\"></a>更多</h4><p>想了解更多关于 bundletool 工具的使用方法，可以到 <a href=\"https://developer.android.com/studio/command-line/bundletool\" target=\"_blank\" rel=\"noopener\">这里</a> 了解。</p>\n<h3 id=\"直接将-App-Bundle-上传到应用-Play-商店后台\"><a href=\"#直接将-App-Bundle-上传到应用-Play-商店后台\" class=\"headerlink\" title=\"直接将 App Bundle 上传到应用 Play 商店后台\"></a>直接将 App Bundle 上传到应用 Play 商店后台</h3><p>这个操作很简单，跟平常发布版本操作差不多，具体如下：</p>\n<blockquote>\n<p>版本管理 –&gt; 应用版本 –&gt; 创建版本 –&gt; 添加 Android App Bundle –&gt; 保存</p>\n</blockquote>\n<p>此时想检查刚上传的 App Bundle 生成的 APK 情况，以及下载生成的 APK 到本地进行测试，操作步骤如下：</p>\n<blockquote>\n<p>版本管理 –&gt; 软件工件库 –&gt; 软件工件库草稿找到刚才上传的版本 –&gt; 探索 –&gt; 下载设备专属 APK</p>\n</blockquote>\n<p><img src=\"/images/2019/10/06.png\" alt=\"image\"></p>\n<p><img src=\"/images/2019/10/04.png\" alt=\"image\"></p>\n<h2 id=\"实验\"><a href=\"#实验\" class=\"headerlink\" title=\"实验\"></a>实验</h2><h3 id=\"本地语言包\"><a href=\"#本地语言包\" class=\"headerlink\" title=\"本地语言包\"></a>本地语言包</h3><p>如果本身 App 是支持多语言的，在应用内切换语言，Play Store 无法检测应用语言改变，因此需要禁止 App Bundle 根据语言拆分安装包。</p>\n<p>在 App 下的 build.gradle 文件添加以下配置：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">android &#123;</span><br><span class=\"line\">    bundle &#123;</span><br><span class=\"line\">        language &#123;</span><br><span class=\"line\">            // Specifies that the app bundle should not support</span><br><span class=\"line\">            // configuration APKs for language resources. These</span><br><span class=\"line\">            // resources are instead packaged with each base and</span><br><span class=\"line\">            // dynamic feature APK.</span><br><span class=\"line\">            enableSplit = false</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"图片资源\"><a href=\"#图片资源\" class=\"headerlink\" title=\"图片资源\"></a>图片资源</h3><p>目前大部分应用图片资源只适配一些高分辨率 xxxhdpi，xxhdpi。</p>\n<p>验证 App Bundle 拆分出来的低分辨率包，是否会不存在高分辨率的图片资源？</p>\n<blockquote>\n<p>将生成 “apks” 的文件更改为 “zip” 格式 –&gt; 解压 –&gt; standalones –&gt; 选一个低分辨率的安装包 –&gt; 更改为 “zip” 格式 –&gt; 解压 –&gt; 查看资源文件</p>\n</blockquote>\n<p><img src=\"/images/2019/10/07.png\" alt=\"image\"></p>\n<p>结果：低分辨率包依然存在我们项目高分辨率的图片。</p>\n<h2 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h2><p>最后来看下使用 App Bundle 生成的 APK，与上个版本相比的数据。</p>\n<p><img src=\"/images/2019/10/05.png\" alt=\"image\"></p>\n<h2 id=\"资料\"><a href=\"#资料\" class=\"headerlink\" title=\"资料\"></a>资料</h2><ul>\n<li><a href=\"https://developer.android.com/guide/app-bundle/\" target=\"_blank\" rel=\"noopener\">官方文档介绍</a></li>\n<li><a href=\"https://developer.android.com/topic/performance/reduce-apk-size\" target=\"_blank\" rel=\"noopener\">缩减应用大小</a></li>\n<li><a href=\"https://developer.android.com/studio/command-line/bundletool\" target=\"_blank\" rel=\"noopener\">如何测试构建出来的 aab 包</a></li>\n<li><a href=\"https://blog.csdn.net/u012124438/article/details/83508944\" target=\"_blank\" rel=\"noopener\">Android App瘦身新姿势——Android App Bundle</a></li>\n</ul>\n<h2 id=\"推荐阅读\"><a href=\"#推荐阅读\" class=\"headerlink\" title=\"推荐阅读\"></a>推荐阅读</h2><ul>\n<li><a href=\"https://gojun.me/2019/09/10/android-reduce-apk-size/\" target=\"_blank\" rel=\"noopener\">终极 Apk 瘦身优化</a></li>\n</ul>\n"},{"title":"Android 如何快速全局更换字体","date":"2019-07-06T14:58:05.000Z","_content":"\n\n在 Android 8.0（API 26）和 Support 包 26 以上版本提供了一种可将自定义字体声明为 XML 布局中的资源更快更方便的方式，并且该种方式兼容 Android 4.1 版本以上，官方文档介绍 [地址](https://developer.android.google.cn/guide/topics/ui/look-and-feel/fonts-in-xml.html#java)。\n \n网上搜索了很多资料，在未有此特性时处理是相当麻烦的，当然也有一些第三方开源库来帮助处理，其中最多人推荐使用的是 [Calligraphy](https://github.com/InflationX/Calligraphy)。现在有了此特性，我们就可以非常容易全局更改 App 字体。\n\n## 如何引入第三方字体包\n\n1. 右键单击资源 res 文件夹，选择 New > Android resource directory；\n\n2. 在资源类型列表中选择 font，然后点击 OK；\n\n![image](/images/2019/07/01.png)\n\n3. 将你的第三方字体包放到添加到刚创建的 font 文件夹；\n\n![image](/images/2019/07/02.png)\n\n4. Android Studio 支持预览字体，你可以双击字体包即可预览\n\n![image](/images/2019/07/03.png)\n\n至此你已成功引入第三方字体包了，接下来介绍如何使用以及一些技巧。\n\n## 如何使用\n\n在 xml 文件中给所需要更换字体的控件增加一个属性 fontFamily\n\n```\n<TextView\n    android:layout_width=\"wrap_content\"\n    android:layout_height=\"wrap_content\"\n    android:text=\"Hello World!\"\n    android:fontFamily=\"@font/hind_siliguri_regular\" />\n```\n\n在代码中动态更改控件的字体\n\n```\nTypeface typeface = ResourcesCompat.getFont(context, R.font.hind_siliguri_regular);\n// 若是粗体使用 Typeface.BOLD\ntextView.setTypeface(typeface, Typeface.NORMAL);\n```\n\n## 如何全局字体替换更改\n\n在 styles.xml 文件中找到 App 主题增加自定义字体属性；\n```\n<!-- Base application theme. -->\n<style name=\"AppTheme\" parent=\"Theme.AppCompat.Light.DarkActionBar\">\n\n    ...\n\n    <!--自定义字体-->\n    <item name=\"android:fontFamily\">@font/hind_siliguri_regular</item>\n</style>\n```\n然后在 AndroidManifest.xml 文件的程序定义里，应用此主题；\n\n```\n<application\n    android:allowBackup=\"true\"\n    android:icon=\"@mipmap/ic_launcher\"\n    android:label=\"@string/app_name\"\n    android:roundIcon=\"@mipmap/ic_launcher_round\"\n    android:supportsRtl=\"true\"\n    android:theme=\"@style/AppTheme\">\n    \n    ...\n    \n</application>\n```\n\n这样就全局更换字体样式了。\n\n## 如何实现不同语言使用不同字体\n\n通过上面方法可以实现了 App 使用第三方字体，可这时候如果产品要求在不同语言下使用不同的字体；\n\n那么如何实现呢？很简单只需要复制一份 styles.xml 文件在对应的语言 values 文件下，更换所对应的字体即可。\n\n1. 右键单击资源 res 文件夹，选择 New > Android resource directory；\n\n2. 在资源类型列表中选择 values，左边边选择 Locale，然后选择你对应的语言，然后点击 OK；\n\n![image](/images/2019/07/04.png)\n\n3. 这时候会看到新建了一个文件夹 values-ar\n\n![image](/images/2019/07/05.png)\n\n4. 复制一份 styles.xml 文件到 values-ar 文件夹下，修改主题下的字体配置;\n\n```\n<!-- Base application theme. -->\n<style name=\"AppTheme\" parent=\"Theme.AppCompat.Light.DarkActionBar\">\n    \n    ...\n    \n    <item name=\"android:fontFamily\">@font/ar_regular</item>\n</style>\n```\n\n到这里当你切换语言到中东阿拉伯语的时候，就会显示对应字体了。\n\n## 推荐阅读\n\n[Android 中东阿拉伯语适配，看这一篇够了](https://gojun.me/2017/06/06/android-rtl/)\n\n\n\n\n\n\n\n","source":"_posts/android-change-font.md","raw":"---\ntitle: Android 如何快速全局更换字体\ndate: 2019-07-06 22:58:05\ntags: [Android,Font]\ncategories: Android\n---\n\n\n在 Android 8.0（API 26）和 Support 包 26 以上版本提供了一种可将自定义字体声明为 XML 布局中的资源更快更方便的方式，并且该种方式兼容 Android 4.1 版本以上，官方文档介绍 [地址](https://developer.android.google.cn/guide/topics/ui/look-and-feel/fonts-in-xml.html#java)。\n \n网上搜索了很多资料，在未有此特性时处理是相当麻烦的，当然也有一些第三方开源库来帮助处理，其中最多人推荐使用的是 [Calligraphy](https://github.com/InflationX/Calligraphy)。现在有了此特性，我们就可以非常容易全局更改 App 字体。\n\n## 如何引入第三方字体包\n\n1. 右键单击资源 res 文件夹，选择 New > Android resource directory；\n\n2. 在资源类型列表中选择 font，然后点击 OK；\n\n![image](/images/2019/07/01.png)\n\n3. 将你的第三方字体包放到添加到刚创建的 font 文件夹；\n\n![image](/images/2019/07/02.png)\n\n4. Android Studio 支持预览字体，你可以双击字体包即可预览\n\n![image](/images/2019/07/03.png)\n\n至此你已成功引入第三方字体包了，接下来介绍如何使用以及一些技巧。\n\n## 如何使用\n\n在 xml 文件中给所需要更换字体的控件增加一个属性 fontFamily\n\n```\n<TextView\n    android:layout_width=\"wrap_content\"\n    android:layout_height=\"wrap_content\"\n    android:text=\"Hello World!\"\n    android:fontFamily=\"@font/hind_siliguri_regular\" />\n```\n\n在代码中动态更改控件的字体\n\n```\nTypeface typeface = ResourcesCompat.getFont(context, R.font.hind_siliguri_regular);\n// 若是粗体使用 Typeface.BOLD\ntextView.setTypeface(typeface, Typeface.NORMAL);\n```\n\n## 如何全局字体替换更改\n\n在 styles.xml 文件中找到 App 主题增加自定义字体属性；\n```\n<!-- Base application theme. -->\n<style name=\"AppTheme\" parent=\"Theme.AppCompat.Light.DarkActionBar\">\n\n    ...\n\n    <!--自定义字体-->\n    <item name=\"android:fontFamily\">@font/hind_siliguri_regular</item>\n</style>\n```\n然后在 AndroidManifest.xml 文件的程序定义里，应用此主题；\n\n```\n<application\n    android:allowBackup=\"true\"\n    android:icon=\"@mipmap/ic_launcher\"\n    android:label=\"@string/app_name\"\n    android:roundIcon=\"@mipmap/ic_launcher_round\"\n    android:supportsRtl=\"true\"\n    android:theme=\"@style/AppTheme\">\n    \n    ...\n    \n</application>\n```\n\n这样就全局更换字体样式了。\n\n## 如何实现不同语言使用不同字体\n\n通过上面方法可以实现了 App 使用第三方字体，可这时候如果产品要求在不同语言下使用不同的字体；\n\n那么如何实现呢？很简单只需要复制一份 styles.xml 文件在对应的语言 values 文件下，更换所对应的字体即可。\n\n1. 右键单击资源 res 文件夹，选择 New > Android resource directory；\n\n2. 在资源类型列表中选择 values，左边边选择 Locale，然后选择你对应的语言，然后点击 OK；\n\n![image](/images/2019/07/04.png)\n\n3. 这时候会看到新建了一个文件夹 values-ar\n\n![image](/images/2019/07/05.png)\n\n4. 复制一份 styles.xml 文件到 values-ar 文件夹下，修改主题下的字体配置;\n\n```\n<!-- Base application theme. -->\n<style name=\"AppTheme\" parent=\"Theme.AppCompat.Light.DarkActionBar\">\n    \n    ...\n    \n    <item name=\"android:fontFamily\">@font/ar_regular</item>\n</style>\n```\n\n到这里当你切换语言到中东阿拉伯语的时候，就会显示对应字体了。\n\n## 推荐阅读\n\n[Android 中东阿拉伯语适配，看这一篇够了](https://gojun.me/2017/06/06/android-rtl/)\n\n\n\n\n\n\n\n","slug":"android-change-font","published":1,"updated":"2019-07-06T15:11:00.293Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cks0kfic30002w3yzp6tlg5ag","content":"<p>在 Android 8.0（API 26）和 Support 包 26 以上版本提供了一种可将自定义字体声明为 XML 布局中的资源更快更方便的方式，并且该种方式兼容 Android 4.1 版本以上，官方文档介绍 <a href=\"https://developer.android.google.cn/guide/topics/ui/look-and-feel/fonts-in-xml.html#java\" target=\"_blank\" rel=\"noopener\">地址</a>。</p>\n<p>网上搜索了很多资料，在未有此特性时处理是相当麻烦的，当然也有一些第三方开源库来帮助处理，其中最多人推荐使用的是 <a href=\"https://github.com/InflationX/Calligraphy\" target=\"_blank\" rel=\"noopener\">Calligraphy</a>。现在有了此特性，我们就可以非常容易全局更改 App 字体。</p>\n<h2 id=\"如何引入第三方字体包\"><a href=\"#如何引入第三方字体包\" class=\"headerlink\" title=\"如何引入第三方字体包\"></a>如何引入第三方字体包</h2><ol>\n<li><p>右键单击资源 res 文件夹，选择 New &gt; Android resource directory；</p>\n</li>\n<li><p>在资源类型列表中选择 font，然后点击 OK；</p>\n</li>\n</ol>\n<p><img src=\"/images/2019/07/01.png\" alt=\"image\"></p>\n<ol start=\"3\">\n<li>将你的第三方字体包放到添加到刚创建的 font 文件夹；</li>\n</ol>\n<p><img src=\"/images/2019/07/02.png\" alt=\"image\"></p>\n<ol start=\"4\">\n<li>Android Studio 支持预览字体，你可以双击字体包即可预览</li>\n</ol>\n<p><img src=\"/images/2019/07/03.png\" alt=\"image\"></p>\n<p>至此你已成功引入第三方字体包了，接下来介绍如何使用以及一些技巧。</p>\n<h2 id=\"如何使用\"><a href=\"#如何使用\" class=\"headerlink\" title=\"如何使用\"></a>如何使用</h2><p>在 xml 文件中给所需要更换字体的控件增加一个属性 fontFamily</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;TextView</span><br><span class=\"line\">    android:layout_width=&quot;wrap_content&quot;</span><br><span class=\"line\">    android:layout_height=&quot;wrap_content&quot;</span><br><span class=\"line\">    android:text=&quot;Hello World!&quot;</span><br><span class=\"line\">    android:fontFamily=&quot;@font/hind_siliguri_regular&quot; /&gt;</span><br></pre></td></tr></table></figure>\n\n<p>在代码中动态更改控件的字体</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Typeface typeface = ResourcesCompat.getFont(context, R.font.hind_siliguri_regular);</span><br><span class=\"line\">// 若是粗体使用 Typeface.BOLD</span><br><span class=\"line\">textView.setTypeface(typeface, Typeface.NORMAL);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"如何全局字体替换更改\"><a href=\"#如何全局字体替换更改\" class=\"headerlink\" title=\"如何全局字体替换更改\"></a>如何全局字体替换更改</h2><p>在 styles.xml 文件中找到 App 主题增加自定义字体属性；</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- Base application theme. --&gt;</span><br><span class=\"line\">&lt;style name=&quot;AppTheme&quot; parent=&quot;Theme.AppCompat.Light.DarkActionBar&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    ...</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;!--自定义字体--&gt;</span><br><span class=\"line\">    &lt;item name=&quot;android:fontFamily&quot;&gt;@font/hind_siliguri_regular&lt;/item&gt;</span><br><span class=\"line\">&lt;/style&gt;</span><br></pre></td></tr></table></figure>\n\n<p>然后在 AndroidManifest.xml 文件的程序定义里，应用此主题；</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;application</span><br><span class=\"line\">    android:allowBackup=&quot;true&quot;</span><br><span class=\"line\">    android:icon=&quot;@mipmap/ic_launcher&quot;</span><br><span class=\"line\">    android:label=&quot;@string/app_name&quot;</span><br><span class=\"line\">    android:roundIcon=&quot;@mipmap/ic_launcher_round&quot;</span><br><span class=\"line\">    android:supportsRtl=&quot;true&quot;</span><br><span class=\"line\">    android:theme=&quot;@style/AppTheme&quot;&gt;</span><br><span class=\"line\">    </span><br><span class=\"line\">    ...</span><br><span class=\"line\">    </span><br><span class=\"line\">&lt;/application&gt;</span><br></pre></td></tr></table></figure>\n\n<p>这样就全局更换字体样式了。</p>\n<h2 id=\"如何实现不同语言使用不同字体\"><a href=\"#如何实现不同语言使用不同字体\" class=\"headerlink\" title=\"如何实现不同语言使用不同字体\"></a>如何实现不同语言使用不同字体</h2><p>通过上面方法可以实现了 App 使用第三方字体，可这时候如果产品要求在不同语言下使用不同的字体；</p>\n<p>那么如何实现呢？很简单只需要复制一份 styles.xml 文件在对应的语言 values 文件下，更换所对应的字体即可。</p>\n<ol>\n<li><p>右键单击资源 res 文件夹，选择 New &gt; Android resource directory；</p>\n</li>\n<li><p>在资源类型列表中选择 values，左边边选择 Locale，然后选择你对应的语言，然后点击 OK；</p>\n</li>\n</ol>\n<p><img src=\"/images/2019/07/04.png\" alt=\"image\"></p>\n<ol start=\"3\">\n<li>这时候会看到新建了一个文件夹 values-ar</li>\n</ol>\n<p><img src=\"/images/2019/07/05.png\" alt=\"image\"></p>\n<ol start=\"4\">\n<li>复制一份 styles.xml 文件到 values-ar 文件夹下，修改主题下的字体配置;</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- Base application theme. --&gt;</span><br><span class=\"line\">&lt;style name=&quot;AppTheme&quot; parent=&quot;Theme.AppCompat.Light.DarkActionBar&quot;&gt;</span><br><span class=\"line\">    </span><br><span class=\"line\">    ...</span><br><span class=\"line\">    </span><br><span class=\"line\">    &lt;item name=&quot;android:fontFamily&quot;&gt;@font/ar_regular&lt;/item&gt;</span><br><span class=\"line\">&lt;/style&gt;</span><br></pre></td></tr></table></figure>\n\n<p>到这里当你切换语言到中东阿拉伯语的时候，就会显示对应字体了。</p>\n<h2 id=\"推荐阅读\"><a href=\"#推荐阅读\" class=\"headerlink\" title=\"推荐阅读\"></a>推荐阅读</h2><p><a href=\"https://gojun.me/2017/06/06/android-rtl/\" target=\"_blank\" rel=\"noopener\">Android 中东阿拉伯语适配，看这一篇够了</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>在 Android 8.0（API 26）和 Support 包 26 以上版本提供了一种可将自定义字体声明为 XML 布局中的资源更快更方便的方式，并且该种方式兼容 Android 4.1 版本以上，官方文档介绍 <a href=\"https://developer.android.google.cn/guide/topics/ui/look-and-feel/fonts-in-xml.html#java\" target=\"_blank\" rel=\"noopener\">地址</a>。</p>\n<p>网上搜索了很多资料，在未有此特性时处理是相当麻烦的，当然也有一些第三方开源库来帮助处理，其中最多人推荐使用的是 <a href=\"https://github.com/InflationX/Calligraphy\" target=\"_blank\" rel=\"noopener\">Calligraphy</a>。现在有了此特性，我们就可以非常容易全局更改 App 字体。</p>\n<h2 id=\"如何引入第三方字体包\"><a href=\"#如何引入第三方字体包\" class=\"headerlink\" title=\"如何引入第三方字体包\"></a>如何引入第三方字体包</h2><ol>\n<li><p>右键单击资源 res 文件夹，选择 New &gt; Android resource directory；</p>\n</li>\n<li><p>在资源类型列表中选择 font，然后点击 OK；</p>\n</li>\n</ol>\n<p><img src=\"/images/2019/07/01.png\" alt=\"image\"></p>\n<ol start=\"3\">\n<li>将你的第三方字体包放到添加到刚创建的 font 文件夹；</li>\n</ol>\n<p><img src=\"/images/2019/07/02.png\" alt=\"image\"></p>\n<ol start=\"4\">\n<li>Android Studio 支持预览字体，你可以双击字体包即可预览</li>\n</ol>\n<p><img src=\"/images/2019/07/03.png\" alt=\"image\"></p>\n<p>至此你已成功引入第三方字体包了，接下来介绍如何使用以及一些技巧。</p>\n<h2 id=\"如何使用\"><a href=\"#如何使用\" class=\"headerlink\" title=\"如何使用\"></a>如何使用</h2><p>在 xml 文件中给所需要更换字体的控件增加一个属性 fontFamily</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;TextView</span><br><span class=\"line\">    android:layout_width=&quot;wrap_content&quot;</span><br><span class=\"line\">    android:layout_height=&quot;wrap_content&quot;</span><br><span class=\"line\">    android:text=&quot;Hello World!&quot;</span><br><span class=\"line\">    android:fontFamily=&quot;@font/hind_siliguri_regular&quot; /&gt;</span><br></pre></td></tr></table></figure>\n\n<p>在代码中动态更改控件的字体</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Typeface typeface = ResourcesCompat.getFont(context, R.font.hind_siliguri_regular);</span><br><span class=\"line\">// 若是粗体使用 Typeface.BOLD</span><br><span class=\"line\">textView.setTypeface(typeface, Typeface.NORMAL);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"如何全局字体替换更改\"><a href=\"#如何全局字体替换更改\" class=\"headerlink\" title=\"如何全局字体替换更改\"></a>如何全局字体替换更改</h2><p>在 styles.xml 文件中找到 App 主题增加自定义字体属性；</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- Base application theme. --&gt;</span><br><span class=\"line\">&lt;style name=&quot;AppTheme&quot; parent=&quot;Theme.AppCompat.Light.DarkActionBar&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    ...</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;!--自定义字体--&gt;</span><br><span class=\"line\">    &lt;item name=&quot;android:fontFamily&quot;&gt;@font/hind_siliguri_regular&lt;/item&gt;</span><br><span class=\"line\">&lt;/style&gt;</span><br></pre></td></tr></table></figure>\n\n<p>然后在 AndroidManifest.xml 文件的程序定义里，应用此主题；</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;application</span><br><span class=\"line\">    android:allowBackup=&quot;true&quot;</span><br><span class=\"line\">    android:icon=&quot;@mipmap/ic_launcher&quot;</span><br><span class=\"line\">    android:label=&quot;@string/app_name&quot;</span><br><span class=\"line\">    android:roundIcon=&quot;@mipmap/ic_launcher_round&quot;</span><br><span class=\"line\">    android:supportsRtl=&quot;true&quot;</span><br><span class=\"line\">    android:theme=&quot;@style/AppTheme&quot;&gt;</span><br><span class=\"line\">    </span><br><span class=\"line\">    ...</span><br><span class=\"line\">    </span><br><span class=\"line\">&lt;/application&gt;</span><br></pre></td></tr></table></figure>\n\n<p>这样就全局更换字体样式了。</p>\n<h2 id=\"如何实现不同语言使用不同字体\"><a href=\"#如何实现不同语言使用不同字体\" class=\"headerlink\" title=\"如何实现不同语言使用不同字体\"></a>如何实现不同语言使用不同字体</h2><p>通过上面方法可以实现了 App 使用第三方字体，可这时候如果产品要求在不同语言下使用不同的字体；</p>\n<p>那么如何实现呢？很简单只需要复制一份 styles.xml 文件在对应的语言 values 文件下，更换所对应的字体即可。</p>\n<ol>\n<li><p>右键单击资源 res 文件夹，选择 New &gt; Android resource directory；</p>\n</li>\n<li><p>在资源类型列表中选择 values，左边边选择 Locale，然后选择你对应的语言，然后点击 OK；</p>\n</li>\n</ol>\n<p><img src=\"/images/2019/07/04.png\" alt=\"image\"></p>\n<ol start=\"3\">\n<li>这时候会看到新建了一个文件夹 values-ar</li>\n</ol>\n<p><img src=\"/images/2019/07/05.png\" alt=\"image\"></p>\n<ol start=\"4\">\n<li>复制一份 styles.xml 文件到 values-ar 文件夹下，修改主题下的字体配置;</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- Base application theme. --&gt;</span><br><span class=\"line\">&lt;style name=&quot;AppTheme&quot; parent=&quot;Theme.AppCompat.Light.DarkActionBar&quot;&gt;</span><br><span class=\"line\">    </span><br><span class=\"line\">    ...</span><br><span class=\"line\">    </span><br><span class=\"line\">    &lt;item name=&quot;android:fontFamily&quot;&gt;@font/ar_regular&lt;/item&gt;</span><br><span class=\"line\">&lt;/style&gt;</span><br></pre></td></tr></table></figure>\n\n<p>到这里当你切换语言到中东阿拉伯语的时候，就会显示对应字体了。</p>\n<h2 id=\"推荐阅读\"><a href=\"#推荐阅读\" class=\"headerlink\" title=\"推荐阅读\"></a>推荐阅读</h2><p><a href=\"https://gojun.me/2017/06/06/android-rtl/\" target=\"_blank\" rel=\"noopener\">Android 中东阿拉伯语适配，看这一篇够了</a></p>\n"},{"title":"开发 Material Design+RxJava+Retrofit+MVP App 参考资料","date":"2016-06-05T16:26:40.000Z","_content":"\n![](/images/2016-01.jpeg)\n\n这里记录了我开发 [大象](https://github.com/Freelander/Elephant) 项目时，所学习的开发资料以及参考的开源项目，稍微整理了一下，全当笔记记录，跟大家一起分享，也许能给正在使用 RxJava + Retrofit + MVP + Material Design 框架开发的人一个参考学习，如果有人从我分享的资料当中学习到东西，那是我的荣幸，希望大家能与我一起努力。\n\n之前看到很多人都使用 RxJava+Retrofit+MVP 来开发 App, 然而自己一直没有时间来实践，最近有空就开始着手开发 PHPHub 社区第三方 Android 客戶端，至于我为什么选择了开发 PHPHub 社区，有兴趣的哥们可以到 [这里](https://laravel-china.org/topics/3083) 去看看。\n\n### 关于我\n\n> 欢迎关注我 [Github](https://github.com/Freelander) 以及 [微博](http://weibo.com/gaojunhuang)\n\n### 大象源码链接\n\n>https://github.com/Freelander/Elephant\n\n### RxJava 与 Retrofit 参考学习的资料\n\n##### 文章\n\n- [给 Android 开发者的 RxJava 详解](http://gank.io/post/560e15be2dca930e00da1083)\n- [RxJava 与 Retrofit 结合的最佳实践](http://gank.io/post/56e80c2c677659311bed9841)\n- [可能是东半球最全的 RxJava 使用场景小结](http://blog.csdn.net/theone10211024/article/details/50435325)\n- [Rxjava 实战](http://www.jianshu.com/p/64aa976a46be)\n- [Android Retrofit 2.0 使用-补充篇](http://wuxiaolong.me/2016/06/18/retrofits/)\n\n##### 项目\n\n- [RxJavaSamples](https://github.com/rengwuxian/RxJavaSamples)\n- [RxJava-Android-Samples](https://github.com/kaushikgopal/RxJava-Android-Samples)\n\n##### 视频\n\n- [Android 开发者们一定会喜欢的 RxJava](http://boolan.com/lecture/1000001243#0-tsina-1-68759-397232819ff9a47a7b7e80a40613cfe1)\n- [用 Retrofit 2 简化 HTTP 请求](https://realm.io/cn/news/droidcon-jake-wharton-simple-http-retrofit-2/)\n- [Airbnb：我们的安卓客户端是如何使用 RxJava 的](https://realm.io/cn/news/kau-felipe-lima-adopting-rxjava-airbnb-android/)\n\n##### 文档\n\n- [ReactiveX/RxJava 文档中文版](https://mcxiaoke.gitbooks.io/rxdocs/content/)\n\n### MVP 参考学习的资料\n\n##### 文章\n\n- [选择恐惧症的福音, 教你认清 MVC, MVP 和 MVVM](http://www.zjutkz.net/2016/04/13/%E9%80%89%E6%8B%A9%E6%81%90%E6%83%A7%E7%97%87%E7%9A%84%E7%A6%8F%E9%9F%B3%EF%BC%81%E6%95%99%E4%BD%A0%E8%AE%A4%E6%B8%85MVC%EF%BC%8CMVP%E5%92%8CMVVM/)\n- [在 Android 开发中使用 MVP 模式](http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2015/0202/2397.html)\n- [Android官方MVP架构示例项目解析](http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2016/0413/4139.html)\n\n##### 项目\n\n- [androidmvp](https://github.com/antoniolg/androidmvp)\n- [android-architecture](https://github.com/googlesamples/android-architecture/tree/todo-mvp-rxjava/)\n- [T-MVP](https://github.com/north2014/T-MVP)\n\n### 多主题切换\n\n- [知乎和简书的夜间模式实现套路](http://www.jianshu.com/p/3b55e84742e5)\n\n### 参考项目\n\n- [Meizhi](https://github.com/drakeet/Meizhi) (非常棒的一个项目, 参考了挺多)\n- [PHPHub-Android](https://github.com/CycloneAxe/phphub-android)（PHPHub 官方客户端）\n\n### UI 设计\n\n##### 参考 App\n\n- [知乎](http://zhihu.com/)\n- [掘金](http://gold.xitu.io/)\n- [PHPHub-Android](https://github.com/CycloneAxe/phphub-android)\n\n##### 图标素材来源\n\n- [Ions8](https://icons8.com/)\n\n##### Material Design 设计规范\n\n- [Material design](https://material.google.com/)\n- [Material Design 中文版](https://github.com/1sters/material_design_zh_2)\n\n##### 设计灵感来源\n\n- [Uplabs](https://material.uplabs.com/)\n- [Dribbble](https://dribbble.com/)\n- [优设](http://www.uisdc.com/)\n\n## 感谢\n\n感谢以上所有分享的资料以及开源项目大神们。\n","source":"_posts/android-elephant.md","raw":"---\ntitle: 开发 Material Design+RxJava+Retrofit+MVP App 参考资料\ndate: 2016-06-06 00:26:40\ntags: [Android,Material Design]\ncategories: Android\n---\n\n![](/images/2016-01.jpeg)\n\n这里记录了我开发 [大象](https://github.com/Freelander/Elephant) 项目时，所学习的开发资料以及参考的开源项目，稍微整理了一下，全当笔记记录，跟大家一起分享，也许能给正在使用 RxJava + Retrofit + MVP + Material Design 框架开发的人一个参考学习，如果有人从我分享的资料当中学习到东西，那是我的荣幸，希望大家能与我一起努力。\n\n之前看到很多人都使用 RxJava+Retrofit+MVP 来开发 App, 然而自己一直没有时间来实践，最近有空就开始着手开发 PHPHub 社区第三方 Android 客戶端，至于我为什么选择了开发 PHPHub 社区，有兴趣的哥们可以到 [这里](https://laravel-china.org/topics/3083) 去看看。\n\n### 关于我\n\n> 欢迎关注我 [Github](https://github.com/Freelander) 以及 [微博](http://weibo.com/gaojunhuang)\n\n### 大象源码链接\n\n>https://github.com/Freelander/Elephant\n\n### RxJava 与 Retrofit 参考学习的资料\n\n##### 文章\n\n- [给 Android 开发者的 RxJava 详解](http://gank.io/post/560e15be2dca930e00da1083)\n- [RxJava 与 Retrofit 结合的最佳实践](http://gank.io/post/56e80c2c677659311bed9841)\n- [可能是东半球最全的 RxJava 使用场景小结](http://blog.csdn.net/theone10211024/article/details/50435325)\n- [Rxjava 实战](http://www.jianshu.com/p/64aa976a46be)\n- [Android Retrofit 2.0 使用-补充篇](http://wuxiaolong.me/2016/06/18/retrofits/)\n\n##### 项目\n\n- [RxJavaSamples](https://github.com/rengwuxian/RxJavaSamples)\n- [RxJava-Android-Samples](https://github.com/kaushikgopal/RxJava-Android-Samples)\n\n##### 视频\n\n- [Android 开发者们一定会喜欢的 RxJava](http://boolan.com/lecture/1000001243#0-tsina-1-68759-397232819ff9a47a7b7e80a40613cfe1)\n- [用 Retrofit 2 简化 HTTP 请求](https://realm.io/cn/news/droidcon-jake-wharton-simple-http-retrofit-2/)\n- [Airbnb：我们的安卓客户端是如何使用 RxJava 的](https://realm.io/cn/news/kau-felipe-lima-adopting-rxjava-airbnb-android/)\n\n##### 文档\n\n- [ReactiveX/RxJava 文档中文版](https://mcxiaoke.gitbooks.io/rxdocs/content/)\n\n### MVP 参考学习的资料\n\n##### 文章\n\n- [选择恐惧症的福音, 教你认清 MVC, MVP 和 MVVM](http://www.zjutkz.net/2016/04/13/%E9%80%89%E6%8B%A9%E6%81%90%E6%83%A7%E7%97%87%E7%9A%84%E7%A6%8F%E9%9F%B3%EF%BC%81%E6%95%99%E4%BD%A0%E8%AE%A4%E6%B8%85MVC%EF%BC%8CMVP%E5%92%8CMVVM/)\n- [在 Android 开发中使用 MVP 模式](http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2015/0202/2397.html)\n- [Android官方MVP架构示例项目解析](http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2016/0413/4139.html)\n\n##### 项目\n\n- [androidmvp](https://github.com/antoniolg/androidmvp)\n- [android-architecture](https://github.com/googlesamples/android-architecture/tree/todo-mvp-rxjava/)\n- [T-MVP](https://github.com/north2014/T-MVP)\n\n### 多主题切换\n\n- [知乎和简书的夜间模式实现套路](http://www.jianshu.com/p/3b55e84742e5)\n\n### 参考项目\n\n- [Meizhi](https://github.com/drakeet/Meizhi) (非常棒的一个项目, 参考了挺多)\n- [PHPHub-Android](https://github.com/CycloneAxe/phphub-android)（PHPHub 官方客户端）\n\n### UI 设计\n\n##### 参考 App\n\n- [知乎](http://zhihu.com/)\n- [掘金](http://gold.xitu.io/)\n- [PHPHub-Android](https://github.com/CycloneAxe/phphub-android)\n\n##### 图标素材来源\n\n- [Ions8](https://icons8.com/)\n\n##### Material Design 设计规范\n\n- [Material design](https://material.google.com/)\n- [Material Design 中文版](https://github.com/1sters/material_design_zh_2)\n\n##### 设计灵感来源\n\n- [Uplabs](https://material.uplabs.com/)\n- [Dribbble](https://dribbble.com/)\n- [优设](http://www.uisdc.com/)\n\n## 感谢\n\n感谢以上所有分享的资料以及开源项目大神们。\n","slug":"android-elephant","published":1,"updated":"2019-06-12T16:59:47.126Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cks0kfic60005w3yz1h09w4t1","content":"<p><img src=\"/images/2016-01.jpeg\" alt></p>\n<p>这里记录了我开发 <a href=\"https://github.com/Freelander/Elephant\" target=\"_blank\" rel=\"noopener\">大象</a> 项目时，所学习的开发资料以及参考的开源项目，稍微整理了一下，全当笔记记录，跟大家一起分享，也许能给正在使用 RxJava + Retrofit + MVP + Material Design 框架开发的人一个参考学习，如果有人从我分享的资料当中学习到东西，那是我的荣幸，希望大家能与我一起努力。</p>\n<p>之前看到很多人都使用 RxJava+Retrofit+MVP 来开发 App, 然而自己一直没有时间来实践，最近有空就开始着手开发 PHPHub 社区第三方 Android 客戶端，至于我为什么选择了开发 PHPHub 社区，有兴趣的哥们可以到 <a href=\"https://laravel-china.org/topics/3083\" target=\"_blank\" rel=\"noopener\">这里</a> 去看看。</p>\n<h3 id=\"关于我\"><a href=\"#关于我\" class=\"headerlink\" title=\"关于我\"></a>关于我</h3><blockquote>\n<p>欢迎关注我 <a href=\"https://github.com/Freelander\" target=\"_blank\" rel=\"noopener\">Github</a> 以及 <a href=\"http://weibo.com/gaojunhuang\" target=\"_blank\" rel=\"noopener\">微博</a></p>\n</blockquote>\n<h3 id=\"大象源码链接\"><a href=\"#大象源码链接\" class=\"headerlink\" title=\"大象源码链接\"></a>大象源码链接</h3><blockquote>\n<p><a href=\"https://github.com/Freelander/Elephant\" target=\"_blank\" rel=\"noopener\">https://github.com/Freelander/Elephant</a></p>\n</blockquote>\n<h3 id=\"RxJava-与-Retrofit-参考学习的资料\"><a href=\"#RxJava-与-Retrofit-参考学习的资料\" class=\"headerlink\" title=\"RxJava 与 Retrofit 参考学习的资料\"></a>RxJava 与 Retrofit 参考学习的资料</h3><h5 id=\"文章\"><a href=\"#文章\" class=\"headerlink\" title=\"文章\"></a>文章</h5><ul>\n<li><a href=\"http://gank.io/post/560e15be2dca930e00da1083\" target=\"_blank\" rel=\"noopener\">给 Android 开发者的 RxJava 详解</a></li>\n<li><a href=\"http://gank.io/post/56e80c2c677659311bed9841\" target=\"_blank\" rel=\"noopener\">RxJava 与 Retrofit 结合的最佳实践</a></li>\n<li><a href=\"http://blog.csdn.net/theone10211024/article/details/50435325\" target=\"_blank\" rel=\"noopener\">可能是东半球最全的 RxJava 使用场景小结</a></li>\n<li><a href=\"http://www.jianshu.com/p/64aa976a46be\" target=\"_blank\" rel=\"noopener\">Rxjava 实战</a></li>\n<li><a href=\"http://wuxiaolong.me/2016/06/18/retrofits/\" target=\"_blank\" rel=\"noopener\">Android Retrofit 2.0 使用-补充篇</a></li>\n</ul>\n<h5 id=\"项目\"><a href=\"#项目\" class=\"headerlink\" title=\"项目\"></a>项目</h5><ul>\n<li><a href=\"https://github.com/rengwuxian/RxJavaSamples\" target=\"_blank\" rel=\"noopener\">RxJavaSamples</a></li>\n<li><a href=\"https://github.com/kaushikgopal/RxJava-Android-Samples\" target=\"_blank\" rel=\"noopener\">RxJava-Android-Samples</a></li>\n</ul>\n<h5 id=\"视频\"><a href=\"#视频\" class=\"headerlink\" title=\"视频\"></a>视频</h5><ul>\n<li><a href=\"http://boolan.com/lecture/1000001243#0-tsina-1-68759-397232819ff9a47a7b7e80a40613cfe1\" target=\"_blank\" rel=\"noopener\">Android 开发者们一定会喜欢的 RxJava</a></li>\n<li><a href=\"https://realm.io/cn/news/droidcon-jake-wharton-simple-http-retrofit-2/\" target=\"_blank\" rel=\"noopener\">用 Retrofit 2 简化 HTTP 请求</a></li>\n<li><a href=\"https://realm.io/cn/news/kau-felipe-lima-adopting-rxjava-airbnb-android/\" target=\"_blank\" rel=\"noopener\">Airbnb：我们的安卓客户端是如何使用 RxJava 的</a></li>\n</ul>\n<h5 id=\"文档\"><a href=\"#文档\" class=\"headerlink\" title=\"文档\"></a>文档</h5><ul>\n<li><a href=\"https://mcxiaoke.gitbooks.io/rxdocs/content/\" target=\"_blank\" rel=\"noopener\">ReactiveX/RxJava 文档中文版</a></li>\n</ul>\n<h3 id=\"MVP-参考学习的资料\"><a href=\"#MVP-参考学习的资料\" class=\"headerlink\" title=\"MVP 参考学习的资料\"></a>MVP 参考学习的资料</h3><h5 id=\"文章-1\"><a href=\"#文章-1\" class=\"headerlink\" title=\"文章\"></a>文章</h5><ul>\n<li><a href=\"http://www.zjutkz.net/2016/04/13/%E9%80%89%E6%8B%A9%E6%81%90%E6%83%A7%E7%97%87%E7%9A%84%E7%A6%8F%E9%9F%B3%EF%BC%81%E6%95%99%E4%BD%A0%E8%AE%A4%E6%B8%85MVC%EF%BC%8CMVP%E5%92%8CMVVM/\" target=\"_blank\" rel=\"noopener\">选择恐惧症的福音, 教你认清 MVC, MVP 和 MVVM</a></li>\n<li><a href=\"http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2015/0202/2397.html\" target=\"_blank\" rel=\"noopener\">在 Android 开发中使用 MVP 模式</a></li>\n<li><a href=\"http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2016/0413/4139.html\" target=\"_blank\" rel=\"noopener\">Android官方MVP架构示例项目解析</a></li>\n</ul>\n<h5 id=\"项目-1\"><a href=\"#项目-1\" class=\"headerlink\" title=\"项目\"></a>项目</h5><ul>\n<li><a href=\"https://github.com/antoniolg/androidmvp\" target=\"_blank\" rel=\"noopener\">androidmvp</a></li>\n<li><a href=\"https://github.com/googlesamples/android-architecture/tree/todo-mvp-rxjava/\" target=\"_blank\" rel=\"noopener\">android-architecture</a></li>\n<li><a href=\"https://github.com/north2014/T-MVP\" target=\"_blank\" rel=\"noopener\">T-MVP</a></li>\n</ul>\n<h3 id=\"多主题切换\"><a href=\"#多主题切换\" class=\"headerlink\" title=\"多主题切换\"></a>多主题切换</h3><ul>\n<li><a href=\"http://www.jianshu.com/p/3b55e84742e5\" target=\"_blank\" rel=\"noopener\">知乎和简书的夜间模式实现套路</a></li>\n</ul>\n<h3 id=\"参考项目\"><a href=\"#参考项目\" class=\"headerlink\" title=\"参考项目\"></a>参考项目</h3><ul>\n<li><a href=\"https://github.com/drakeet/Meizhi\" target=\"_blank\" rel=\"noopener\">Meizhi</a> (非常棒的一个项目, 参考了挺多)</li>\n<li><a href=\"https://github.com/CycloneAxe/phphub-android\" target=\"_blank\" rel=\"noopener\">PHPHub-Android</a>（PHPHub 官方客户端）</li>\n</ul>\n<h3 id=\"UI-设计\"><a href=\"#UI-设计\" class=\"headerlink\" title=\"UI 设计\"></a>UI 设计</h3><h5 id=\"参考-App\"><a href=\"#参考-App\" class=\"headerlink\" title=\"参考 App\"></a>参考 App</h5><ul>\n<li><a href=\"http://zhihu.com/\" target=\"_blank\" rel=\"noopener\">知乎</a></li>\n<li><a href=\"http://gold.xitu.io/\" target=\"_blank\" rel=\"noopener\">掘金</a></li>\n<li><a href=\"https://github.com/CycloneAxe/phphub-android\" target=\"_blank\" rel=\"noopener\">PHPHub-Android</a></li>\n</ul>\n<h5 id=\"图标素材来源\"><a href=\"#图标素材来源\" class=\"headerlink\" title=\"图标素材来源\"></a>图标素材来源</h5><ul>\n<li><a href=\"https://icons8.com/\" target=\"_blank\" rel=\"noopener\">Ions8</a></li>\n</ul>\n<h5 id=\"Material-Design-设计规范\"><a href=\"#Material-Design-设计规范\" class=\"headerlink\" title=\"Material Design 设计规范\"></a>Material Design 设计规范</h5><ul>\n<li><a href=\"https://material.google.com/\" target=\"_blank\" rel=\"noopener\">Material design</a></li>\n<li><a href=\"https://github.com/1sters/material_design_zh_2\" target=\"_blank\" rel=\"noopener\">Material Design 中文版</a></li>\n</ul>\n<h5 id=\"设计灵感来源\"><a href=\"#设计灵感来源\" class=\"headerlink\" title=\"设计灵感来源\"></a>设计灵感来源</h5><ul>\n<li><a href=\"https://material.uplabs.com/\" target=\"_blank\" rel=\"noopener\">Uplabs</a></li>\n<li><a href=\"https://dribbble.com/\" target=\"_blank\" rel=\"noopener\">Dribbble</a></li>\n<li><a href=\"http://www.uisdc.com/\" target=\"_blank\" rel=\"noopener\">优设</a></li>\n</ul>\n<h2 id=\"感谢\"><a href=\"#感谢\" class=\"headerlink\" title=\"感谢\"></a>感谢</h2><p>感谢以上所有分享的资料以及开源项目大神们。</p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"/images/2016-01.jpeg\" alt></p>\n<p>这里记录了我开发 <a href=\"https://github.com/Freelander/Elephant\" target=\"_blank\" rel=\"noopener\">大象</a> 项目时，所学习的开发资料以及参考的开源项目，稍微整理了一下，全当笔记记录，跟大家一起分享，也许能给正在使用 RxJava + Retrofit + MVP + Material Design 框架开发的人一个参考学习，如果有人从我分享的资料当中学习到东西，那是我的荣幸，希望大家能与我一起努力。</p>\n<p>之前看到很多人都使用 RxJava+Retrofit+MVP 来开发 App, 然而自己一直没有时间来实践，最近有空就开始着手开发 PHPHub 社区第三方 Android 客戶端，至于我为什么选择了开发 PHPHub 社区，有兴趣的哥们可以到 <a href=\"https://laravel-china.org/topics/3083\" target=\"_blank\" rel=\"noopener\">这里</a> 去看看。</p>\n<h3 id=\"关于我\"><a href=\"#关于我\" class=\"headerlink\" title=\"关于我\"></a>关于我</h3><blockquote>\n<p>欢迎关注我 <a href=\"https://github.com/Freelander\" target=\"_blank\" rel=\"noopener\">Github</a> 以及 <a href=\"http://weibo.com/gaojunhuang\" target=\"_blank\" rel=\"noopener\">微博</a></p>\n</blockquote>\n<h3 id=\"大象源码链接\"><a href=\"#大象源码链接\" class=\"headerlink\" title=\"大象源码链接\"></a>大象源码链接</h3><blockquote>\n<p><a href=\"https://github.com/Freelander/Elephant\" target=\"_blank\" rel=\"noopener\">https://github.com/Freelander/Elephant</a></p>\n</blockquote>\n<h3 id=\"RxJava-与-Retrofit-参考学习的资料\"><a href=\"#RxJava-与-Retrofit-参考学习的资料\" class=\"headerlink\" title=\"RxJava 与 Retrofit 参考学习的资料\"></a>RxJava 与 Retrofit 参考学习的资料</h3><h5 id=\"文章\"><a href=\"#文章\" class=\"headerlink\" title=\"文章\"></a>文章</h5><ul>\n<li><a href=\"http://gank.io/post/560e15be2dca930e00da1083\" target=\"_blank\" rel=\"noopener\">给 Android 开发者的 RxJava 详解</a></li>\n<li><a href=\"http://gank.io/post/56e80c2c677659311bed9841\" target=\"_blank\" rel=\"noopener\">RxJava 与 Retrofit 结合的最佳实践</a></li>\n<li><a href=\"http://blog.csdn.net/theone10211024/article/details/50435325\" target=\"_blank\" rel=\"noopener\">可能是东半球最全的 RxJava 使用场景小结</a></li>\n<li><a href=\"http://www.jianshu.com/p/64aa976a46be\" target=\"_blank\" rel=\"noopener\">Rxjava 实战</a></li>\n<li><a href=\"http://wuxiaolong.me/2016/06/18/retrofits/\" target=\"_blank\" rel=\"noopener\">Android Retrofit 2.0 使用-补充篇</a></li>\n</ul>\n<h5 id=\"项目\"><a href=\"#项目\" class=\"headerlink\" title=\"项目\"></a>项目</h5><ul>\n<li><a href=\"https://github.com/rengwuxian/RxJavaSamples\" target=\"_blank\" rel=\"noopener\">RxJavaSamples</a></li>\n<li><a href=\"https://github.com/kaushikgopal/RxJava-Android-Samples\" target=\"_blank\" rel=\"noopener\">RxJava-Android-Samples</a></li>\n</ul>\n<h5 id=\"视频\"><a href=\"#视频\" class=\"headerlink\" title=\"视频\"></a>视频</h5><ul>\n<li><a href=\"http://boolan.com/lecture/1000001243#0-tsina-1-68759-397232819ff9a47a7b7e80a40613cfe1\" target=\"_blank\" rel=\"noopener\">Android 开发者们一定会喜欢的 RxJava</a></li>\n<li><a href=\"https://realm.io/cn/news/droidcon-jake-wharton-simple-http-retrofit-2/\" target=\"_blank\" rel=\"noopener\">用 Retrofit 2 简化 HTTP 请求</a></li>\n<li><a href=\"https://realm.io/cn/news/kau-felipe-lima-adopting-rxjava-airbnb-android/\" target=\"_blank\" rel=\"noopener\">Airbnb：我们的安卓客户端是如何使用 RxJava 的</a></li>\n</ul>\n<h5 id=\"文档\"><a href=\"#文档\" class=\"headerlink\" title=\"文档\"></a>文档</h5><ul>\n<li><a href=\"https://mcxiaoke.gitbooks.io/rxdocs/content/\" target=\"_blank\" rel=\"noopener\">ReactiveX/RxJava 文档中文版</a></li>\n</ul>\n<h3 id=\"MVP-参考学习的资料\"><a href=\"#MVP-参考学习的资料\" class=\"headerlink\" title=\"MVP 参考学习的资料\"></a>MVP 参考学习的资料</h3><h5 id=\"文章-1\"><a href=\"#文章-1\" class=\"headerlink\" title=\"文章\"></a>文章</h5><ul>\n<li><a href=\"http://www.zjutkz.net/2016/04/13/%E9%80%89%E6%8B%A9%E6%81%90%E6%83%A7%E7%97%87%E7%9A%84%E7%A6%8F%E9%9F%B3%EF%BC%81%E6%95%99%E4%BD%A0%E8%AE%A4%E6%B8%85MVC%EF%BC%8CMVP%E5%92%8CMVVM/\" target=\"_blank\" rel=\"noopener\">选择恐惧症的福音, 教你认清 MVC, MVP 和 MVVM</a></li>\n<li><a href=\"http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2015/0202/2397.html\" target=\"_blank\" rel=\"noopener\">在 Android 开发中使用 MVP 模式</a></li>\n<li><a href=\"http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2016/0413/4139.html\" target=\"_blank\" rel=\"noopener\">Android官方MVP架构示例项目解析</a></li>\n</ul>\n<h5 id=\"项目-1\"><a href=\"#项目-1\" class=\"headerlink\" title=\"项目\"></a>项目</h5><ul>\n<li><a href=\"https://github.com/antoniolg/androidmvp\" target=\"_blank\" rel=\"noopener\">androidmvp</a></li>\n<li><a href=\"https://github.com/googlesamples/android-architecture/tree/todo-mvp-rxjava/\" target=\"_blank\" rel=\"noopener\">android-architecture</a></li>\n<li><a href=\"https://github.com/north2014/T-MVP\" target=\"_blank\" rel=\"noopener\">T-MVP</a></li>\n</ul>\n<h3 id=\"多主题切换\"><a href=\"#多主题切换\" class=\"headerlink\" title=\"多主题切换\"></a>多主题切换</h3><ul>\n<li><a href=\"http://www.jianshu.com/p/3b55e84742e5\" target=\"_blank\" rel=\"noopener\">知乎和简书的夜间模式实现套路</a></li>\n</ul>\n<h3 id=\"参考项目\"><a href=\"#参考项目\" class=\"headerlink\" title=\"参考项目\"></a>参考项目</h3><ul>\n<li><a href=\"https://github.com/drakeet/Meizhi\" target=\"_blank\" rel=\"noopener\">Meizhi</a> (非常棒的一个项目, 参考了挺多)</li>\n<li><a href=\"https://github.com/CycloneAxe/phphub-android\" target=\"_blank\" rel=\"noopener\">PHPHub-Android</a>（PHPHub 官方客户端）</li>\n</ul>\n<h3 id=\"UI-设计\"><a href=\"#UI-设计\" class=\"headerlink\" title=\"UI 设计\"></a>UI 设计</h3><h5 id=\"参考-App\"><a href=\"#参考-App\" class=\"headerlink\" title=\"参考 App\"></a>参考 App</h5><ul>\n<li><a href=\"http://zhihu.com/\" target=\"_blank\" rel=\"noopener\">知乎</a></li>\n<li><a href=\"http://gold.xitu.io/\" target=\"_blank\" rel=\"noopener\">掘金</a></li>\n<li><a href=\"https://github.com/CycloneAxe/phphub-android\" target=\"_blank\" rel=\"noopener\">PHPHub-Android</a></li>\n</ul>\n<h5 id=\"图标素材来源\"><a href=\"#图标素材来源\" class=\"headerlink\" title=\"图标素材来源\"></a>图标素材来源</h5><ul>\n<li><a href=\"https://icons8.com/\" target=\"_blank\" rel=\"noopener\">Ions8</a></li>\n</ul>\n<h5 id=\"Material-Design-设计规范\"><a href=\"#Material-Design-设计规范\" class=\"headerlink\" title=\"Material Design 设计规范\"></a>Material Design 设计规范</h5><ul>\n<li><a href=\"https://material.google.com/\" target=\"_blank\" rel=\"noopener\">Material design</a></li>\n<li><a href=\"https://github.com/1sters/material_design_zh_2\" target=\"_blank\" rel=\"noopener\">Material Design 中文版</a></li>\n</ul>\n<h5 id=\"设计灵感来源\"><a href=\"#设计灵感来源\" class=\"headerlink\" title=\"设计灵感来源\"></a>设计灵感来源</h5><ul>\n<li><a href=\"https://material.uplabs.com/\" target=\"_blank\" rel=\"noopener\">Uplabs</a></li>\n<li><a href=\"https://dribbble.com/\" target=\"_blank\" rel=\"noopener\">Dribbble</a></li>\n<li><a href=\"http://www.uisdc.com/\" target=\"_blank\" rel=\"noopener\">优设</a></li>\n</ul>\n<h2 id=\"感谢\"><a href=\"#感谢\" class=\"headerlink\" title=\"感谢\"></a>感谢</h2><p>感谢以上所有分享的资料以及开源项目大神们。</p>\n"},{"title":"终极 Apk 瘦身优化","date":"2019-09-10T15:19:55.000Z","_content":"\n# 前言\n\nApk 随着我们开发迭代逐渐的增大，越来越臃肿肥大，在下载安装过程中，它们耗费的流量会越多，安装等待时间也会越长，这就意味着下载转化率越低，进而影响到广告效果。\n\n因此 Apk 瘦身是优化的重要一部分，开发有必要定期对 Apk 进行瘦身优化。\n\n# 分析\n\n使用 Android Studio Analyze APK 进行分析，首先构建出一个 release 包，然后拖到 AS 开始分析。\n\n![image](/images/2019/09/01.png)\n\n从上图分析结果，可以明显看出 Apk 的大小主要是 So 文件以及资源文件占据。\n\n# 开始瘦身\n\n## Apk 瘦身之 So 文件\n\n还没有了解 So 文件的同学，可以看看这篇文章 [地址](http://allenfeng.com/2016/11/06/what-you-should-know-about-android-abi-and-so/)。\n\n再看看这篇文章 [地址](https://www.cnblogs.com/didikee/p/6683415.html)，采集了市场主流多款 App 进行分析。\n\n\n指令集 | 厂商 | 位数 | 描述\n---|---|---|---\narm64-v8a | ARM | 64 | 第 8 代，64 位 ARM 处理器，很少设备，如：三星 Galaxy S6、华为 Mate 8\narmeabi-v7a | ARM | 32 | 第 7 代及以上的 ARM 处理器。2011 年以后，大部分的生产的 Android 设备都使用它（目前主流）\narmeabi | ARM | 32 | 第 5、6 代的 ARM 处理器，早期的手机使用的比较多\nx86 | Intel | 32 | 平板、模拟器（x86设备也支持armeabi-v7a和armeabi）\nx86_64 | Intel | 64 | 64位的平板\n\n通过上面查找到的资料，综合评估了下，决定项目只保留 armeabi-v7a 格式的 So 文件。\n\n修改主工程 build.gradle 下的 abiFilters：\n\n```\nandroid {\n    // Some other configuration here...\n    defaultConfig {\n        ndk {\n            abiFilters 'armeabi-v7a'\n        }\n    }\n}\n```\n\n## Apk 瘦身之资源\n\n### **移除无用的资源文件**\n\n随着版本迭代，会产生很多一些无用资源，``虽然在 build.gradle 中设置 shrinkResources 为 true 后，每次打包的时候就会自动排除无用的资源。但好像如果一些没用的代码对某个资源引用，貌似不会被移除``。\n\nAndroid Studio 提供了一键清除无用资源文件功能\n\n> 在项目 app 文件下右键，Refactor --> Remove Unused Resources..\n\n![image](/images/2019/09/02.png)\n\n我尝试勾选 ``Delete unused @id declarations too`` 发现布局有使用的 id 被检查到没有使用，因此我建议不要勾选这个选项。\n\n为了安全建议大家执行操作前先 Preivew 下。\n\n单独对某个文件夹下的资源进行检查方法：\n\n> 将光标定位在检查的文件夹 --> Analyze --> Run Inspection by name --> unused resource\n\n![image](/images/2019/09/03.png)\n\n``在检查的时候，发现没有检查出未使用的图片资源，但是有些图片确实是没有使用，尝试了好几次，最后发现原来是我自定义的 lint 配置，禁止检查 UnusedResources 资源了，因此在使用此功能时先注释掉原来自定义的 lint 规则。``\n\n```\nlintOptions {\n        lintConfig file(\"gen/bgquality/lint/lint.xml\")\n        disable 'UnusedResources'\n    }\n```\n\n``使用 Lint 工具检查``\n\n详细使用介绍可看这篇文章 [地址](https://juejin.im/entry/586f7ec1ac502e006c0c2070#android-studio-%E4%B8%AD%E4%BD%BF%E7%94%A8-lint)\n\n### **压缩图片资源**\n\n有些设计师从 PS 导出图后就直接发给开发了，因此需要我们自己压缩一次。推荐使用一个简单实用压缩工具 [Tinypng](https://tinypng.com/)。\n\n另外有一个比较专业压缩工具 [Squoosh](https://squoosh.app/)，该工具是 Google 推出的一款免费开源图片压缩工具，有很多可定制化功能，例如图片尺寸调整、压缩比例调整、图片格式调整等等，如果你对压缩图片有比较多要求的时候，可选择这个工具。\n\n### **使用 WebP 图片**\n\n可以到知乎看下这篇文章 [WebP 相对于 PNG、JPG 有什么优势？](https://www.zhihu.com/question/27201061)\n\n``需要注意：``\n> Android 从 4.0 才开始 WebP 的原生支持，意味着要兼容 4.0 以下机型需要添加适配库；当然现在市面上适配 4.0 以下的应用已经很少了。\nAndroid 4.2.1+ 才支持显示含透明度的 WebP，因此最低版本小于 4.2.1 的 App 也不是想用就能用的。\n\n建议大家在 Google Analytics 平台查看自己应用在 4.2.1 以下版本用户量多少，评估是否可以升上去。\n\n**如何转换**\n\n> 在 AS 里面提供了支持一键转换 WebP 格式功能，需要转换的图片右键 --> Convert to Webp...\n\n![image](/images/2019/09/04.png)\n\n当然你也可以外部工具对图片进行 WebP 格式转换，推荐使用 [Squoosh](https://squoosh.app/)。\n\n### **适配多套分辨率图片**\n\n根据应用用户量使用的屏幕分辨率数据来，来决定你最终使用哪几套图片，从数据上来看目前设备分辨率大多数都是 1080x2094 和 1080x1920，因此这里我只用了 ``xxhdpi`` 和 ``xxxhdpi`` 两套资源。\n\n下面是各套资源对应设备的分辨率以及像素信息表格：\n\n类型 | 分辨率(px) | 屏幕像素密度(dpi)\n---|---|----\nldpi |  200x320 | 120\nmdpi | 320x480 | 160\nhdpi | 480x800 | 240\nxhdpi | 720x1280 | 320\nxxhdpi | 960x1600 | 480\nxxxhdpi | 1440x2560 | 640\n\n数据来自：http://iconhandbook.co.uk/reference/chart/android/\n\n## Apk 瘦身之代码混淆\n\n开启代码混淆能将代码中的类、字段、方法的名字改为简短、无意义的名字；移除未使用的类、字段、方法、属性等，因此可以减少 Dex 文件的大小。\n\n```\nandroid {\n    buildTypes {\n        release {\n            // 开启混淆\n            minifyEnabled true\n            proguardFiles getDefaultProguardFile(‘proguard-android.txt'),\n                    'proguard-rules.pro'\n        }\n    }\n    ...\n}\n```\n\n## Apk 瘦身之开启 shrinkResources\n\n开启 shrinkResources 可以移除无用资源，依赖于 minifyEnabled，必须和 minifyEnabled 一起用，就是打开 shrinkResources 也必须打开 minifyEnabled。\n\n```\nandroid {\n    buildTypes {\n        release {\n            // 开启混淆\n            minifyEnabled true\n            // 移除无用资源\n            shrinkResources true\n            \n            proguardFiles getDefaultProguardFile(‘proguard-android.txt'),\n                    'proguard-rules.pro'\n        }\n    }\n    ...\n}\n```\n\n这里开启我发现有些未使用的资源无法移除的，可能是一些没用的代码对一些资源进行引用，导致没有移除，建议大家还是使用 ``Remove Unused Resources`` 来检查。\n\n## Apk 瘦身之配置 resConfigs\n\n配置应用使用哪些资源，例如你的应用只支持英语和阿拉伯语，那么可以这样配置：\n\n```\nandroid {\n    defaultConfig {\n        ...\n        // 语言资源，只支持英语和阿拉伯语\n        resConfigs \"en\",\"ar\"\n        // 图片资源，只支持xhdpi和xxhdpi屏幕的资源\n        resConfigs \"xxhdpi\",\"xxxhdpi\" \n    }\n}\n```\n\n# 最后\n\n看下瘦身后的效果，比之前减少了 2.5MB。\n\n![image](/images/2019/09/05.png)\n\n# 参考链接\n\n更多瘦身优化的方法：\n\nhttps://juejin.im/post/59113583ac502e450280e5f3#heading-25\n\n\n","source":"_posts/android-reduce-apk-size.md","raw":"---\ntitle: 终极 Apk 瘦身优化\ndate: 2019-09-10 23:19:55\ntags: [Android]\n---\n\n# 前言\n\nApk 随着我们开发迭代逐渐的增大，越来越臃肿肥大，在下载安装过程中，它们耗费的流量会越多，安装等待时间也会越长，这就意味着下载转化率越低，进而影响到广告效果。\n\n因此 Apk 瘦身是优化的重要一部分，开发有必要定期对 Apk 进行瘦身优化。\n\n# 分析\n\n使用 Android Studio Analyze APK 进行分析，首先构建出一个 release 包，然后拖到 AS 开始分析。\n\n![image](/images/2019/09/01.png)\n\n从上图分析结果，可以明显看出 Apk 的大小主要是 So 文件以及资源文件占据。\n\n# 开始瘦身\n\n## Apk 瘦身之 So 文件\n\n还没有了解 So 文件的同学，可以看看这篇文章 [地址](http://allenfeng.com/2016/11/06/what-you-should-know-about-android-abi-and-so/)。\n\n再看看这篇文章 [地址](https://www.cnblogs.com/didikee/p/6683415.html)，采集了市场主流多款 App 进行分析。\n\n\n指令集 | 厂商 | 位数 | 描述\n---|---|---|---\narm64-v8a | ARM | 64 | 第 8 代，64 位 ARM 处理器，很少设备，如：三星 Galaxy S6、华为 Mate 8\narmeabi-v7a | ARM | 32 | 第 7 代及以上的 ARM 处理器。2011 年以后，大部分的生产的 Android 设备都使用它（目前主流）\narmeabi | ARM | 32 | 第 5、6 代的 ARM 处理器，早期的手机使用的比较多\nx86 | Intel | 32 | 平板、模拟器（x86设备也支持armeabi-v7a和armeabi）\nx86_64 | Intel | 64 | 64位的平板\n\n通过上面查找到的资料，综合评估了下，决定项目只保留 armeabi-v7a 格式的 So 文件。\n\n修改主工程 build.gradle 下的 abiFilters：\n\n```\nandroid {\n    // Some other configuration here...\n    defaultConfig {\n        ndk {\n            abiFilters 'armeabi-v7a'\n        }\n    }\n}\n```\n\n## Apk 瘦身之资源\n\n### **移除无用的资源文件**\n\n随着版本迭代，会产生很多一些无用资源，``虽然在 build.gradle 中设置 shrinkResources 为 true 后，每次打包的时候就会自动排除无用的资源。但好像如果一些没用的代码对某个资源引用，貌似不会被移除``。\n\nAndroid Studio 提供了一键清除无用资源文件功能\n\n> 在项目 app 文件下右键，Refactor --> Remove Unused Resources..\n\n![image](/images/2019/09/02.png)\n\n我尝试勾选 ``Delete unused @id declarations too`` 发现布局有使用的 id 被检查到没有使用，因此我建议不要勾选这个选项。\n\n为了安全建议大家执行操作前先 Preivew 下。\n\n单独对某个文件夹下的资源进行检查方法：\n\n> 将光标定位在检查的文件夹 --> Analyze --> Run Inspection by name --> unused resource\n\n![image](/images/2019/09/03.png)\n\n``在检查的时候，发现没有检查出未使用的图片资源，但是有些图片确实是没有使用，尝试了好几次，最后发现原来是我自定义的 lint 配置，禁止检查 UnusedResources 资源了，因此在使用此功能时先注释掉原来自定义的 lint 规则。``\n\n```\nlintOptions {\n        lintConfig file(\"gen/bgquality/lint/lint.xml\")\n        disable 'UnusedResources'\n    }\n```\n\n``使用 Lint 工具检查``\n\n详细使用介绍可看这篇文章 [地址](https://juejin.im/entry/586f7ec1ac502e006c0c2070#android-studio-%E4%B8%AD%E4%BD%BF%E7%94%A8-lint)\n\n### **压缩图片资源**\n\n有些设计师从 PS 导出图后就直接发给开发了，因此需要我们自己压缩一次。推荐使用一个简单实用压缩工具 [Tinypng](https://tinypng.com/)。\n\n另外有一个比较专业压缩工具 [Squoosh](https://squoosh.app/)，该工具是 Google 推出的一款免费开源图片压缩工具，有很多可定制化功能，例如图片尺寸调整、压缩比例调整、图片格式调整等等，如果你对压缩图片有比较多要求的时候，可选择这个工具。\n\n### **使用 WebP 图片**\n\n可以到知乎看下这篇文章 [WebP 相对于 PNG、JPG 有什么优势？](https://www.zhihu.com/question/27201061)\n\n``需要注意：``\n> Android 从 4.0 才开始 WebP 的原生支持，意味着要兼容 4.0 以下机型需要添加适配库；当然现在市面上适配 4.0 以下的应用已经很少了。\nAndroid 4.2.1+ 才支持显示含透明度的 WebP，因此最低版本小于 4.2.1 的 App 也不是想用就能用的。\n\n建议大家在 Google Analytics 平台查看自己应用在 4.2.1 以下版本用户量多少，评估是否可以升上去。\n\n**如何转换**\n\n> 在 AS 里面提供了支持一键转换 WebP 格式功能，需要转换的图片右键 --> Convert to Webp...\n\n![image](/images/2019/09/04.png)\n\n当然你也可以外部工具对图片进行 WebP 格式转换，推荐使用 [Squoosh](https://squoosh.app/)。\n\n### **适配多套分辨率图片**\n\n根据应用用户量使用的屏幕分辨率数据来，来决定你最终使用哪几套图片，从数据上来看目前设备分辨率大多数都是 1080x2094 和 1080x1920，因此这里我只用了 ``xxhdpi`` 和 ``xxxhdpi`` 两套资源。\n\n下面是各套资源对应设备的分辨率以及像素信息表格：\n\n类型 | 分辨率(px) | 屏幕像素密度(dpi)\n---|---|----\nldpi |  200x320 | 120\nmdpi | 320x480 | 160\nhdpi | 480x800 | 240\nxhdpi | 720x1280 | 320\nxxhdpi | 960x1600 | 480\nxxxhdpi | 1440x2560 | 640\n\n数据来自：http://iconhandbook.co.uk/reference/chart/android/\n\n## Apk 瘦身之代码混淆\n\n开启代码混淆能将代码中的类、字段、方法的名字改为简短、无意义的名字；移除未使用的类、字段、方法、属性等，因此可以减少 Dex 文件的大小。\n\n```\nandroid {\n    buildTypes {\n        release {\n            // 开启混淆\n            minifyEnabled true\n            proguardFiles getDefaultProguardFile(‘proguard-android.txt'),\n                    'proguard-rules.pro'\n        }\n    }\n    ...\n}\n```\n\n## Apk 瘦身之开启 shrinkResources\n\n开启 shrinkResources 可以移除无用资源，依赖于 minifyEnabled，必须和 minifyEnabled 一起用，就是打开 shrinkResources 也必须打开 minifyEnabled。\n\n```\nandroid {\n    buildTypes {\n        release {\n            // 开启混淆\n            minifyEnabled true\n            // 移除无用资源\n            shrinkResources true\n            \n            proguardFiles getDefaultProguardFile(‘proguard-android.txt'),\n                    'proguard-rules.pro'\n        }\n    }\n    ...\n}\n```\n\n这里开启我发现有些未使用的资源无法移除的，可能是一些没用的代码对一些资源进行引用，导致没有移除，建议大家还是使用 ``Remove Unused Resources`` 来检查。\n\n## Apk 瘦身之配置 resConfigs\n\n配置应用使用哪些资源，例如你的应用只支持英语和阿拉伯语，那么可以这样配置：\n\n```\nandroid {\n    defaultConfig {\n        ...\n        // 语言资源，只支持英语和阿拉伯语\n        resConfigs \"en\",\"ar\"\n        // 图片资源，只支持xhdpi和xxhdpi屏幕的资源\n        resConfigs \"xxhdpi\",\"xxxhdpi\" \n    }\n}\n```\n\n# 最后\n\n看下瘦身后的效果，比之前减少了 2.5MB。\n\n![image](/images/2019/09/05.png)\n\n# 参考链接\n\n更多瘦身优化的方法：\n\nhttps://juejin.im/post/59113583ac502e450280e5f3#heading-25\n\n\n","slug":"android-reduce-apk-size","published":1,"updated":"2019-09-10T15:36:54.474Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cks0kfic80007w3yzzu0k47gi","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>Apk 随着我们开发迭代逐渐的增大，越来越臃肿肥大，在下载安装过程中，它们耗费的流量会越多，安装等待时间也会越长，这就意味着下载转化率越低，进而影响到广告效果。</p>\n<p>因此 Apk 瘦身是优化的重要一部分，开发有必要定期对 Apk 进行瘦身优化。</p>\n<h1 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h1><p>使用 Android Studio Analyze APK 进行分析，首先构建出一个 release 包，然后拖到 AS 开始分析。</p>\n<p><img src=\"/images/2019/09/01.png\" alt=\"image\"></p>\n<p>从上图分析结果，可以明显看出 Apk 的大小主要是 So 文件以及资源文件占据。</p>\n<h1 id=\"开始瘦身\"><a href=\"#开始瘦身\" class=\"headerlink\" title=\"开始瘦身\"></a>开始瘦身</h1><h2 id=\"Apk-瘦身之-So-文件\"><a href=\"#Apk-瘦身之-So-文件\" class=\"headerlink\" title=\"Apk 瘦身之 So 文件\"></a>Apk 瘦身之 So 文件</h2><p>还没有了解 So 文件的同学，可以看看这篇文章 <a href=\"http://allenfeng.com/2016/11/06/what-you-should-know-about-android-abi-and-so/\" target=\"_blank\" rel=\"noopener\">地址</a>。</p>\n<p>再看看这篇文章 <a href=\"https://www.cnblogs.com/didikee/p/6683415.html\" target=\"_blank\" rel=\"noopener\">地址</a>，采集了市场主流多款 App 进行分析。</p>\n<table>\n<thead>\n<tr>\n<th>指令集</th>\n<th>厂商</th>\n<th>位数</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>arm64-v8a</td>\n<td>ARM</td>\n<td>64</td>\n<td>第 8 代，64 位 ARM 处理器，很少设备，如：三星 Galaxy S6、华为 Mate 8</td>\n</tr>\n<tr>\n<td>armeabi-v7a</td>\n<td>ARM</td>\n<td>32</td>\n<td>第 7 代及以上的 ARM 处理器。2011 年以后，大部分的生产的 Android 设备都使用它（目前主流）</td>\n</tr>\n<tr>\n<td>armeabi</td>\n<td>ARM</td>\n<td>32</td>\n<td>第 5、6 代的 ARM 处理器，早期的手机使用的比较多</td>\n</tr>\n<tr>\n<td>x86</td>\n<td>Intel</td>\n<td>32</td>\n<td>平板、模拟器（x86设备也支持armeabi-v7a和armeabi）</td>\n</tr>\n<tr>\n<td>x86_64</td>\n<td>Intel</td>\n<td>64</td>\n<td>64位的平板</td>\n</tr>\n</tbody></table>\n<p>通过上面查找到的资料，综合评估了下，决定项目只保留 armeabi-v7a 格式的 So 文件。</p>\n<p>修改主工程 build.gradle 下的 abiFilters：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">android &#123;</span><br><span class=\"line\">    // Some other configuration here...</span><br><span class=\"line\">    defaultConfig &#123;</span><br><span class=\"line\">        ndk &#123;</span><br><span class=\"line\">            abiFilters &apos;armeabi-v7a&apos;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Apk-瘦身之资源\"><a href=\"#Apk-瘦身之资源\" class=\"headerlink\" title=\"Apk 瘦身之资源\"></a>Apk 瘦身之资源</h2><h3 id=\"移除无用的资源文件\"><a href=\"#移除无用的资源文件\" class=\"headerlink\" title=\"移除无用的资源文件\"></a><strong>移除无用的资源文件</strong></h3><p>随着版本迭代，会产生很多一些无用资源，<code>虽然在 build.gradle 中设置 shrinkResources 为 true 后，每次打包的时候就会自动排除无用的资源。但好像如果一些没用的代码对某个资源引用，貌似不会被移除</code>。</p>\n<p>Android Studio 提供了一键清除无用资源文件功能</p>\n<blockquote>\n<p>在项目 app 文件下右键，Refactor –&gt; Remove Unused Resources..</p>\n</blockquote>\n<p><img src=\"/images/2019/09/02.png\" alt=\"image\"></p>\n<p>我尝试勾选 <code>Delete unused @id declarations too</code> 发现布局有使用的 id 被检查到没有使用，因此我建议不要勾选这个选项。</p>\n<p>为了安全建议大家执行操作前先 Preivew 下。</p>\n<p>单独对某个文件夹下的资源进行检查方法：</p>\n<blockquote>\n<p>将光标定位在检查的文件夹 –&gt; Analyze –&gt; Run Inspection by name –&gt; unused resource</p>\n</blockquote>\n<p><img src=\"/images/2019/09/03.png\" alt=\"image\"></p>\n<p><code>在检查的时候，发现没有检查出未使用的图片资源，但是有些图片确实是没有使用，尝试了好几次，最后发现原来是我自定义的 lint 配置，禁止检查 UnusedResources 资源了，因此在使用此功能时先注释掉原来自定义的 lint 规则。</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lintOptions &#123;</span><br><span class=\"line\">        lintConfig file(&quot;gen/bgquality/lint/lint.xml&quot;)</span><br><span class=\"line\">        disable &apos;UnusedResources&apos;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>使用 Lint 工具检查</code></p>\n<p>详细使用介绍可看这篇文章 <a href=\"https://juejin.im/entry/586f7ec1ac502e006c0c2070#android-studio-%E4%B8%AD%E4%BD%BF%E7%94%A8-lint\" target=\"_blank\" rel=\"noopener\">地址</a></p>\n<h3 id=\"压缩图片资源\"><a href=\"#压缩图片资源\" class=\"headerlink\" title=\"压缩图片资源\"></a><strong>压缩图片资源</strong></h3><p>有些设计师从 PS 导出图后就直接发给开发了，因此需要我们自己压缩一次。推荐使用一个简单实用压缩工具 <a href=\"https://tinypng.com/\" target=\"_blank\" rel=\"noopener\">Tinypng</a>。</p>\n<p>另外有一个比较专业压缩工具 <a href=\"https://squoosh.app/\" target=\"_blank\" rel=\"noopener\">Squoosh</a>，该工具是 Google 推出的一款免费开源图片压缩工具，有很多可定制化功能，例如图片尺寸调整、压缩比例调整、图片格式调整等等，如果你对压缩图片有比较多要求的时候，可选择这个工具。</p>\n<h3 id=\"使用-WebP-图片\"><a href=\"#使用-WebP-图片\" class=\"headerlink\" title=\"使用 WebP 图片\"></a><strong>使用 WebP 图片</strong></h3><p>可以到知乎看下这篇文章 <a href=\"https://www.zhihu.com/question/27201061\" target=\"_blank\" rel=\"noopener\">WebP 相对于 PNG、JPG 有什么优势？</a></p>\n<p><code>需要注意：</code></p>\n<blockquote>\n<p>Android 从 4.0 才开始 WebP 的原生支持，意味着要兼容 4.0 以下机型需要添加适配库；当然现在市面上适配 4.0 以下的应用已经很少了。<br>Android 4.2.1+ 才支持显示含透明度的 WebP，因此最低版本小于 4.2.1 的 App 也不是想用就能用的。</p>\n</blockquote>\n<p>建议大家在 Google Analytics 平台查看自己应用在 4.2.1 以下版本用户量多少，评估是否可以升上去。</p>\n<p><strong>如何转换</strong></p>\n<blockquote>\n<p>在 AS 里面提供了支持一键转换 WebP 格式功能，需要转换的图片右键 –&gt; Convert to Webp…</p>\n</blockquote>\n<p><img src=\"/images/2019/09/04.png\" alt=\"image\"></p>\n<p>当然你也可以外部工具对图片进行 WebP 格式转换，推荐使用 <a href=\"https://squoosh.app/\" target=\"_blank\" rel=\"noopener\">Squoosh</a>。</p>\n<h3 id=\"适配多套分辨率图片\"><a href=\"#适配多套分辨率图片\" class=\"headerlink\" title=\"适配多套分辨率图片\"></a><strong>适配多套分辨率图片</strong></h3><p>根据应用用户量使用的屏幕分辨率数据来，来决定你最终使用哪几套图片，从数据上来看目前设备分辨率大多数都是 1080x2094 和 1080x1920，因此这里我只用了 <code>xxhdpi</code> 和 <code>xxxhdpi</code> 两套资源。</p>\n<p>下面是各套资源对应设备的分辨率以及像素信息表格：</p>\n<table>\n<thead>\n<tr>\n<th>类型</th>\n<th>分辨率(px)</th>\n<th>屏幕像素密度(dpi)</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>ldpi</td>\n<td>200x320</td>\n<td>120</td>\n</tr>\n<tr>\n<td>mdpi</td>\n<td>320x480</td>\n<td>160</td>\n</tr>\n<tr>\n<td>hdpi</td>\n<td>480x800</td>\n<td>240</td>\n</tr>\n<tr>\n<td>xhdpi</td>\n<td>720x1280</td>\n<td>320</td>\n</tr>\n<tr>\n<td>xxhdpi</td>\n<td>960x1600</td>\n<td>480</td>\n</tr>\n<tr>\n<td>xxxhdpi</td>\n<td>1440x2560</td>\n<td>640</td>\n</tr>\n</tbody></table>\n<p>数据来自：<a href=\"http://iconhandbook.co.uk/reference/chart/android/\" target=\"_blank\" rel=\"noopener\">http://iconhandbook.co.uk/reference/chart/android/</a></p>\n<h2 id=\"Apk-瘦身之代码混淆\"><a href=\"#Apk-瘦身之代码混淆\" class=\"headerlink\" title=\"Apk 瘦身之代码混淆\"></a>Apk 瘦身之代码混淆</h2><p>开启代码混淆能将代码中的类、字段、方法的名字改为简短、无意义的名字；移除未使用的类、字段、方法、属性等，因此可以减少 Dex 文件的大小。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">android &#123;</span><br><span class=\"line\">    buildTypes &#123;</span><br><span class=\"line\">        release &#123;</span><br><span class=\"line\">            // 开启混淆</span><br><span class=\"line\">            minifyEnabled true</span><br><span class=\"line\">            proguardFiles getDefaultProguardFile(‘proguard-android.txt&apos;),</span><br><span class=\"line\">                    &apos;proguard-rules.pro&apos;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Apk-瘦身之开启-shrinkResources\"><a href=\"#Apk-瘦身之开启-shrinkResources\" class=\"headerlink\" title=\"Apk 瘦身之开启 shrinkResources\"></a>Apk 瘦身之开启 shrinkResources</h2><p>开启 shrinkResources 可以移除无用资源，依赖于 minifyEnabled，必须和 minifyEnabled 一起用，就是打开 shrinkResources 也必须打开 minifyEnabled。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">android &#123;</span><br><span class=\"line\">    buildTypes &#123;</span><br><span class=\"line\">        release &#123;</span><br><span class=\"line\">            // 开启混淆</span><br><span class=\"line\">            minifyEnabled true</span><br><span class=\"line\">            // 移除无用资源</span><br><span class=\"line\">            shrinkResources true</span><br><span class=\"line\">            </span><br><span class=\"line\">            proguardFiles getDefaultProguardFile(‘proguard-android.txt&apos;),</span><br><span class=\"line\">                    &apos;proguard-rules.pro&apos;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里开启我发现有些未使用的资源无法移除的，可能是一些没用的代码对一些资源进行引用，导致没有移除，建议大家还是使用 <code>Remove Unused Resources</code> 来检查。</p>\n<h2 id=\"Apk-瘦身之配置-resConfigs\"><a href=\"#Apk-瘦身之配置-resConfigs\" class=\"headerlink\" title=\"Apk 瘦身之配置 resConfigs\"></a>Apk 瘦身之配置 resConfigs</h2><p>配置应用使用哪些资源，例如你的应用只支持英语和阿拉伯语，那么可以这样配置：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">android &#123;</span><br><span class=\"line\">    defaultConfig &#123;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">        // 语言资源，只支持英语和阿拉伯语</span><br><span class=\"line\">        resConfigs &quot;en&quot;,&quot;ar&quot;</span><br><span class=\"line\">        // 图片资源，只支持xhdpi和xxhdpi屏幕的资源</span><br><span class=\"line\">        resConfigs &quot;xxhdpi&quot;,&quot;xxxhdpi&quot; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h1><p>看下瘦身后的效果，比之前减少了 2.5MB。</p>\n<p><img src=\"/images/2019/09/05.png\" alt=\"image\"></p>\n<h1 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h1><p>更多瘦身优化的方法：</p>\n<p><a href=\"https://juejin.im/post/59113583ac502e450280e5f3#heading-25\" target=\"_blank\" rel=\"noopener\">https://juejin.im/post/59113583ac502e450280e5f3#heading-25</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>Apk 随着我们开发迭代逐渐的增大，越来越臃肿肥大，在下载安装过程中，它们耗费的流量会越多，安装等待时间也会越长，这就意味着下载转化率越低，进而影响到广告效果。</p>\n<p>因此 Apk 瘦身是优化的重要一部分，开发有必要定期对 Apk 进行瘦身优化。</p>\n<h1 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h1><p>使用 Android Studio Analyze APK 进行分析，首先构建出一个 release 包，然后拖到 AS 开始分析。</p>\n<p><img src=\"/images/2019/09/01.png\" alt=\"image\"></p>\n<p>从上图分析结果，可以明显看出 Apk 的大小主要是 So 文件以及资源文件占据。</p>\n<h1 id=\"开始瘦身\"><a href=\"#开始瘦身\" class=\"headerlink\" title=\"开始瘦身\"></a>开始瘦身</h1><h2 id=\"Apk-瘦身之-So-文件\"><a href=\"#Apk-瘦身之-So-文件\" class=\"headerlink\" title=\"Apk 瘦身之 So 文件\"></a>Apk 瘦身之 So 文件</h2><p>还没有了解 So 文件的同学，可以看看这篇文章 <a href=\"http://allenfeng.com/2016/11/06/what-you-should-know-about-android-abi-and-so/\" target=\"_blank\" rel=\"noopener\">地址</a>。</p>\n<p>再看看这篇文章 <a href=\"https://www.cnblogs.com/didikee/p/6683415.html\" target=\"_blank\" rel=\"noopener\">地址</a>，采集了市场主流多款 App 进行分析。</p>\n<table>\n<thead>\n<tr>\n<th>指令集</th>\n<th>厂商</th>\n<th>位数</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>arm64-v8a</td>\n<td>ARM</td>\n<td>64</td>\n<td>第 8 代，64 位 ARM 处理器，很少设备，如：三星 Galaxy S6、华为 Mate 8</td>\n</tr>\n<tr>\n<td>armeabi-v7a</td>\n<td>ARM</td>\n<td>32</td>\n<td>第 7 代及以上的 ARM 处理器。2011 年以后，大部分的生产的 Android 设备都使用它（目前主流）</td>\n</tr>\n<tr>\n<td>armeabi</td>\n<td>ARM</td>\n<td>32</td>\n<td>第 5、6 代的 ARM 处理器，早期的手机使用的比较多</td>\n</tr>\n<tr>\n<td>x86</td>\n<td>Intel</td>\n<td>32</td>\n<td>平板、模拟器（x86设备也支持armeabi-v7a和armeabi）</td>\n</tr>\n<tr>\n<td>x86_64</td>\n<td>Intel</td>\n<td>64</td>\n<td>64位的平板</td>\n</tr>\n</tbody></table>\n<p>通过上面查找到的资料，综合评估了下，决定项目只保留 armeabi-v7a 格式的 So 文件。</p>\n<p>修改主工程 build.gradle 下的 abiFilters：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">android &#123;</span><br><span class=\"line\">    // Some other configuration here...</span><br><span class=\"line\">    defaultConfig &#123;</span><br><span class=\"line\">        ndk &#123;</span><br><span class=\"line\">            abiFilters &apos;armeabi-v7a&apos;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Apk-瘦身之资源\"><a href=\"#Apk-瘦身之资源\" class=\"headerlink\" title=\"Apk 瘦身之资源\"></a>Apk 瘦身之资源</h2><h3 id=\"移除无用的资源文件\"><a href=\"#移除无用的资源文件\" class=\"headerlink\" title=\"移除无用的资源文件\"></a><strong>移除无用的资源文件</strong></h3><p>随着版本迭代，会产生很多一些无用资源，<code>虽然在 build.gradle 中设置 shrinkResources 为 true 后，每次打包的时候就会自动排除无用的资源。但好像如果一些没用的代码对某个资源引用，貌似不会被移除</code>。</p>\n<p>Android Studio 提供了一键清除无用资源文件功能</p>\n<blockquote>\n<p>在项目 app 文件下右键，Refactor –&gt; Remove Unused Resources..</p>\n</blockquote>\n<p><img src=\"/images/2019/09/02.png\" alt=\"image\"></p>\n<p>我尝试勾选 <code>Delete unused @id declarations too</code> 发现布局有使用的 id 被检查到没有使用，因此我建议不要勾选这个选项。</p>\n<p>为了安全建议大家执行操作前先 Preivew 下。</p>\n<p>单独对某个文件夹下的资源进行检查方法：</p>\n<blockquote>\n<p>将光标定位在检查的文件夹 –&gt; Analyze –&gt; Run Inspection by name –&gt; unused resource</p>\n</blockquote>\n<p><img src=\"/images/2019/09/03.png\" alt=\"image\"></p>\n<p><code>在检查的时候，发现没有检查出未使用的图片资源，但是有些图片确实是没有使用，尝试了好几次，最后发现原来是我自定义的 lint 配置，禁止检查 UnusedResources 资源了，因此在使用此功能时先注释掉原来自定义的 lint 规则。</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lintOptions &#123;</span><br><span class=\"line\">        lintConfig file(&quot;gen/bgquality/lint/lint.xml&quot;)</span><br><span class=\"line\">        disable &apos;UnusedResources&apos;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>使用 Lint 工具检查</code></p>\n<p>详细使用介绍可看这篇文章 <a href=\"https://juejin.im/entry/586f7ec1ac502e006c0c2070#android-studio-%E4%B8%AD%E4%BD%BF%E7%94%A8-lint\" target=\"_blank\" rel=\"noopener\">地址</a></p>\n<h3 id=\"压缩图片资源\"><a href=\"#压缩图片资源\" class=\"headerlink\" title=\"压缩图片资源\"></a><strong>压缩图片资源</strong></h3><p>有些设计师从 PS 导出图后就直接发给开发了，因此需要我们自己压缩一次。推荐使用一个简单实用压缩工具 <a href=\"https://tinypng.com/\" target=\"_blank\" rel=\"noopener\">Tinypng</a>。</p>\n<p>另外有一个比较专业压缩工具 <a href=\"https://squoosh.app/\" target=\"_blank\" rel=\"noopener\">Squoosh</a>，该工具是 Google 推出的一款免费开源图片压缩工具，有很多可定制化功能，例如图片尺寸调整、压缩比例调整、图片格式调整等等，如果你对压缩图片有比较多要求的时候，可选择这个工具。</p>\n<h3 id=\"使用-WebP-图片\"><a href=\"#使用-WebP-图片\" class=\"headerlink\" title=\"使用 WebP 图片\"></a><strong>使用 WebP 图片</strong></h3><p>可以到知乎看下这篇文章 <a href=\"https://www.zhihu.com/question/27201061\" target=\"_blank\" rel=\"noopener\">WebP 相对于 PNG、JPG 有什么优势？</a></p>\n<p><code>需要注意：</code></p>\n<blockquote>\n<p>Android 从 4.0 才开始 WebP 的原生支持，意味着要兼容 4.0 以下机型需要添加适配库；当然现在市面上适配 4.0 以下的应用已经很少了。<br>Android 4.2.1+ 才支持显示含透明度的 WebP，因此最低版本小于 4.2.1 的 App 也不是想用就能用的。</p>\n</blockquote>\n<p>建议大家在 Google Analytics 平台查看自己应用在 4.2.1 以下版本用户量多少，评估是否可以升上去。</p>\n<p><strong>如何转换</strong></p>\n<blockquote>\n<p>在 AS 里面提供了支持一键转换 WebP 格式功能，需要转换的图片右键 –&gt; Convert to Webp…</p>\n</blockquote>\n<p><img src=\"/images/2019/09/04.png\" alt=\"image\"></p>\n<p>当然你也可以外部工具对图片进行 WebP 格式转换，推荐使用 <a href=\"https://squoosh.app/\" target=\"_blank\" rel=\"noopener\">Squoosh</a>。</p>\n<h3 id=\"适配多套分辨率图片\"><a href=\"#适配多套分辨率图片\" class=\"headerlink\" title=\"适配多套分辨率图片\"></a><strong>适配多套分辨率图片</strong></h3><p>根据应用用户量使用的屏幕分辨率数据来，来决定你最终使用哪几套图片，从数据上来看目前设备分辨率大多数都是 1080x2094 和 1080x1920，因此这里我只用了 <code>xxhdpi</code> 和 <code>xxxhdpi</code> 两套资源。</p>\n<p>下面是各套资源对应设备的分辨率以及像素信息表格：</p>\n<table>\n<thead>\n<tr>\n<th>类型</th>\n<th>分辨率(px)</th>\n<th>屏幕像素密度(dpi)</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>ldpi</td>\n<td>200x320</td>\n<td>120</td>\n</tr>\n<tr>\n<td>mdpi</td>\n<td>320x480</td>\n<td>160</td>\n</tr>\n<tr>\n<td>hdpi</td>\n<td>480x800</td>\n<td>240</td>\n</tr>\n<tr>\n<td>xhdpi</td>\n<td>720x1280</td>\n<td>320</td>\n</tr>\n<tr>\n<td>xxhdpi</td>\n<td>960x1600</td>\n<td>480</td>\n</tr>\n<tr>\n<td>xxxhdpi</td>\n<td>1440x2560</td>\n<td>640</td>\n</tr>\n</tbody></table>\n<p>数据来自：<a href=\"http://iconhandbook.co.uk/reference/chart/android/\" target=\"_blank\" rel=\"noopener\">http://iconhandbook.co.uk/reference/chart/android/</a></p>\n<h2 id=\"Apk-瘦身之代码混淆\"><a href=\"#Apk-瘦身之代码混淆\" class=\"headerlink\" title=\"Apk 瘦身之代码混淆\"></a>Apk 瘦身之代码混淆</h2><p>开启代码混淆能将代码中的类、字段、方法的名字改为简短、无意义的名字；移除未使用的类、字段、方法、属性等，因此可以减少 Dex 文件的大小。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">android &#123;</span><br><span class=\"line\">    buildTypes &#123;</span><br><span class=\"line\">        release &#123;</span><br><span class=\"line\">            // 开启混淆</span><br><span class=\"line\">            minifyEnabled true</span><br><span class=\"line\">            proguardFiles getDefaultProguardFile(‘proguard-android.txt&apos;),</span><br><span class=\"line\">                    &apos;proguard-rules.pro&apos;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Apk-瘦身之开启-shrinkResources\"><a href=\"#Apk-瘦身之开启-shrinkResources\" class=\"headerlink\" title=\"Apk 瘦身之开启 shrinkResources\"></a>Apk 瘦身之开启 shrinkResources</h2><p>开启 shrinkResources 可以移除无用资源，依赖于 minifyEnabled，必须和 minifyEnabled 一起用，就是打开 shrinkResources 也必须打开 minifyEnabled。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">android &#123;</span><br><span class=\"line\">    buildTypes &#123;</span><br><span class=\"line\">        release &#123;</span><br><span class=\"line\">            // 开启混淆</span><br><span class=\"line\">            minifyEnabled true</span><br><span class=\"line\">            // 移除无用资源</span><br><span class=\"line\">            shrinkResources true</span><br><span class=\"line\">            </span><br><span class=\"line\">            proguardFiles getDefaultProguardFile(‘proguard-android.txt&apos;),</span><br><span class=\"line\">                    &apos;proguard-rules.pro&apos;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里开启我发现有些未使用的资源无法移除的，可能是一些没用的代码对一些资源进行引用，导致没有移除，建议大家还是使用 <code>Remove Unused Resources</code> 来检查。</p>\n<h2 id=\"Apk-瘦身之配置-resConfigs\"><a href=\"#Apk-瘦身之配置-resConfigs\" class=\"headerlink\" title=\"Apk 瘦身之配置 resConfigs\"></a>Apk 瘦身之配置 resConfigs</h2><p>配置应用使用哪些资源，例如你的应用只支持英语和阿拉伯语，那么可以这样配置：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">android &#123;</span><br><span class=\"line\">    defaultConfig &#123;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">        // 语言资源，只支持英语和阿拉伯语</span><br><span class=\"line\">        resConfigs &quot;en&quot;,&quot;ar&quot;</span><br><span class=\"line\">        // 图片资源，只支持xhdpi和xxhdpi屏幕的资源</span><br><span class=\"line\">        resConfigs &quot;xxhdpi&quot;,&quot;xxxhdpi&quot; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h1><p>看下瘦身后的效果，比之前减少了 2.5MB。</p>\n<p><img src=\"/images/2019/09/05.png\" alt=\"image\"></p>\n<h1 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h1><p>更多瘦身优化的方法：</p>\n<p><a href=\"https://juejin.im/post/59113583ac502e450280e5f3#heading-25\" target=\"_blank\" rel=\"noopener\">https://juejin.im/post/59113583ac502e450280e5f3#heading-25</a></p>\n"},{"title":"面试官问我：如何对 Android  App 进行 fps 分析","date":"2021-01-06T13:58:23.000Z","_content":"\n### 背景\n\n界面呈现是指从应用生成帧并将其显示在屏幕上的动作。要确保用户能够流畅地与您的应用互动，您的应用呈现每帧的时间不应超过 16ms，以达到每秒 60 帧的呈现速度。\n\n> 结论动画控制在每帧耗时 16ms 以下，因此需要进行 FPS 分析。\n\n### 前提\n\n进行分析前，手机先开启 ``GPU呈现模式分析``。\n\n> 打开手机“设置”-“更多设置”-“开发者选项”-“GPU 呈现模式分析”，选中“在adb shell dumpsys gfinfo”中\n\n设置路径基本都一样，都是在开发者选项里，部分手机是叫做 “HWUI 呈现模式分析”，下图是小米手机截图。\n\n![image](/images/2021/01/android_fps_01.png)\n\n### 打开测试的界面\n\n先打开你要进行分析的界面，然后再终端输入以下命令。\n\n### 命令\n\n利用 [dumpsys](https://developer.android.com/studio/command-line/dumpsys?hl=zh-cn#ui) 获取当前指定 App 发生的动画帧相关的性能信息，并以 txt 文件保存下来。\n\n```\nadb shell dumpsys gfxinfo package-name > loading.txt \n```\n\n#### 遇到问题\n\n执行命令出现错误\n\n```\nadb E  1250 22834 usb_osx.cpp:327] Could not open interface: e00002c5\nadb E  1250 22834 usb_osx.cpp:289] Could not find device interface\nerror: could not install *smartsocket* listener: Address already in use\nADB server didn't ACK\n* failed to start daemon *\nerror: cannot connect to daemon\n```\n\n> 解决：打开 Mac 活动监视器在 内存 栏，找到 adb 进程，对它进行强制退出\n\n\n### 导入 Excel\n\n#### 第一步导入文本\n\n![image](/images/2021/01/android_fps_02.png)\n\n#### 第二步完成导入\n\n这一步直接点击 **完成** 即可，然后点击 **确定** 。\n\n![image](/images/2021/01/android_fps_03.png)\n\n![image](/images/2021/01/android_fps_04.png)\n\n#### 第三步复制耗帧数据\n\n找到对应需要分析的界面类的数据，比如我这边的：\n\n![image](/images/2021/01/android_fps_05.png)\n\n将这块数据复制到新建一份 **工作表**。\n\n![image](/images/2021/01/android_fps_06.png)\n\n### 折线图分析\n\n在新建的工作表最后新增一栏命名为 **每秒耗帧（毫秒）**\n\n进行自动求和操作，选中新增栏的标题下一格，然后点击 Excel 表中的 **开始 》 自动求和**，这时会出现计算公式，直接按下回车键即计算出当前行的值总和，接着往下拉会自动进行每行的求和操作。\n\n对  **每秒耗帧（毫秒）** 栏进行图表分析：\n\n![image](/images/2021/01/android_fps_07.png)\n\n接着就会自动生成一份图表：\n\n![image](/images/2021/01/android_fps_08.png)\n\n> 分析图表的趋势，如果每帧耗时在 **16ms** 以上，那么即需要优化。\n\n### 相关链接\n\n* [渲染速度缓慢](https://developer.android.com/topic/performance/vitals/render.html)\n* [分析 GPU 渲染速度](https://developer.android.com/topic/performance/rendering/inspect-gpu-rendering#profile_rendering)\n* [面试官问我：Android APP中如何测试FPS？看我如何分析京东，拼多多App的FPS](https://juejin.im/post/6844904161746616334)\n* [Lottie 动画预览](https://lottiefiles.com/)\n* [dumpsys](https://developer.android.com/studio/command-line/dumpsys?hl=zh-cn)\n* [测试界面性能](https://developer.android.com/training/testing/performance?hl=zh-cn)\n","source":"_posts/android-fps.md","raw":"---\ntitle: 面试官问我：如何对 Android  App 进行 fps 分析\ndate: 2021-01-06 21:58:23\ntags: [Android]\n---\n\n### 背景\n\n界面呈现是指从应用生成帧并将其显示在屏幕上的动作。要确保用户能够流畅地与您的应用互动，您的应用呈现每帧的时间不应超过 16ms，以达到每秒 60 帧的呈现速度。\n\n> 结论动画控制在每帧耗时 16ms 以下，因此需要进行 FPS 分析。\n\n### 前提\n\n进行分析前，手机先开启 ``GPU呈现模式分析``。\n\n> 打开手机“设置”-“更多设置”-“开发者选项”-“GPU 呈现模式分析”，选中“在adb shell dumpsys gfinfo”中\n\n设置路径基本都一样，都是在开发者选项里，部分手机是叫做 “HWUI 呈现模式分析”，下图是小米手机截图。\n\n![image](/images/2021/01/android_fps_01.png)\n\n### 打开测试的界面\n\n先打开你要进行分析的界面，然后再终端输入以下命令。\n\n### 命令\n\n利用 [dumpsys](https://developer.android.com/studio/command-line/dumpsys?hl=zh-cn#ui) 获取当前指定 App 发生的动画帧相关的性能信息，并以 txt 文件保存下来。\n\n```\nadb shell dumpsys gfxinfo package-name > loading.txt \n```\n\n#### 遇到问题\n\n执行命令出现错误\n\n```\nadb E  1250 22834 usb_osx.cpp:327] Could not open interface: e00002c5\nadb E  1250 22834 usb_osx.cpp:289] Could not find device interface\nerror: could not install *smartsocket* listener: Address already in use\nADB server didn't ACK\n* failed to start daemon *\nerror: cannot connect to daemon\n```\n\n> 解决：打开 Mac 活动监视器在 内存 栏，找到 adb 进程，对它进行强制退出\n\n\n### 导入 Excel\n\n#### 第一步导入文本\n\n![image](/images/2021/01/android_fps_02.png)\n\n#### 第二步完成导入\n\n这一步直接点击 **完成** 即可，然后点击 **确定** 。\n\n![image](/images/2021/01/android_fps_03.png)\n\n![image](/images/2021/01/android_fps_04.png)\n\n#### 第三步复制耗帧数据\n\n找到对应需要分析的界面类的数据，比如我这边的：\n\n![image](/images/2021/01/android_fps_05.png)\n\n将这块数据复制到新建一份 **工作表**。\n\n![image](/images/2021/01/android_fps_06.png)\n\n### 折线图分析\n\n在新建的工作表最后新增一栏命名为 **每秒耗帧（毫秒）**\n\n进行自动求和操作，选中新增栏的标题下一格，然后点击 Excel 表中的 **开始 》 自动求和**，这时会出现计算公式，直接按下回车键即计算出当前行的值总和，接着往下拉会自动进行每行的求和操作。\n\n对  **每秒耗帧（毫秒）** 栏进行图表分析：\n\n![image](/images/2021/01/android_fps_07.png)\n\n接着就会自动生成一份图表：\n\n![image](/images/2021/01/android_fps_08.png)\n\n> 分析图表的趋势，如果每帧耗时在 **16ms** 以上，那么即需要优化。\n\n### 相关链接\n\n* [渲染速度缓慢](https://developer.android.com/topic/performance/vitals/render.html)\n* [分析 GPU 渲染速度](https://developer.android.com/topic/performance/rendering/inspect-gpu-rendering#profile_rendering)\n* [面试官问我：Android APP中如何测试FPS？看我如何分析京东，拼多多App的FPS](https://juejin.im/post/6844904161746616334)\n* [Lottie 动画预览](https://lottiefiles.com/)\n* [dumpsys](https://developer.android.com/studio/command-line/dumpsys?hl=zh-cn)\n* [测试界面性能](https://developer.android.com/training/testing/performance?hl=zh-cn)\n","slug":"android-fps","published":1,"updated":"2021-01-06T14:07:49.794Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cks0kfic90008w3yzdi53n5pf","content":"<h3 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h3><p>界面呈现是指从应用生成帧并将其显示在屏幕上的动作。要确保用户能够流畅地与您的应用互动，您的应用呈现每帧的时间不应超过 16ms，以达到每秒 60 帧的呈现速度。</p>\n<blockquote>\n<p>结论动画控制在每帧耗时 16ms 以下，因此需要进行 FPS 分析。</p>\n</blockquote>\n<h3 id=\"前提\"><a href=\"#前提\" class=\"headerlink\" title=\"前提\"></a>前提</h3><p>进行分析前，手机先开启 <code>GPU呈现模式分析</code>。</p>\n<blockquote>\n<p>打开手机“设置”-“更多设置”-“开发者选项”-“GPU 呈现模式分析”，选中“在adb shell dumpsys gfinfo”中</p>\n</blockquote>\n<p>设置路径基本都一样，都是在开发者选项里，部分手机是叫做 “HWUI 呈现模式分析”，下图是小米手机截图。</p>\n<p><img src=\"/images/2021/01/android_fps_01.png\" alt=\"image\"></p>\n<h3 id=\"打开测试的界面\"><a href=\"#打开测试的界面\" class=\"headerlink\" title=\"打开测试的界面\"></a>打开测试的界面</h3><p>先打开你要进行分析的界面，然后再终端输入以下命令。</p>\n<h3 id=\"命令\"><a href=\"#命令\" class=\"headerlink\" title=\"命令\"></a>命令</h3><p>利用 <a href=\"https://developer.android.com/studio/command-line/dumpsys?hl=zh-cn#ui\" target=\"_blank\" rel=\"noopener\">dumpsys</a> 获取当前指定 App 发生的动画帧相关的性能信息，并以 txt 文件保存下来。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">adb shell dumpsys gfxinfo package-name &gt; loading.txt</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"遇到问题\"><a href=\"#遇到问题\" class=\"headerlink\" title=\"遇到问题\"></a>遇到问题</h4><p>执行命令出现错误</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">adb E  1250 22834 usb_osx.cpp:327] Could not open interface: e00002c5</span><br><span class=\"line\">adb E  1250 22834 usb_osx.cpp:289] Could not find device interface</span><br><span class=\"line\">error: could not install *smartsocket* listener: Address already in use</span><br><span class=\"line\">ADB server didn&apos;t ACK</span><br><span class=\"line\">* failed to start daemon *</span><br><span class=\"line\">error: cannot connect to daemon</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>解决：打开 Mac 活动监视器在 内存 栏，找到 adb 进程，对它进行强制退出</p>\n</blockquote>\n<h3 id=\"导入-Excel\"><a href=\"#导入-Excel\" class=\"headerlink\" title=\"导入 Excel\"></a>导入 Excel</h3><h4 id=\"第一步导入文本\"><a href=\"#第一步导入文本\" class=\"headerlink\" title=\"第一步导入文本\"></a>第一步导入文本</h4><p><img src=\"/images/2021/01/android_fps_02.png\" alt=\"image\"></p>\n<h4 id=\"第二步完成导入\"><a href=\"#第二步完成导入\" class=\"headerlink\" title=\"第二步完成导入\"></a>第二步完成导入</h4><p>这一步直接点击 <strong>完成</strong> 即可，然后点击 <strong>确定</strong> 。</p>\n<p><img src=\"/images/2021/01/android_fps_03.png\" alt=\"image\"></p>\n<p><img src=\"/images/2021/01/android_fps_04.png\" alt=\"image\"></p>\n<h4 id=\"第三步复制耗帧数据\"><a href=\"#第三步复制耗帧数据\" class=\"headerlink\" title=\"第三步复制耗帧数据\"></a>第三步复制耗帧数据</h4><p>找到对应需要分析的界面类的数据，比如我这边的：</p>\n<p><img src=\"/images/2021/01/android_fps_05.png\" alt=\"image\"></p>\n<p>将这块数据复制到新建一份 <strong>工作表</strong>。</p>\n<p><img src=\"/images/2021/01/android_fps_06.png\" alt=\"image\"></p>\n<h3 id=\"折线图分析\"><a href=\"#折线图分析\" class=\"headerlink\" title=\"折线图分析\"></a>折线图分析</h3><p>在新建的工作表最后新增一栏命名为 <strong>每秒耗帧（毫秒）</strong></p>\n<p>进行自动求和操作，选中新增栏的标题下一格，然后点击 Excel 表中的 <strong>开始 》 自动求和</strong>，这时会出现计算公式，直接按下回车键即计算出当前行的值总和，接着往下拉会自动进行每行的求和操作。</p>\n<p>对  <strong>每秒耗帧（毫秒）</strong> 栏进行图表分析：</p>\n<p><img src=\"/images/2021/01/android_fps_07.png\" alt=\"image\"></p>\n<p>接着就会自动生成一份图表：</p>\n<p><img src=\"/images/2021/01/android_fps_08.png\" alt=\"image\"></p>\n<blockquote>\n<p>分析图表的趋势，如果每帧耗时在 <strong>16ms</strong> 以上，那么即需要优化。</p>\n</blockquote>\n<h3 id=\"相关链接\"><a href=\"#相关链接\" class=\"headerlink\" title=\"相关链接\"></a>相关链接</h3><ul>\n<li><a href=\"https://developer.android.com/topic/performance/vitals/render.html\" target=\"_blank\" rel=\"noopener\">渲染速度缓慢</a></li>\n<li><a href=\"https://developer.android.com/topic/performance/rendering/inspect-gpu-rendering#profile_rendering\" target=\"_blank\" rel=\"noopener\">分析 GPU 渲染速度</a></li>\n<li><a href=\"https://juejin.im/post/6844904161746616334\" target=\"_blank\" rel=\"noopener\">面试官问我：Android APP中如何测试FPS？看我如何分析京东，拼多多App的FPS</a></li>\n<li><a href=\"https://lottiefiles.com/\" target=\"_blank\" rel=\"noopener\">Lottie 动画预览</a></li>\n<li><a href=\"https://developer.android.com/studio/command-line/dumpsys?hl=zh-cn\" target=\"_blank\" rel=\"noopener\">dumpsys</a></li>\n<li><a href=\"https://developer.android.com/training/testing/performance?hl=zh-cn\" target=\"_blank\" rel=\"noopener\">测试界面性能</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h3><p>界面呈现是指从应用生成帧并将其显示在屏幕上的动作。要确保用户能够流畅地与您的应用互动，您的应用呈现每帧的时间不应超过 16ms，以达到每秒 60 帧的呈现速度。</p>\n<blockquote>\n<p>结论动画控制在每帧耗时 16ms 以下，因此需要进行 FPS 分析。</p>\n</blockquote>\n<h3 id=\"前提\"><a href=\"#前提\" class=\"headerlink\" title=\"前提\"></a>前提</h3><p>进行分析前，手机先开启 <code>GPU呈现模式分析</code>。</p>\n<blockquote>\n<p>打开手机“设置”-“更多设置”-“开发者选项”-“GPU 呈现模式分析”，选中“在adb shell dumpsys gfinfo”中</p>\n</blockquote>\n<p>设置路径基本都一样，都是在开发者选项里，部分手机是叫做 “HWUI 呈现模式分析”，下图是小米手机截图。</p>\n<p><img src=\"/images/2021/01/android_fps_01.png\" alt=\"image\"></p>\n<h3 id=\"打开测试的界面\"><a href=\"#打开测试的界面\" class=\"headerlink\" title=\"打开测试的界面\"></a>打开测试的界面</h3><p>先打开你要进行分析的界面，然后再终端输入以下命令。</p>\n<h3 id=\"命令\"><a href=\"#命令\" class=\"headerlink\" title=\"命令\"></a>命令</h3><p>利用 <a href=\"https://developer.android.com/studio/command-line/dumpsys?hl=zh-cn#ui\" target=\"_blank\" rel=\"noopener\">dumpsys</a> 获取当前指定 App 发生的动画帧相关的性能信息，并以 txt 文件保存下来。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">adb shell dumpsys gfxinfo package-name &gt; loading.txt</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"遇到问题\"><a href=\"#遇到问题\" class=\"headerlink\" title=\"遇到问题\"></a>遇到问题</h4><p>执行命令出现错误</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">adb E  1250 22834 usb_osx.cpp:327] Could not open interface: e00002c5</span><br><span class=\"line\">adb E  1250 22834 usb_osx.cpp:289] Could not find device interface</span><br><span class=\"line\">error: could not install *smartsocket* listener: Address already in use</span><br><span class=\"line\">ADB server didn&apos;t ACK</span><br><span class=\"line\">* failed to start daemon *</span><br><span class=\"line\">error: cannot connect to daemon</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>解决：打开 Mac 活动监视器在 内存 栏，找到 adb 进程，对它进行强制退出</p>\n</blockquote>\n<h3 id=\"导入-Excel\"><a href=\"#导入-Excel\" class=\"headerlink\" title=\"导入 Excel\"></a>导入 Excel</h3><h4 id=\"第一步导入文本\"><a href=\"#第一步导入文本\" class=\"headerlink\" title=\"第一步导入文本\"></a>第一步导入文本</h4><p><img src=\"/images/2021/01/android_fps_02.png\" alt=\"image\"></p>\n<h4 id=\"第二步完成导入\"><a href=\"#第二步完成导入\" class=\"headerlink\" title=\"第二步完成导入\"></a>第二步完成导入</h4><p>这一步直接点击 <strong>完成</strong> 即可，然后点击 <strong>确定</strong> 。</p>\n<p><img src=\"/images/2021/01/android_fps_03.png\" alt=\"image\"></p>\n<p><img src=\"/images/2021/01/android_fps_04.png\" alt=\"image\"></p>\n<h4 id=\"第三步复制耗帧数据\"><a href=\"#第三步复制耗帧数据\" class=\"headerlink\" title=\"第三步复制耗帧数据\"></a>第三步复制耗帧数据</h4><p>找到对应需要分析的界面类的数据，比如我这边的：</p>\n<p><img src=\"/images/2021/01/android_fps_05.png\" alt=\"image\"></p>\n<p>将这块数据复制到新建一份 <strong>工作表</strong>。</p>\n<p><img src=\"/images/2021/01/android_fps_06.png\" alt=\"image\"></p>\n<h3 id=\"折线图分析\"><a href=\"#折线图分析\" class=\"headerlink\" title=\"折线图分析\"></a>折线图分析</h3><p>在新建的工作表最后新增一栏命名为 <strong>每秒耗帧（毫秒）</strong></p>\n<p>进行自动求和操作，选中新增栏的标题下一格，然后点击 Excel 表中的 <strong>开始 》 自动求和</strong>，这时会出现计算公式，直接按下回车键即计算出当前行的值总和，接着往下拉会自动进行每行的求和操作。</p>\n<p>对  <strong>每秒耗帧（毫秒）</strong> 栏进行图表分析：</p>\n<p><img src=\"/images/2021/01/android_fps_07.png\" alt=\"image\"></p>\n<p>接着就会自动生成一份图表：</p>\n<p><img src=\"/images/2021/01/android_fps_08.png\" alt=\"image\"></p>\n<blockquote>\n<p>分析图表的趋势，如果每帧耗时在 <strong>16ms</strong> 以上，那么即需要优化。</p>\n</blockquote>\n<h3 id=\"相关链接\"><a href=\"#相关链接\" class=\"headerlink\" title=\"相关链接\"></a>相关链接</h3><ul>\n<li><a href=\"https://developer.android.com/topic/performance/vitals/render.html\" target=\"_blank\" rel=\"noopener\">渲染速度缓慢</a></li>\n<li><a href=\"https://developer.android.com/topic/performance/rendering/inspect-gpu-rendering#profile_rendering\" target=\"_blank\" rel=\"noopener\">分析 GPU 渲染速度</a></li>\n<li><a href=\"https://juejin.im/post/6844904161746616334\" target=\"_blank\" rel=\"noopener\">面试官问我：Android APP中如何测试FPS？看我如何分析京东，拼多多App的FPS</a></li>\n<li><a href=\"https://lottiefiles.com/\" target=\"_blank\" rel=\"noopener\">Lottie 动画预览</a></li>\n<li><a href=\"https://developer.android.com/studio/command-line/dumpsys?hl=zh-cn\" target=\"_blank\" rel=\"noopener\">dumpsys</a></li>\n<li><a href=\"https://developer.android.com/training/testing/performance?hl=zh-cn\" target=\"_blank\" rel=\"noopener\">测试界面性能</a></li>\n</ul>\n"},{"title":"史上最全 Android 面试资料集合","date":"2016-12-11T16:26:10.000Z","_content":"\n最近看到很多人都在找工作, 而且很多人都感觉今年找工作比去年难很多, 竞争力也增加不少, 因此激发我整理这份资料, 希望能帮到正在找或者准备找工作的童鞋们.\n\n>本文已授权微信公众号 AndroidDeveloper （id: googdev） 独家发布！\n\n首先我们能否获得一个面试机会, 那肯定是从简历开始, 简历需要做好功夫,  一份好的简历才足够吸引企业得到面试机会, 接着就是面试了, 面试前必须要先做好准备, 多看一下前辈们总结面试题, 有哪一方面不足的地方赶紧补充一下, 还有要了解一下你即将面试那家公司.\n\n>感谢[@Android开发日常](http://weibo.com/AndroidDevDaily)(专注分享 Android 优质开源项目以及高质量开发资料) 支持\n\n### 教你写简历\n\n- [你真的会写简历么?](http://mp.weixin.qq.com/s?__biz=MzA4NTQwNDcyMA==&mid=402970472&idx=1&sn=b9738c66fb5750c2515d57357c01a83f&scene=21#wechat_redirect)\n- [80% 以上简历都是不合格的](http://j.codekk.com/blogs/detail/5705bcdf4a38205862ef4770)\n- [推荐两个技术简历模板](http://j.codekk.com/blogs/detail/5705bcdf4a38205862ef476f)\n- [精益技术简历之道——改善技术简历的 47 条原则](http://lucida.me/blog/lean-technical-resume/)\n- [关于程序员求职简历](https://mdluo.github.io/blog/about-resume/)\n- [程序员简历模板列表](https://github.com/geekcompany/ResumeSample)\n\n### 面试题\n\n- [国内一线互联网公司内部面试题库](https://github.com/JackyAndroid/AndroidInterview-Q-A)\n- [Android 开发工程师面试指南](https://github.com/GeniusVJR/LearningNotes)\n- [一个五年 Android 开发者百度, 阿里, 聚美, 映客的面试心经](http://gdky005.com/2016/07/08/%E4%B8%80%E4%B8%AA%E4%BA%94%E5%B9%B4Android%E5%BC%80%E5%8F%91%E8%80%85%E7%99%BE%E5%BA%A6%E3%80%81%E9%98%BF%E9%87%8C%E3%80%81%E8%81%9A%E7%BE%8E%E3%80%81%E6%98%A0%E5%AE%A2%E7%9A%84%E9%9D%A2%E8%AF%95%E5%BF%83%E7%BB%8F/)\n- [整理常见 Android 面试问题](https://github.com/leerduo/InterviewQuestion)\n- [2016 Android 某公司面试题](http://yuweiguocn.github.io/2016/04/13/interview-2016-big-company/)\n- [面试后的总结](http://kymjs.com/code/2016/03/08/01/)\n- [Android 面试题整理](http://www.jianshu.com/p/a22450882af2)\n- [Android interview questions for 2-5 yrs experienced](http://androidquestions.quora.com/Android-interview-questions-for-2-5-yrs-experienced)\n- [Android interview questions](http://androidquestions.quora.com/Android-interview-questions)\n- [40 个 Android 面试题](http://www.devstore.cn/essay/essayInfo/7195.html)\n- [Android 名企面试题及涉及知识点整理](https://github.com/Mr-YangCheng/ForAndroidInterview)\n- [亲爱的面试官，这个我可没看过！（Android部分）](http://www.jianshu.com/p/89f19d67b348)\n\n### 做题\n\n看完面试题之后那就来做一下面试题目吧, 目前找到两个网站\n\n- [SillGun](http://skillgun.com/android/interview-questions-and-answers)(国外网站, 自备梯子)\n- [牛客网](http://www.nowcoder.com/)\n\n### 聊面试\n\n[(帅张)stormzhang](http://stormzhang.com/) 跟你谈一下面试那些事儿\n\n- [面试时企业最看中你什么能力?](http://mp.weixin.qq.com/s?__biz=MzA4NTQwNDcyMA==&mid=2650661810&idx=1&sn=f8c1ca67527459db3189a978f0e44cef&scene=23&srcid=08101MZAPzGR1MC1C577enim#rd)\n- [我面试到底问什么?](https://zhuanlan.zhihu.com/p/21343656?refer=stormzhang)\n- [Android 面试那些事儿](https://zhuanlan.zhihu.com/p/21565914?refer=stormzhang)\n\n### 知乎讨论\n\n- [面试时, 问哪些问题能试出一个 Android 应用开发者真正的水平?](https://www.zhihu.com/question/19765032)\n- [我用个假简历去面试 android 的结果为什么会这样?](https://www.zhihu.com/question/38982159)\n- [怎么准备Android面试?](https://www.zhihu.com/question/37483907)\n\n### 互联网招聘平台\n\n- [拉勾-专注互联网职业机会](http://www.lagou.com/)\n- [简寻-让职位推荐更精准](https://jianxun.io/)\n- [100 offer-帮最好的互联网人发现更好的offer](https://100offer.com/)\n- [BOSS 直聘-互联网招聘神器](https://www.bosszhipin.com/home/#index)\n- [LinkedIn (领英)](https://www.linkedin.com/)\n- [哪上班](https://www.nashangban.com/)\n\n### 感谢\n\n非常感谢上面分享面试资料以及面试经验的前辈们!\n有前辈在前面带路, 我们后辈真心感到幸福.\n\n### 祝福\n\n最后祝正在找工作的的童鞋们, 马到成功, 心想事成, 事事如意!\n\n### 关于我\n\n欢迎关注我 [Github](https://github.com/Freelander) 以及 [微博](http://weibo.com/gaojunhuang)\n","source":"_posts/android-resume.md","raw":"---\ntitle: 史上最全 Android 面试资料集合\ndate: 2016-12-12 00:26:10\ntags: [面试,Android]\ncategories: Android\n---\n\n最近看到很多人都在找工作, 而且很多人都感觉今年找工作比去年难很多, 竞争力也增加不少, 因此激发我整理这份资料, 希望能帮到正在找或者准备找工作的童鞋们.\n\n>本文已授权微信公众号 AndroidDeveloper （id: googdev） 独家发布！\n\n首先我们能否获得一个面试机会, 那肯定是从简历开始, 简历需要做好功夫,  一份好的简历才足够吸引企业得到面试机会, 接着就是面试了, 面试前必须要先做好准备, 多看一下前辈们总结面试题, 有哪一方面不足的地方赶紧补充一下, 还有要了解一下你即将面试那家公司.\n\n>感谢[@Android开发日常](http://weibo.com/AndroidDevDaily)(专注分享 Android 优质开源项目以及高质量开发资料) 支持\n\n### 教你写简历\n\n- [你真的会写简历么?](http://mp.weixin.qq.com/s?__biz=MzA4NTQwNDcyMA==&mid=402970472&idx=1&sn=b9738c66fb5750c2515d57357c01a83f&scene=21#wechat_redirect)\n- [80% 以上简历都是不合格的](http://j.codekk.com/blogs/detail/5705bcdf4a38205862ef4770)\n- [推荐两个技术简历模板](http://j.codekk.com/blogs/detail/5705bcdf4a38205862ef476f)\n- [精益技术简历之道——改善技术简历的 47 条原则](http://lucida.me/blog/lean-technical-resume/)\n- [关于程序员求职简历](https://mdluo.github.io/blog/about-resume/)\n- [程序员简历模板列表](https://github.com/geekcompany/ResumeSample)\n\n### 面试题\n\n- [国内一线互联网公司内部面试题库](https://github.com/JackyAndroid/AndroidInterview-Q-A)\n- [Android 开发工程师面试指南](https://github.com/GeniusVJR/LearningNotes)\n- [一个五年 Android 开发者百度, 阿里, 聚美, 映客的面试心经](http://gdky005.com/2016/07/08/%E4%B8%80%E4%B8%AA%E4%BA%94%E5%B9%B4Android%E5%BC%80%E5%8F%91%E8%80%85%E7%99%BE%E5%BA%A6%E3%80%81%E9%98%BF%E9%87%8C%E3%80%81%E8%81%9A%E7%BE%8E%E3%80%81%E6%98%A0%E5%AE%A2%E7%9A%84%E9%9D%A2%E8%AF%95%E5%BF%83%E7%BB%8F/)\n- [整理常见 Android 面试问题](https://github.com/leerduo/InterviewQuestion)\n- [2016 Android 某公司面试题](http://yuweiguocn.github.io/2016/04/13/interview-2016-big-company/)\n- [面试后的总结](http://kymjs.com/code/2016/03/08/01/)\n- [Android 面试题整理](http://www.jianshu.com/p/a22450882af2)\n- [Android interview questions for 2-5 yrs experienced](http://androidquestions.quora.com/Android-interview-questions-for-2-5-yrs-experienced)\n- [Android interview questions](http://androidquestions.quora.com/Android-interview-questions)\n- [40 个 Android 面试题](http://www.devstore.cn/essay/essayInfo/7195.html)\n- [Android 名企面试题及涉及知识点整理](https://github.com/Mr-YangCheng/ForAndroidInterview)\n- [亲爱的面试官，这个我可没看过！（Android部分）](http://www.jianshu.com/p/89f19d67b348)\n\n### 做题\n\n看完面试题之后那就来做一下面试题目吧, 目前找到两个网站\n\n- [SillGun](http://skillgun.com/android/interview-questions-and-answers)(国外网站, 自备梯子)\n- [牛客网](http://www.nowcoder.com/)\n\n### 聊面试\n\n[(帅张)stormzhang](http://stormzhang.com/) 跟你谈一下面试那些事儿\n\n- [面试时企业最看中你什么能力?](http://mp.weixin.qq.com/s?__biz=MzA4NTQwNDcyMA==&mid=2650661810&idx=1&sn=f8c1ca67527459db3189a978f0e44cef&scene=23&srcid=08101MZAPzGR1MC1C577enim#rd)\n- [我面试到底问什么?](https://zhuanlan.zhihu.com/p/21343656?refer=stormzhang)\n- [Android 面试那些事儿](https://zhuanlan.zhihu.com/p/21565914?refer=stormzhang)\n\n### 知乎讨论\n\n- [面试时, 问哪些问题能试出一个 Android 应用开发者真正的水平?](https://www.zhihu.com/question/19765032)\n- [我用个假简历去面试 android 的结果为什么会这样?](https://www.zhihu.com/question/38982159)\n- [怎么准备Android面试?](https://www.zhihu.com/question/37483907)\n\n### 互联网招聘平台\n\n- [拉勾-专注互联网职业机会](http://www.lagou.com/)\n- [简寻-让职位推荐更精准](https://jianxun.io/)\n- [100 offer-帮最好的互联网人发现更好的offer](https://100offer.com/)\n- [BOSS 直聘-互联网招聘神器](https://www.bosszhipin.com/home/#index)\n- [LinkedIn (领英)](https://www.linkedin.com/)\n- [哪上班](https://www.nashangban.com/)\n\n### 感谢\n\n非常感谢上面分享面试资料以及面试经验的前辈们!\n有前辈在前面带路, 我们后辈真心感到幸福.\n\n### 祝福\n\n最后祝正在找工作的的童鞋们, 马到成功, 心想事成, 事事如意!\n\n### 关于我\n\n欢迎关注我 [Github](https://github.com/Freelander) 以及 [微博](http://weibo.com/gaojunhuang)\n","slug":"android-resume","published":1,"updated":"2019-06-11T16:31:08.931Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cks0kficb000bw3yzbo3rbw36","content":"<p>最近看到很多人都在找工作, 而且很多人都感觉今年找工作比去年难很多, 竞争力也增加不少, 因此激发我整理这份资料, 希望能帮到正在找或者准备找工作的童鞋们.</p>\n<blockquote>\n<p>本文已授权微信公众号 AndroidDeveloper （id: googdev） 独家发布！</p>\n</blockquote>\n<p>首先我们能否获得一个面试机会, 那肯定是从简历开始, 简历需要做好功夫,  一份好的简历才足够吸引企业得到面试机会, 接着就是面试了, 面试前必须要先做好准备, 多看一下前辈们总结面试题, 有哪一方面不足的地方赶紧补充一下, 还有要了解一下你即将面试那家公司.</p>\n<blockquote>\n<p>感谢<a href=\"http://weibo.com/AndroidDevDaily\" target=\"_blank\" rel=\"noopener\">@Android开发日常</a>(专注分享 Android 优质开源项目以及高质量开发资料) 支持</p>\n</blockquote>\n<h3 id=\"教你写简历\"><a href=\"#教你写简历\" class=\"headerlink\" title=\"教你写简历\"></a>教你写简历</h3><ul>\n<li><a href=\"http://mp.weixin.qq.com/s?__biz=MzA4NTQwNDcyMA==&mid=402970472&idx=1&sn=b9738c66fb5750c2515d57357c01a83f&scene=21#wechat_redirect\" target=\"_blank\" rel=\"noopener\">你真的会写简历么?</a></li>\n<li><a href=\"http://j.codekk.com/blogs/detail/5705bcdf4a38205862ef4770\" target=\"_blank\" rel=\"noopener\">80% 以上简历都是不合格的</a></li>\n<li><a href=\"http://j.codekk.com/blogs/detail/5705bcdf4a38205862ef476f\" target=\"_blank\" rel=\"noopener\">推荐两个技术简历模板</a></li>\n<li><a href=\"http://lucida.me/blog/lean-technical-resume/\" target=\"_blank\" rel=\"noopener\">精益技术简历之道——改善技术简历的 47 条原则</a></li>\n<li><a href=\"https://mdluo.github.io/blog/about-resume/\" target=\"_blank\" rel=\"noopener\">关于程序员求职简历</a></li>\n<li><a href=\"https://github.com/geekcompany/ResumeSample\" target=\"_blank\" rel=\"noopener\">程序员简历模板列表</a></li>\n</ul>\n<h3 id=\"面试题\"><a href=\"#面试题\" class=\"headerlink\" title=\"面试题\"></a>面试题</h3><ul>\n<li><a href=\"https://github.com/JackyAndroid/AndroidInterview-Q-A\" target=\"_blank\" rel=\"noopener\">国内一线互联网公司内部面试题库</a></li>\n<li><a href=\"https://github.com/GeniusVJR/LearningNotes\" target=\"_blank\" rel=\"noopener\">Android 开发工程师面试指南</a></li>\n<li><a href=\"http://gdky005.com/2016/07/08/%E4%B8%80%E4%B8%AA%E4%BA%94%E5%B9%B4Android%E5%BC%80%E5%8F%91%E8%80%85%E7%99%BE%E5%BA%A6%E3%80%81%E9%98%BF%E9%87%8C%E3%80%81%E8%81%9A%E7%BE%8E%E3%80%81%E6%98%A0%E5%AE%A2%E7%9A%84%E9%9D%A2%E8%AF%95%E5%BF%83%E7%BB%8F/\" target=\"_blank\" rel=\"noopener\">一个五年 Android 开发者百度, 阿里, 聚美, 映客的面试心经</a></li>\n<li><a href=\"https://github.com/leerduo/InterviewQuestion\" target=\"_blank\" rel=\"noopener\">整理常见 Android 面试问题</a></li>\n<li><a href=\"http://yuweiguocn.github.io/2016/04/13/interview-2016-big-company/\" target=\"_blank\" rel=\"noopener\">2016 Android 某公司面试题</a></li>\n<li><a href=\"http://kymjs.com/code/2016/03/08/01/\" target=\"_blank\" rel=\"noopener\">面试后的总结</a></li>\n<li><a href=\"http://www.jianshu.com/p/a22450882af2\" target=\"_blank\" rel=\"noopener\">Android 面试题整理</a></li>\n<li><a href=\"http://androidquestions.quora.com/Android-interview-questions-for-2-5-yrs-experienced\" target=\"_blank\" rel=\"noopener\">Android interview questions for 2-5 yrs experienced</a></li>\n<li><a href=\"http://androidquestions.quora.com/Android-interview-questions\" target=\"_blank\" rel=\"noopener\">Android interview questions</a></li>\n<li><a href=\"http://www.devstore.cn/essay/essayInfo/7195.html\" target=\"_blank\" rel=\"noopener\">40 个 Android 面试题</a></li>\n<li><a href=\"https://github.com/Mr-YangCheng/ForAndroidInterview\" target=\"_blank\" rel=\"noopener\">Android 名企面试题及涉及知识点整理</a></li>\n<li><a href=\"http://www.jianshu.com/p/89f19d67b348\" target=\"_blank\" rel=\"noopener\">亲爱的面试官，这个我可没看过！（Android部分）</a></li>\n</ul>\n<h3 id=\"做题\"><a href=\"#做题\" class=\"headerlink\" title=\"做题\"></a>做题</h3><p>看完面试题之后那就来做一下面试题目吧, 目前找到两个网站</p>\n<ul>\n<li><a href=\"http://skillgun.com/android/interview-questions-and-answers\" target=\"_blank\" rel=\"noopener\">SillGun</a>(国外网站, 自备梯子)</li>\n<li><a href=\"http://www.nowcoder.com/\" target=\"_blank\" rel=\"noopener\">牛客网</a></li>\n</ul>\n<h3 id=\"聊面试\"><a href=\"#聊面试\" class=\"headerlink\" title=\"聊面试\"></a>聊面试</h3><p><a href=\"http://stormzhang.com/\" target=\"_blank\" rel=\"noopener\">(帅张)stormzhang</a> 跟你谈一下面试那些事儿</p>\n<ul>\n<li><a href=\"http://mp.weixin.qq.com/s?__biz=MzA4NTQwNDcyMA==&mid=2650661810&idx=1&sn=f8c1ca67527459db3189a978f0e44cef&scene=23&srcid=08101MZAPzGR1MC1C577enim#rd\" target=\"_blank\" rel=\"noopener\">面试时企业最看中你什么能力?</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/21343656?refer=stormzhang\" target=\"_blank\" rel=\"noopener\">我面试到底问什么?</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/21565914?refer=stormzhang\" target=\"_blank\" rel=\"noopener\">Android 面试那些事儿</a></li>\n</ul>\n<h3 id=\"知乎讨论\"><a href=\"#知乎讨论\" class=\"headerlink\" title=\"知乎讨论\"></a>知乎讨论</h3><ul>\n<li><a href=\"https://www.zhihu.com/question/19765032\" target=\"_blank\" rel=\"noopener\">面试时, 问哪些问题能试出一个 Android 应用开发者真正的水平?</a></li>\n<li><a href=\"https://www.zhihu.com/question/38982159\" target=\"_blank\" rel=\"noopener\">我用个假简历去面试 android 的结果为什么会这样?</a></li>\n<li><a href=\"https://www.zhihu.com/question/37483907\" target=\"_blank\" rel=\"noopener\">怎么准备Android面试?</a></li>\n</ul>\n<h3 id=\"互联网招聘平台\"><a href=\"#互联网招聘平台\" class=\"headerlink\" title=\"互联网招聘平台\"></a>互联网招聘平台</h3><ul>\n<li><a href=\"http://www.lagou.com/\" target=\"_blank\" rel=\"noopener\">拉勾-专注互联网职业机会</a></li>\n<li><a href=\"https://jianxun.io/\" target=\"_blank\" rel=\"noopener\">简寻-让职位推荐更精准</a></li>\n<li><a href=\"https://100offer.com/\" target=\"_blank\" rel=\"noopener\">100 offer-帮最好的互联网人发现更好的offer</a></li>\n<li><a href=\"https://www.bosszhipin.com/home/#index\" target=\"_blank\" rel=\"noopener\">BOSS 直聘-互联网招聘神器</a></li>\n<li><a href=\"https://www.linkedin.com/\" target=\"_blank\" rel=\"noopener\">LinkedIn (领英)</a></li>\n<li><a href=\"https://www.nashangban.com/\" target=\"_blank\" rel=\"noopener\">哪上班</a></li>\n</ul>\n<h3 id=\"感谢\"><a href=\"#感谢\" class=\"headerlink\" title=\"感谢\"></a>感谢</h3><p>非常感谢上面分享面试资料以及面试经验的前辈们!\n有前辈在前面带路, 我们后辈真心感到幸福.</p>\n<h3 id=\"祝福\"><a href=\"#祝福\" class=\"headerlink\" title=\"祝福\"></a>祝福</h3><p>最后祝正在找工作的的童鞋们, 马到成功, 心想事成, 事事如意!</p>\n<h3 id=\"关于我\"><a href=\"#关于我\" class=\"headerlink\" title=\"关于我\"></a>关于我</h3><p>欢迎关注我 <a href=\"https://github.com/Freelander\" target=\"_blank\" rel=\"noopener\">Github</a> 以及 <a href=\"http://weibo.com/gaojunhuang\" target=\"_blank\" rel=\"noopener\">微博</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>最近看到很多人都在找工作, 而且很多人都感觉今年找工作比去年难很多, 竞争力也增加不少, 因此激发我整理这份资料, 希望能帮到正在找或者准备找工作的童鞋们.</p>\n<blockquote>\n<p>本文已授权微信公众号 AndroidDeveloper （id: googdev） 独家发布！</p>\n</blockquote>\n<p>首先我们能否获得一个面试机会, 那肯定是从简历开始, 简历需要做好功夫,  一份好的简历才足够吸引企业得到面试机会, 接着就是面试了, 面试前必须要先做好准备, 多看一下前辈们总结面试题, 有哪一方面不足的地方赶紧补充一下, 还有要了解一下你即将面试那家公司.</p>\n<blockquote>\n<p>感谢<a href=\"http://weibo.com/AndroidDevDaily\" target=\"_blank\" rel=\"noopener\">@Android开发日常</a>(专注分享 Android 优质开源项目以及高质量开发资料) 支持</p>\n</blockquote>\n<h3 id=\"教你写简历\"><a href=\"#教你写简历\" class=\"headerlink\" title=\"教你写简历\"></a>教你写简历</h3><ul>\n<li><a href=\"http://mp.weixin.qq.com/s?__biz=MzA4NTQwNDcyMA==&mid=402970472&idx=1&sn=b9738c66fb5750c2515d57357c01a83f&scene=21#wechat_redirect\" target=\"_blank\" rel=\"noopener\">你真的会写简历么?</a></li>\n<li><a href=\"http://j.codekk.com/blogs/detail/5705bcdf4a38205862ef4770\" target=\"_blank\" rel=\"noopener\">80% 以上简历都是不合格的</a></li>\n<li><a href=\"http://j.codekk.com/blogs/detail/5705bcdf4a38205862ef476f\" target=\"_blank\" rel=\"noopener\">推荐两个技术简历模板</a></li>\n<li><a href=\"http://lucida.me/blog/lean-technical-resume/\" target=\"_blank\" rel=\"noopener\">精益技术简历之道——改善技术简历的 47 条原则</a></li>\n<li><a href=\"https://mdluo.github.io/blog/about-resume/\" target=\"_blank\" rel=\"noopener\">关于程序员求职简历</a></li>\n<li><a href=\"https://github.com/geekcompany/ResumeSample\" target=\"_blank\" rel=\"noopener\">程序员简历模板列表</a></li>\n</ul>\n<h3 id=\"面试题\"><a href=\"#面试题\" class=\"headerlink\" title=\"面试题\"></a>面试题</h3><ul>\n<li><a href=\"https://github.com/JackyAndroid/AndroidInterview-Q-A\" target=\"_blank\" rel=\"noopener\">国内一线互联网公司内部面试题库</a></li>\n<li><a href=\"https://github.com/GeniusVJR/LearningNotes\" target=\"_blank\" rel=\"noopener\">Android 开发工程师面试指南</a></li>\n<li><a href=\"http://gdky005.com/2016/07/08/%E4%B8%80%E4%B8%AA%E4%BA%94%E5%B9%B4Android%E5%BC%80%E5%8F%91%E8%80%85%E7%99%BE%E5%BA%A6%E3%80%81%E9%98%BF%E9%87%8C%E3%80%81%E8%81%9A%E7%BE%8E%E3%80%81%E6%98%A0%E5%AE%A2%E7%9A%84%E9%9D%A2%E8%AF%95%E5%BF%83%E7%BB%8F/\" target=\"_blank\" rel=\"noopener\">一个五年 Android 开发者百度, 阿里, 聚美, 映客的面试心经</a></li>\n<li><a href=\"https://github.com/leerduo/InterviewQuestion\" target=\"_blank\" rel=\"noopener\">整理常见 Android 面试问题</a></li>\n<li><a href=\"http://yuweiguocn.github.io/2016/04/13/interview-2016-big-company/\" target=\"_blank\" rel=\"noopener\">2016 Android 某公司面试题</a></li>\n<li><a href=\"http://kymjs.com/code/2016/03/08/01/\" target=\"_blank\" rel=\"noopener\">面试后的总结</a></li>\n<li><a href=\"http://www.jianshu.com/p/a22450882af2\" target=\"_blank\" rel=\"noopener\">Android 面试题整理</a></li>\n<li><a href=\"http://androidquestions.quora.com/Android-interview-questions-for-2-5-yrs-experienced\" target=\"_blank\" rel=\"noopener\">Android interview questions for 2-5 yrs experienced</a></li>\n<li><a href=\"http://androidquestions.quora.com/Android-interview-questions\" target=\"_blank\" rel=\"noopener\">Android interview questions</a></li>\n<li><a href=\"http://www.devstore.cn/essay/essayInfo/7195.html\" target=\"_blank\" rel=\"noopener\">40 个 Android 面试题</a></li>\n<li><a href=\"https://github.com/Mr-YangCheng/ForAndroidInterview\" target=\"_blank\" rel=\"noopener\">Android 名企面试题及涉及知识点整理</a></li>\n<li><a href=\"http://www.jianshu.com/p/89f19d67b348\" target=\"_blank\" rel=\"noopener\">亲爱的面试官，这个我可没看过！（Android部分）</a></li>\n</ul>\n<h3 id=\"做题\"><a href=\"#做题\" class=\"headerlink\" title=\"做题\"></a>做题</h3><p>看完面试题之后那就来做一下面试题目吧, 目前找到两个网站</p>\n<ul>\n<li><a href=\"http://skillgun.com/android/interview-questions-and-answers\" target=\"_blank\" rel=\"noopener\">SillGun</a>(国外网站, 自备梯子)</li>\n<li><a href=\"http://www.nowcoder.com/\" target=\"_blank\" rel=\"noopener\">牛客网</a></li>\n</ul>\n<h3 id=\"聊面试\"><a href=\"#聊面试\" class=\"headerlink\" title=\"聊面试\"></a>聊面试</h3><p><a href=\"http://stormzhang.com/\" target=\"_blank\" rel=\"noopener\">(帅张)stormzhang</a> 跟你谈一下面试那些事儿</p>\n<ul>\n<li><a href=\"http://mp.weixin.qq.com/s?__biz=MzA4NTQwNDcyMA==&mid=2650661810&idx=1&sn=f8c1ca67527459db3189a978f0e44cef&scene=23&srcid=08101MZAPzGR1MC1C577enim#rd\" target=\"_blank\" rel=\"noopener\">面试时企业最看中你什么能力?</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/21343656?refer=stormzhang\" target=\"_blank\" rel=\"noopener\">我面试到底问什么?</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/21565914?refer=stormzhang\" target=\"_blank\" rel=\"noopener\">Android 面试那些事儿</a></li>\n</ul>\n<h3 id=\"知乎讨论\"><a href=\"#知乎讨论\" class=\"headerlink\" title=\"知乎讨论\"></a>知乎讨论</h3><ul>\n<li><a href=\"https://www.zhihu.com/question/19765032\" target=\"_blank\" rel=\"noopener\">面试时, 问哪些问题能试出一个 Android 应用开发者真正的水平?</a></li>\n<li><a href=\"https://www.zhihu.com/question/38982159\" target=\"_blank\" rel=\"noopener\">我用个假简历去面试 android 的结果为什么会这样?</a></li>\n<li><a href=\"https://www.zhihu.com/question/37483907\" target=\"_blank\" rel=\"noopener\">怎么准备Android面试?</a></li>\n</ul>\n<h3 id=\"互联网招聘平台\"><a href=\"#互联网招聘平台\" class=\"headerlink\" title=\"互联网招聘平台\"></a>互联网招聘平台</h3><ul>\n<li><a href=\"http://www.lagou.com/\" target=\"_blank\" rel=\"noopener\">拉勾-专注互联网职业机会</a></li>\n<li><a href=\"https://jianxun.io/\" target=\"_blank\" rel=\"noopener\">简寻-让职位推荐更精准</a></li>\n<li><a href=\"https://100offer.com/\" target=\"_blank\" rel=\"noopener\">100 offer-帮最好的互联网人发现更好的offer</a></li>\n<li><a href=\"https://www.bosszhipin.com/home/#index\" target=\"_blank\" rel=\"noopener\">BOSS 直聘-互联网招聘神器</a></li>\n<li><a href=\"https://www.linkedin.com/\" target=\"_blank\" rel=\"noopener\">LinkedIn (领英)</a></li>\n<li><a href=\"https://www.nashangban.com/\" target=\"_blank\" rel=\"noopener\">哪上班</a></li>\n</ul>\n<h3 id=\"感谢\"><a href=\"#感谢\" class=\"headerlink\" title=\"感谢\"></a>感谢</h3><p>非常感谢上面分享面试资料以及面试经验的前辈们!\n有前辈在前面带路, 我们后辈真心感到幸福.</p>\n<h3 id=\"祝福\"><a href=\"#祝福\" class=\"headerlink\" title=\"祝福\"></a>祝福</h3><p>最后祝正在找工作的的童鞋们, 马到成功, 心想事成, 事事如意!</p>\n<h3 id=\"关于我\"><a href=\"#关于我\" class=\"headerlink\" title=\"关于我\"></a>关于我</h3><p>欢迎关注我 <a href=\"https://github.com/Freelander\" target=\"_blank\" rel=\"noopener\">Github</a> 以及 <a href=\"http://weibo.com/gaojunhuang\" target=\"_blank\" rel=\"noopener\">微博</a></p>\n"},{"title":"如何给 Android 原生模拟器配置代理","date":"2017-03-02T14:14:37.000Z","_content":"\n\n**原生模拟器 Android 4.4**\n\n> 设置 --> 移动网络设置 --> 接入点名称（APN）--> T-Mobile US --> 设置代理\n\n> 代理：10.0.2.2  端口：8888\n\n> 设置完之后，开启下飞行模式，过几秒再关闭","source":"_posts/android-setting-proxy.md","raw":"---\ntitle: 如何给 Android 原生模拟器配置代理\ndate: 2017-03-02 22:14:37\ntags: \ncategories: 随笔\n---\n\n\n**原生模拟器 Android 4.4**\n\n> 设置 --> 移动网络设置 --> 接入点名称（APN）--> T-Mobile US --> 设置代理\n\n> 代理：10.0.2.2  端口：8888\n\n> 设置完之后，开启下飞行模式，过几秒再关闭","slug":"android-setting-proxy","published":1,"updated":"2019-06-22T14:45:43.968Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cks0kficd000ew3yzuq86g861","content":"<p><strong>原生模拟器 Android 4.4</strong></p>\n<blockquote>\n<p>设置 –&gt; 移动网络设置 –&gt; 接入点名称（APN）–&gt; T-Mobile US –&gt; 设置代理</p>\n</blockquote>\n<blockquote>\n<p>代理：10.0.2.2  端口：8888</p>\n</blockquote>\n<blockquote>\n<p>设置完之后，开启下飞行模式，过几秒再关闭</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p><strong>原生模拟器 Android 4.4</strong></p>\n<blockquote>\n<p>设置 –&gt; 移动网络设置 –&gt; 接入点名称（APN）–&gt; T-Mobile US –&gt; 设置代理</p>\n</blockquote>\n<blockquote>\n<p>代理：10.0.2.2  端口：8888</p>\n</blockquote>\n<blockquote>\n<p>设置完之后，开启下飞行模式，过几秒再关闭</p>\n</blockquote>\n"},{"title":"如何设置 BottomSheetDialog 高度","date":"2017-02-18T15:45:23.000Z","_content":"\nBottomSheetDialog 控制初始高度是跟 behavior_peekHeight 属性有关\n\n### 样式主题设置\n```\n<style name=\"BottomSheetDialog\" parent=\"Theme.Design.Light.BottomSheetDialog\">\n    <item name=\"bottomSheetStyle\">@style/bottomSheetStyleWrapper</item>\n</style>\n\n<style name=\"bottomSheetStyleWrapper\" parent=\"Widget.Design.BottomSheet.Modal\">\n    <item name=\"behavior_peekHeight\">500dp</item>\n</style>\n\n<!--代码中应用-->\nBottomSheetDialog dialog = new BottomSheetDialog(this, R.style.BottomSheetDialog);\n            dialog.setContentView(R.layout.layout_bottom_sheet);\n            dialog.show();\n```\n\n### 动态代码设置\n\n1. Dialog 的布局最外层使用 RelativeLayout 或者 ConstraintLayout, 其他控件设置高度无法生效\n2. 需要在子内容布局设置高度 match_parent；\n```\n<RelativeLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    android:id=\"@+id/rl_container\"\n    android:orientation=\"vertical\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"wrap_content\"\n    android:background=\"@color/text_white\">\n\n    <LinearLayout\n        android:id=\"@+id/ll_address_top\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        android:minHeight=\"?attr/actionBarSize\"\n        android:orientation=\"horizontal\">\n        \n    </LinearLayout>\n\n</RelativeLayout>\n\n```\n3. 设置高度的代码\n\n```\nView parent = (View) mContentView.getParent();\nif (parent != null) {\n    BottomSheetBehavior mBehavior = BottomSheetBehavior.from(parent);\n    DisplayMetrics displayMetrics = getContext().getResources().getDisplayMetrics();\n    int screenHeight = displayMetrics.heightPixels;\n    mBehavior.setPeekHeight((int) (screenHeight * 0.45));\n    parent.setBackgroundColor(Color.TRANSPARENT);\n}\n```\n\n### 简单粗暴直接给父布局一个高度\n\n```\n<RelativeLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    android:id=\"@+id/rl_container\"\n    android:orientation=\"vertical\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"wrap_content\"\n    android:minHeight=\"300dp\"\n    android:background=\"@color/text_white\">\n\n    <LinearLayout\n        android:id=\"@+id/ll_address_top\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:minHeight=\"?attr/actionBarSize\"\n        android:orientation=\"horizontal\">\n        \n    </LinearLayout>\n\n</RelativeLayout>\n```","source":"_posts/bottom-sheet-dialog-height.md","raw":"---\ntitle: 如何设置 BottomSheetDialog 高度\ndate: 2017-02-18 23:45:23\ntags: [Android]\ncategories: Android\n---\n\nBottomSheetDialog 控制初始高度是跟 behavior_peekHeight 属性有关\n\n### 样式主题设置\n```\n<style name=\"BottomSheetDialog\" parent=\"Theme.Design.Light.BottomSheetDialog\">\n    <item name=\"bottomSheetStyle\">@style/bottomSheetStyleWrapper</item>\n</style>\n\n<style name=\"bottomSheetStyleWrapper\" parent=\"Widget.Design.BottomSheet.Modal\">\n    <item name=\"behavior_peekHeight\">500dp</item>\n</style>\n\n<!--代码中应用-->\nBottomSheetDialog dialog = new BottomSheetDialog(this, R.style.BottomSheetDialog);\n            dialog.setContentView(R.layout.layout_bottom_sheet);\n            dialog.show();\n```\n\n### 动态代码设置\n\n1. Dialog 的布局最外层使用 RelativeLayout 或者 ConstraintLayout, 其他控件设置高度无法生效\n2. 需要在子内容布局设置高度 match_parent；\n```\n<RelativeLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    android:id=\"@+id/rl_container\"\n    android:orientation=\"vertical\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"wrap_content\"\n    android:background=\"@color/text_white\">\n\n    <LinearLayout\n        android:id=\"@+id/ll_address_top\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        android:minHeight=\"?attr/actionBarSize\"\n        android:orientation=\"horizontal\">\n        \n    </LinearLayout>\n\n</RelativeLayout>\n\n```\n3. 设置高度的代码\n\n```\nView parent = (View) mContentView.getParent();\nif (parent != null) {\n    BottomSheetBehavior mBehavior = BottomSheetBehavior.from(parent);\n    DisplayMetrics displayMetrics = getContext().getResources().getDisplayMetrics();\n    int screenHeight = displayMetrics.heightPixels;\n    mBehavior.setPeekHeight((int) (screenHeight * 0.45));\n    parent.setBackgroundColor(Color.TRANSPARENT);\n}\n```\n\n### 简单粗暴直接给父布局一个高度\n\n```\n<RelativeLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    android:id=\"@+id/rl_container\"\n    android:orientation=\"vertical\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"wrap_content\"\n    android:minHeight=\"300dp\"\n    android:background=\"@color/text_white\">\n\n    <LinearLayout\n        android:id=\"@+id/ll_address_top\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:minHeight=\"?attr/actionBarSize\"\n        android:orientation=\"horizontal\">\n        \n    </LinearLayout>\n\n</RelativeLayout>\n```","slug":"bottom-sheet-dialog-height","published":1,"updated":"2019-06-18T15:48:06.451Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cks0kficf000hw3yzdgm5emlq","content":"<p>BottomSheetDialog 控制初始高度是跟 behavior_peekHeight 属性有关</p>\n<h3 id=\"样式主题设置\"><a href=\"#样式主题设置\" class=\"headerlink\" title=\"样式主题设置\"></a>样式主题设置</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;style name=&quot;BottomSheetDialog&quot; parent=&quot;Theme.Design.Light.BottomSheetDialog&quot;&gt;</span><br><span class=\"line\">    &lt;item name=&quot;bottomSheetStyle&quot;&gt;@style/bottomSheetStyleWrapper&lt;/item&gt;</span><br><span class=\"line\">&lt;/style&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;style name=&quot;bottomSheetStyleWrapper&quot; parent=&quot;Widget.Design.BottomSheet.Modal&quot;&gt;</span><br><span class=\"line\">    &lt;item name=&quot;behavior_peekHeight&quot;&gt;500dp&lt;/item&gt;</span><br><span class=\"line\">&lt;/style&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!--代码中应用--&gt;</span><br><span class=\"line\">BottomSheetDialog dialog = new BottomSheetDialog(this, R.style.BottomSheetDialog);</span><br><span class=\"line\">            dialog.setContentView(R.layout.layout_bottom_sheet);</span><br><span class=\"line\">            dialog.show();</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"动态代码设置\"><a href=\"#动态代码设置\" class=\"headerlink\" title=\"动态代码设置\"></a>动态代码设置</h3><ol>\n<li><p>Dialog 的布局最外层使用 RelativeLayout 或者 ConstraintLayout, 其他控件设置高度无法生效</p>\n</li>\n<li><p>需要在子内容布局设置高度 match_parent；</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;RelativeLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</span><br><span class=\"line\">    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;</span><br><span class=\"line\">    android:id=&quot;@+id/rl_container&quot;</span><br><span class=\"line\">    android:orientation=&quot;vertical&quot;</span><br><span class=\"line\">    android:layout_width=&quot;match_parent&quot;</span><br><span class=\"line\">    android:layout_height=&quot;wrap_content&quot;</span><br><span class=\"line\">    android:background=&quot;@color/text_white&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;LinearLayout</span><br><span class=\"line\">        android:id=&quot;@+id/ll_address_top&quot;</span><br><span class=\"line\">        android:layout_width=&quot;match_parent&quot;</span><br><span class=\"line\">        android:layout_height=&quot;match_parent&quot;</span><br><span class=\"line\">        android:minHeight=&quot;?attr/actionBarSize&quot;</span><br><span class=\"line\">        android:orientation=&quot;horizontal&quot;&gt;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &lt;/LinearLayout&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/RelativeLayout&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>设置高度的代码</p>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">View parent = (View) mContentView.getParent();</span><br><span class=\"line\">if (parent != null) &#123;</span><br><span class=\"line\">    BottomSheetBehavior mBehavior = BottomSheetBehavior.from(parent);</span><br><span class=\"line\">    DisplayMetrics displayMetrics = getContext().getResources().getDisplayMetrics();</span><br><span class=\"line\">    int screenHeight = displayMetrics.heightPixels;</span><br><span class=\"line\">    mBehavior.setPeekHeight((int) (screenHeight * 0.45));</span><br><span class=\"line\">    parent.setBackgroundColor(Color.TRANSPARENT);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"简单粗暴直接给父布局一个高度\"><a href=\"#简单粗暴直接给父布局一个高度\" class=\"headerlink\" title=\"简单粗暴直接给父布局一个高度\"></a>简单粗暴直接给父布局一个高度</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;RelativeLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</span><br><span class=\"line\">    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;</span><br><span class=\"line\">    android:id=&quot;@+id/rl_container&quot;</span><br><span class=\"line\">    android:orientation=&quot;vertical&quot;</span><br><span class=\"line\">    android:layout_width=&quot;match_parent&quot;</span><br><span class=\"line\">    android:layout_height=&quot;wrap_content&quot;</span><br><span class=\"line\">    android:minHeight=&quot;300dp&quot;</span><br><span class=\"line\">    android:background=&quot;@color/text_white&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;LinearLayout</span><br><span class=\"line\">        android:id=&quot;@+id/ll_address_top&quot;</span><br><span class=\"line\">        android:layout_width=&quot;match_parent&quot;</span><br><span class=\"line\">        android:layout_height=&quot;wrap_content&quot;</span><br><span class=\"line\">        android:minHeight=&quot;?attr/actionBarSize&quot;</span><br><span class=\"line\">        android:orientation=&quot;horizontal&quot;&gt;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &lt;/LinearLayout&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/RelativeLayout&gt;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p>BottomSheetDialog 控制初始高度是跟 behavior_peekHeight 属性有关</p>\n<h3 id=\"样式主题设置\"><a href=\"#样式主题设置\" class=\"headerlink\" title=\"样式主题设置\"></a>样式主题设置</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;style name=&quot;BottomSheetDialog&quot; parent=&quot;Theme.Design.Light.BottomSheetDialog&quot;&gt;</span><br><span class=\"line\">    &lt;item name=&quot;bottomSheetStyle&quot;&gt;@style/bottomSheetStyleWrapper&lt;/item&gt;</span><br><span class=\"line\">&lt;/style&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;style name=&quot;bottomSheetStyleWrapper&quot; parent=&quot;Widget.Design.BottomSheet.Modal&quot;&gt;</span><br><span class=\"line\">    &lt;item name=&quot;behavior_peekHeight&quot;&gt;500dp&lt;/item&gt;</span><br><span class=\"line\">&lt;/style&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!--代码中应用--&gt;</span><br><span class=\"line\">BottomSheetDialog dialog = new BottomSheetDialog(this, R.style.BottomSheetDialog);</span><br><span class=\"line\">            dialog.setContentView(R.layout.layout_bottom_sheet);</span><br><span class=\"line\">            dialog.show();</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"动态代码设置\"><a href=\"#动态代码设置\" class=\"headerlink\" title=\"动态代码设置\"></a>动态代码设置</h3><ol>\n<li><p>Dialog 的布局最外层使用 RelativeLayout 或者 ConstraintLayout, 其他控件设置高度无法生效</p>\n</li>\n<li><p>需要在子内容布局设置高度 match_parent；</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;RelativeLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</span><br><span class=\"line\">    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;</span><br><span class=\"line\">    android:id=&quot;@+id/rl_container&quot;</span><br><span class=\"line\">    android:orientation=&quot;vertical&quot;</span><br><span class=\"line\">    android:layout_width=&quot;match_parent&quot;</span><br><span class=\"line\">    android:layout_height=&quot;wrap_content&quot;</span><br><span class=\"line\">    android:background=&quot;@color/text_white&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;LinearLayout</span><br><span class=\"line\">        android:id=&quot;@+id/ll_address_top&quot;</span><br><span class=\"line\">        android:layout_width=&quot;match_parent&quot;</span><br><span class=\"line\">        android:layout_height=&quot;match_parent&quot;</span><br><span class=\"line\">        android:minHeight=&quot;?attr/actionBarSize&quot;</span><br><span class=\"line\">        android:orientation=&quot;horizontal&quot;&gt;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &lt;/LinearLayout&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/RelativeLayout&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>设置高度的代码</p>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">View parent = (View) mContentView.getParent();</span><br><span class=\"line\">if (parent != null) &#123;</span><br><span class=\"line\">    BottomSheetBehavior mBehavior = BottomSheetBehavior.from(parent);</span><br><span class=\"line\">    DisplayMetrics displayMetrics = getContext().getResources().getDisplayMetrics();</span><br><span class=\"line\">    int screenHeight = displayMetrics.heightPixels;</span><br><span class=\"line\">    mBehavior.setPeekHeight((int) (screenHeight * 0.45));</span><br><span class=\"line\">    parent.setBackgroundColor(Color.TRANSPARENT);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"简单粗暴直接给父布局一个高度\"><a href=\"#简单粗暴直接给父布局一个高度\" class=\"headerlink\" title=\"简单粗暴直接给父布局一个高度\"></a>简单粗暴直接给父布局一个高度</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;RelativeLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</span><br><span class=\"line\">    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;</span><br><span class=\"line\">    android:id=&quot;@+id/rl_container&quot;</span><br><span class=\"line\">    android:orientation=&quot;vertical&quot;</span><br><span class=\"line\">    android:layout_width=&quot;match_parent&quot;</span><br><span class=\"line\">    android:layout_height=&quot;wrap_content&quot;</span><br><span class=\"line\">    android:minHeight=&quot;300dp&quot;</span><br><span class=\"line\">    android:background=&quot;@color/text_white&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;LinearLayout</span><br><span class=\"line\">        android:id=&quot;@+id/ll_address_top&quot;</span><br><span class=\"line\">        android:layout_width=&quot;match_parent&quot;</span><br><span class=\"line\">        android:layout_height=&quot;wrap_content&quot;</span><br><span class=\"line\">        android:minHeight=&quot;?attr/actionBarSize&quot;</span><br><span class=\"line\">        android:orientation=&quot;horizontal&quot;&gt;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &lt;/LinearLayout&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/RelativeLayout&gt;</span><br></pre></td></tr></table></figure>"},{"title":"公司项目 Git 管理流程及规范","date":"2021-08-04T15:01:01.000Z","_content":"\n目前公司项目 Git 管理规范是基于 git-flow 扩展而来。\n\ngit-flow 最先来源于 Vincent Driessen 一篇名为[“一种成功的Git分支模型”](https://nvie.com/posts/a-successful-git-branching-model/)的博文，后来 git-flow 被誉为在 Git 之上构建的一项软件开发最佳实践。\n\n## 工具\n\n通过安装工具可以帮助我们更方便按照 git-flow 工作流程进行项目管理。\n\n### Mac\n\n> brew install git-flow\n\n**其他终端安装方法，可以到 [这里](https://github.com/nvie/gitflow/wiki/Installation) 查看。**\n\n## 常用命令\n\n* **初始化使用：** ``git flow init``\n* **创建 Feature 分支：** ``git flow feature start branch_name``\n* **创建 Release 分支：** ``git flow release start branch_name``\n* **结束 Release 分支：** ``git flow release finish branch_name``\n* **将结束 Release 分支时产生的 tag 推到远程：** ``git push --tags``\n\n## 公司项目 Git 管理流程\n\n下面的流程图，展示了目前项目基于 git-flow 并结合公司业务拓展定义的 git 管理流程规范。\n\n![image](/images/2021/07/company-project-git-01.png)\n\n## 分支命名规范\n\n### 需求开发分支命名规范\n\n> 版本号_开发人名称首字母_需求简述\n\n例如：feature/6.15.0_hgj_优化AfterPay介绍页面\n\n若使用 git-flow 工具命令创建 \n\n```bash\ngit flow feature start 6.15.0_hgj_优化AfterPay介绍页面\n```\n\n### 发版分支命名规范\n\n> 发版的版本号\n\n例如：release/6.15.0\n\n若使用 git-flow 工具命令创建 \n\n```bash\ngit flow release start 6.15.0\n```\n### 效果展示\n\n![image](/images/2021/07/company-project-git-02.png)\n\n\n## Git Commit 规范\n\n为了更加方便查找 git commit 的日志，因此有必要在 commit 的时候进行备注说明类型。\n\n参考阮老师的文章：[地址](https://www.ruanyifeng.com/blog/2016/01/commit_message_change_log.html)\n\n与团队成员约定在 commit 填写 message 的时候，在前面加多一个 type，具体的类型如下：\n\n\n类型 | 说明\n---|---\nfeat | 新功能（feature）\nfix | 修补 bug\ndocs | 文档（documentation）\nstyle | 格式（不影响代码运行的变动）\nrefactor | 重构（即不是新增功能，也不是修改bug的代码变动）\ntest | 增加测试\nchore | 构建过程或辅助工具的变动\n\n> 例子：feat: 划线价逻辑调整 \n\n**注意冒号是使用英文的，且后面加多个空格。**\n\n## 资料\n\n* [git-flow 备忘清单](http://danielkummer.github.io/git-flow-cheatsheet/index.zh_CN.html)\n* [git-flow 流程规范](https://www.zybuluo.com/Roy270490837/note/835720)\n\n\n","source":"_posts/company-project-git.md","raw":"---\ntitle: 公司项目 Git 管理流程及规范\ndate: 2021-08-04 23:01:01\ntags: [Git]\ncategories: Git\n---\n\n目前公司项目 Git 管理规范是基于 git-flow 扩展而来。\n\ngit-flow 最先来源于 Vincent Driessen 一篇名为[“一种成功的Git分支模型”](https://nvie.com/posts/a-successful-git-branching-model/)的博文，后来 git-flow 被誉为在 Git 之上构建的一项软件开发最佳实践。\n\n## 工具\n\n通过安装工具可以帮助我们更方便按照 git-flow 工作流程进行项目管理。\n\n### Mac\n\n> brew install git-flow\n\n**其他终端安装方法，可以到 [这里](https://github.com/nvie/gitflow/wiki/Installation) 查看。**\n\n## 常用命令\n\n* **初始化使用：** ``git flow init``\n* **创建 Feature 分支：** ``git flow feature start branch_name``\n* **创建 Release 分支：** ``git flow release start branch_name``\n* **结束 Release 分支：** ``git flow release finish branch_name``\n* **将结束 Release 分支时产生的 tag 推到远程：** ``git push --tags``\n\n## 公司项目 Git 管理流程\n\n下面的流程图，展示了目前项目基于 git-flow 并结合公司业务拓展定义的 git 管理流程规范。\n\n![image](/images/2021/07/company-project-git-01.png)\n\n## 分支命名规范\n\n### 需求开发分支命名规范\n\n> 版本号_开发人名称首字母_需求简述\n\n例如：feature/6.15.0_hgj_优化AfterPay介绍页面\n\n若使用 git-flow 工具命令创建 \n\n```bash\ngit flow feature start 6.15.0_hgj_优化AfterPay介绍页面\n```\n\n### 发版分支命名规范\n\n> 发版的版本号\n\n例如：release/6.15.0\n\n若使用 git-flow 工具命令创建 \n\n```bash\ngit flow release start 6.15.0\n```\n### 效果展示\n\n![image](/images/2021/07/company-project-git-02.png)\n\n\n## Git Commit 规范\n\n为了更加方便查找 git commit 的日志，因此有必要在 commit 的时候进行备注说明类型。\n\n参考阮老师的文章：[地址](https://www.ruanyifeng.com/blog/2016/01/commit_message_change_log.html)\n\n与团队成员约定在 commit 填写 message 的时候，在前面加多一个 type，具体的类型如下：\n\n\n类型 | 说明\n---|---\nfeat | 新功能（feature）\nfix | 修补 bug\ndocs | 文档（documentation）\nstyle | 格式（不影响代码运行的变动）\nrefactor | 重构（即不是新增功能，也不是修改bug的代码变动）\ntest | 增加测试\nchore | 构建过程或辅助工具的变动\n\n> 例子：feat: 划线价逻辑调整 \n\n**注意冒号是使用英文的，且后面加多个空格。**\n\n## 资料\n\n* [git-flow 备忘清单](http://danielkummer.github.io/git-flow-cheatsheet/index.zh_CN.html)\n* [git-flow 流程规范](https://www.zybuluo.com/Roy270490837/note/835720)\n\n\n","slug":"company-project-git","published":1,"updated":"2021-08-04T15:17:50.921Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cks0kfici000kw3yzr05qja1m","content":"<p>目前公司项目 Git 管理规范是基于 git-flow 扩展而来。</p>\n<p>git-flow 最先来源于 Vincent Driessen 一篇名为<a href=\"https://nvie.com/posts/a-successful-git-branching-model/\" target=\"_blank\" rel=\"noopener\">“一种成功的Git分支模型”</a>的博文，后来 git-flow 被誉为在 Git 之上构建的一项软件开发最佳实践。</p>\n<h2 id=\"工具\"><a href=\"#工具\" class=\"headerlink\" title=\"工具\"></a>工具</h2><p>通过安装工具可以帮助我们更方便按照 git-flow 工作流程进行项目管理。</p>\n<h3 id=\"Mac\"><a href=\"#Mac\" class=\"headerlink\" title=\"Mac\"></a>Mac</h3><blockquote>\n<p>brew install git-flow</p>\n</blockquote>\n<p><strong>其他终端安装方法，可以到 <a href=\"https://github.com/nvie/gitflow/wiki/Installation\" target=\"_blank\" rel=\"noopener\">这里</a> 查看。</strong></p>\n<h2 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h2><ul>\n<li><strong>初始化使用：</strong> <code>git flow init</code></li>\n<li><strong>创建 Feature 分支：</strong> <code>git flow feature start branch_name</code></li>\n<li><strong>创建 Release 分支：</strong> <code>git flow release start branch_name</code></li>\n<li><strong>结束 Release 分支：</strong> <code>git flow release finish branch_name</code></li>\n<li><strong>将结束 Release 分支时产生的 tag 推到远程：</strong> <code>git push --tags</code></li>\n</ul>\n<h2 id=\"公司项目-Git-管理流程\"><a href=\"#公司项目-Git-管理流程\" class=\"headerlink\" title=\"公司项目 Git 管理流程\"></a>公司项目 Git 管理流程</h2><p>下面的流程图，展示了目前项目基于 git-flow 并结合公司业务拓展定义的 git 管理流程规范。</p>\n<p><img src=\"/images/2021/07/company-project-git-01.png\" alt=\"image\"></p>\n<h2 id=\"分支命名规范\"><a href=\"#分支命名规范\" class=\"headerlink\" title=\"分支命名规范\"></a>分支命名规范</h2><h3 id=\"需求开发分支命名规范\"><a href=\"#需求开发分支命名规范\" class=\"headerlink\" title=\"需求开发分支命名规范\"></a>需求开发分支命名规范</h3><blockquote>\n<p>版本号_开发人名称首字母_需求简述</p>\n</blockquote>\n<p>例如：feature/6.15.0_hgj_优化AfterPay介绍页面</p>\n<p>若使用 git-flow 工具命令创建 </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git flow feature start 6.15.0_hgj_优化AfterPay介绍页面</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"发版分支命名规范\"><a href=\"#发版分支命名规范\" class=\"headerlink\" title=\"发版分支命名规范\"></a>发版分支命名规范</h3><blockquote>\n<p>发版的版本号</p>\n</blockquote>\n<p>例如：release/6.15.0</p>\n<p>若使用 git-flow 工具命令创建 </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git flow release start 6.15.0</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"效果展示\"><a href=\"#效果展示\" class=\"headerlink\" title=\"效果展示\"></a>效果展示</h3><p><img src=\"/images/2021/07/company-project-git-02.png\" alt=\"image\"></p>\n<h2 id=\"Git-Commit-规范\"><a href=\"#Git-Commit-规范\" class=\"headerlink\" title=\"Git Commit 规范\"></a>Git Commit 规范</h2><p>为了更加方便查找 git commit 的日志，因此有必要在 commit 的时候进行备注说明类型。</p>\n<p>参考阮老师的文章：<a href=\"https://www.ruanyifeng.com/blog/2016/01/commit_message_change_log.html\" target=\"_blank\" rel=\"noopener\">地址</a></p>\n<p>与团队成员约定在 commit 填写 message 的时候，在前面加多一个 type，具体的类型如下：</p>\n<table>\n<thead>\n<tr>\n<th>类型</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>feat</td>\n<td>新功能（feature）</td>\n</tr>\n<tr>\n<td>fix</td>\n<td>修补 bug</td>\n</tr>\n<tr>\n<td>docs</td>\n<td>文档（documentation）</td>\n</tr>\n<tr>\n<td>style</td>\n<td>格式（不影响代码运行的变动）</td>\n</tr>\n<tr>\n<td>refactor</td>\n<td>重构（即不是新增功能，也不是修改bug的代码变动）</td>\n</tr>\n<tr>\n<td>test</td>\n<td>增加测试</td>\n</tr>\n<tr>\n<td>chore</td>\n<td>构建过程或辅助工具的变动</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>例子：feat: 划线价逻辑调整 </p>\n</blockquote>\n<p><strong>注意冒号是使用英文的，且后面加多个空格。</strong></p>\n<h2 id=\"资料\"><a href=\"#资料\" class=\"headerlink\" title=\"资料\"></a>资料</h2><ul>\n<li><a href=\"http://danielkummer.github.io/git-flow-cheatsheet/index.zh_CN.html\" target=\"_blank\" rel=\"noopener\">git-flow 备忘清单</a></li>\n<li><a href=\"https://www.zybuluo.com/Roy270490837/note/835720\" target=\"_blank\" rel=\"noopener\">git-flow 流程规范</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>目前公司项目 Git 管理规范是基于 git-flow 扩展而来。</p>\n<p>git-flow 最先来源于 Vincent Driessen 一篇名为<a href=\"https://nvie.com/posts/a-successful-git-branching-model/\" target=\"_blank\" rel=\"noopener\">“一种成功的Git分支模型”</a>的博文，后来 git-flow 被誉为在 Git 之上构建的一项软件开发最佳实践。</p>\n<h2 id=\"工具\"><a href=\"#工具\" class=\"headerlink\" title=\"工具\"></a>工具</h2><p>通过安装工具可以帮助我们更方便按照 git-flow 工作流程进行项目管理。</p>\n<h3 id=\"Mac\"><a href=\"#Mac\" class=\"headerlink\" title=\"Mac\"></a>Mac</h3><blockquote>\n<p>brew install git-flow</p>\n</blockquote>\n<p><strong>其他终端安装方法，可以到 <a href=\"https://github.com/nvie/gitflow/wiki/Installation\" target=\"_blank\" rel=\"noopener\">这里</a> 查看。</strong></p>\n<h2 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h2><ul>\n<li><strong>初始化使用：</strong> <code>git flow init</code></li>\n<li><strong>创建 Feature 分支：</strong> <code>git flow feature start branch_name</code></li>\n<li><strong>创建 Release 分支：</strong> <code>git flow release start branch_name</code></li>\n<li><strong>结束 Release 分支：</strong> <code>git flow release finish branch_name</code></li>\n<li><strong>将结束 Release 分支时产生的 tag 推到远程：</strong> <code>git push --tags</code></li>\n</ul>\n<h2 id=\"公司项目-Git-管理流程\"><a href=\"#公司项目-Git-管理流程\" class=\"headerlink\" title=\"公司项目 Git 管理流程\"></a>公司项目 Git 管理流程</h2><p>下面的流程图，展示了目前项目基于 git-flow 并结合公司业务拓展定义的 git 管理流程规范。</p>\n<p><img src=\"/images/2021/07/company-project-git-01.png\" alt=\"image\"></p>\n<h2 id=\"分支命名规范\"><a href=\"#分支命名规范\" class=\"headerlink\" title=\"分支命名规范\"></a>分支命名规范</h2><h3 id=\"需求开发分支命名规范\"><a href=\"#需求开发分支命名规范\" class=\"headerlink\" title=\"需求开发分支命名规范\"></a>需求开发分支命名规范</h3><blockquote>\n<p>版本号_开发人名称首字母_需求简述</p>\n</blockquote>\n<p>例如：feature/6.15.0_hgj_优化AfterPay介绍页面</p>\n<p>若使用 git-flow 工具命令创建 </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git flow feature start 6.15.0_hgj_优化AfterPay介绍页面</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"发版分支命名规范\"><a href=\"#发版分支命名规范\" class=\"headerlink\" title=\"发版分支命名规范\"></a>发版分支命名规范</h3><blockquote>\n<p>发版的版本号</p>\n</blockquote>\n<p>例如：release/6.15.0</p>\n<p>若使用 git-flow 工具命令创建 </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git flow release start 6.15.0</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"效果展示\"><a href=\"#效果展示\" class=\"headerlink\" title=\"效果展示\"></a>效果展示</h3><p><img src=\"/images/2021/07/company-project-git-02.png\" alt=\"image\"></p>\n<h2 id=\"Git-Commit-规范\"><a href=\"#Git-Commit-规范\" class=\"headerlink\" title=\"Git Commit 规范\"></a>Git Commit 规范</h2><p>为了更加方便查找 git commit 的日志，因此有必要在 commit 的时候进行备注说明类型。</p>\n<p>参考阮老师的文章：<a href=\"https://www.ruanyifeng.com/blog/2016/01/commit_message_change_log.html\" target=\"_blank\" rel=\"noopener\">地址</a></p>\n<p>与团队成员约定在 commit 填写 message 的时候，在前面加多一个 type，具体的类型如下：</p>\n<table>\n<thead>\n<tr>\n<th>类型</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>feat</td>\n<td>新功能（feature）</td>\n</tr>\n<tr>\n<td>fix</td>\n<td>修补 bug</td>\n</tr>\n<tr>\n<td>docs</td>\n<td>文档（documentation）</td>\n</tr>\n<tr>\n<td>style</td>\n<td>格式（不影响代码运行的变动）</td>\n</tr>\n<tr>\n<td>refactor</td>\n<td>重构（即不是新增功能，也不是修改bug的代码变动）</td>\n</tr>\n<tr>\n<td>test</td>\n<td>增加测试</td>\n</tr>\n<tr>\n<td>chore</td>\n<td>构建过程或辅助工具的变动</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>例子：feat: 划线价逻辑调整 </p>\n</blockquote>\n<p><strong>注意冒号是使用英文的，且后面加多个空格。</strong></p>\n<h2 id=\"资料\"><a href=\"#资料\" class=\"headerlink\" title=\"资料\"></a>资料</h2><ul>\n<li><a href=\"http://danielkummer.github.io/git-flow-cheatsheet/index.zh_CN.html\" target=\"_blank\" rel=\"noopener\">git-flow 备忘清单</a></li>\n<li><a href=\"https://www.zybuluo.com/Roy270490837/note/835720\" target=\"_blank\" rel=\"noopener\">git-flow 流程规范</a></li>\n</ul>\n"},{"title":"Flutter 环境搭建（Mac）","date":"2020-01-20T15:43:21.000Z","_content":"\n### 下载 Flutter SDK\n\n1. 获取Flutter SDK的最新稳定版本：\n\n将 SDK 下载到指定文件夹下，建议创建一个专门开发 Flutter 项目的文件夹下。\n\n直接到[官网](https://flutter.dev/docs/development/tools/sdk/releases?tab=macos)下载稳定版回来。\n\n也可以通过 git 克隆对网络环境要求比较高，建议是从官网下载。\n\n```\ngit clone https://github.com/flutter/flutter.git\n```\n\n2. 配置环境变量\n\n```\n export PATH=\"$PATH:[PATH_TO_FLUTTER_GIT_DIRECTORY]/flutter/bin\"\n```\n\n>[PATH_TO_FLUTTER_GIT_DIRECTORY] 指上面你下载回来 SDK 存放的路径。\n\n将上面的代码放到 ``.bash_profile`` 文件中\n\n```\nvim ~/.bash_profile\n```\n\n生效配置环境\n\n```\nsource ~/.bash_profile\n```\n\n3. 检查环境变量是否配置成功\n\n```\nflutter -h\n```\n![image](/images/2020/01/flutter_build_01.png)\n\n如果出现这个信息说明环境已经配置成功了。\n\n4. 检查 Flutter 环境配置是否完成\n\n```\nflutter doctor\n```\n\n![image](/images/2020/01/flutter_build_02.png)\n\n>留意输出的信息，并且需要处理 ``[x]`` 与 ``[!]`` 的提示信息。\n\n![image](/images/2020/01/flutter_build_03.png)\n\n如果配置全没问题后，执行 ``flutter doctor`` 命令输出信息以上情况。\n\n### 下载 Dart SDK\n\nMac 通过 HomeBrew 安装\n\n```\nbrew tap dart-lang/dart\nbrew install dart\n```\n\n其他实用命令\n\n```\n#更新Dart版本\nbrew upgrade dart\n\n#切换本地指定版本\nbrew switch dart 2.1.0\n\n#查看当前Dart版本信息\nbrew info dart\n```\n\n### 文档\n\n* [Flutter 官方安装指南](https://flutter.dev/docs/get-started/install/macos)\n* [Dart 安装指南](https://dart.dev/get-dart)\n","source":"_posts/flutter-build.md","raw":"---\ntitle: Flutter 环境搭建（Mac）\ndate: 2020-01-20 23:43:21\ntags: [Flutter]\ncategories: Flutter\n---\n\n### 下载 Flutter SDK\n\n1. 获取Flutter SDK的最新稳定版本：\n\n将 SDK 下载到指定文件夹下，建议创建一个专门开发 Flutter 项目的文件夹下。\n\n直接到[官网](https://flutter.dev/docs/development/tools/sdk/releases?tab=macos)下载稳定版回来。\n\n也可以通过 git 克隆对网络环境要求比较高，建议是从官网下载。\n\n```\ngit clone https://github.com/flutter/flutter.git\n```\n\n2. 配置环境变量\n\n```\n export PATH=\"$PATH:[PATH_TO_FLUTTER_GIT_DIRECTORY]/flutter/bin\"\n```\n\n>[PATH_TO_FLUTTER_GIT_DIRECTORY] 指上面你下载回来 SDK 存放的路径。\n\n将上面的代码放到 ``.bash_profile`` 文件中\n\n```\nvim ~/.bash_profile\n```\n\n生效配置环境\n\n```\nsource ~/.bash_profile\n```\n\n3. 检查环境变量是否配置成功\n\n```\nflutter -h\n```\n![image](/images/2020/01/flutter_build_01.png)\n\n如果出现这个信息说明环境已经配置成功了。\n\n4. 检查 Flutter 环境配置是否完成\n\n```\nflutter doctor\n```\n\n![image](/images/2020/01/flutter_build_02.png)\n\n>留意输出的信息，并且需要处理 ``[x]`` 与 ``[!]`` 的提示信息。\n\n![image](/images/2020/01/flutter_build_03.png)\n\n如果配置全没问题后，执行 ``flutter doctor`` 命令输出信息以上情况。\n\n### 下载 Dart SDK\n\nMac 通过 HomeBrew 安装\n\n```\nbrew tap dart-lang/dart\nbrew install dart\n```\n\n其他实用命令\n\n```\n#更新Dart版本\nbrew upgrade dart\n\n#切换本地指定版本\nbrew switch dart 2.1.0\n\n#查看当前Dart版本信息\nbrew info dart\n```\n\n### 文档\n\n* [Flutter 官方安装指南](https://flutter.dev/docs/get-started/install/macos)\n* [Dart 安装指南](https://dart.dev/get-dart)\n","slug":"flutter-build","published":1,"updated":"2020-11-20T16:04:19.206Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cks0kfick000ow3yzo7es42r4","content":"<h3 id=\"下载-Flutter-SDK\"><a href=\"#下载-Flutter-SDK\" class=\"headerlink\" title=\"下载 Flutter SDK\"></a>下载 Flutter SDK</h3><ol>\n<li>获取Flutter SDK的最新稳定版本：</li>\n</ol>\n<p>将 SDK 下载到指定文件夹下，建议创建一个专门开发 Flutter 项目的文件夹下。</p>\n<p>直接到<a href=\"https://flutter.dev/docs/development/tools/sdk/releases?tab=macos\" target=\"_blank\" rel=\"noopener\">官网</a>下载稳定版回来。</p>\n<p>也可以通过 git 克隆对网络环境要求比较高，建议是从官网下载。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https://github.com/flutter/flutter.git</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>配置环境变量</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export PATH=&quot;$PATH:[PATH_TO_FLUTTER_GIT_DIRECTORY]/flutter/bin&quot;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>[PATH_TO_FLUTTER_GIT_DIRECTORY] 指上面你下载回来 SDK 存放的路径。</p>\n</blockquote>\n<p>将上面的代码放到 <code>.bash_profile</code> 文件中</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim ~/.bash_profile</span><br></pre></td></tr></table></figure>\n\n<p>生效配置环境</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source ~/.bash_profile</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>检查环境变量是否配置成功</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">flutter -h</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/2020/01/flutter_build_01.png\" alt=\"image\"></p>\n<p>如果出现这个信息说明环境已经配置成功了。</p>\n<ol start=\"4\">\n<li>检查 Flutter 环境配置是否完成</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">flutter doctor</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/2020/01/flutter_build_02.png\" alt=\"image\"></p>\n<blockquote>\n<p>留意输出的信息，并且需要处理 <code>[x]</code> 与 <code>[!]</code> 的提示信息。</p>\n</blockquote>\n<p><img src=\"/images/2020/01/flutter_build_03.png\" alt=\"image\"></p>\n<p>如果配置全没问题后，执行 <code>flutter doctor</code> 命令输出信息以上情况。</p>\n<h3 id=\"下载-Dart-SDK\"><a href=\"#下载-Dart-SDK\" class=\"headerlink\" title=\"下载 Dart SDK\"></a>下载 Dart SDK</h3><p>Mac 通过 HomeBrew 安装</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew tap dart-lang/dart</span><br><span class=\"line\">brew install dart</span><br></pre></td></tr></table></figure>\n\n<p>其他实用命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#更新Dart版本</span><br><span class=\"line\">brew upgrade dart</span><br><span class=\"line\"></span><br><span class=\"line\">#切换本地指定版本</span><br><span class=\"line\">brew switch dart 2.1.0</span><br><span class=\"line\"></span><br><span class=\"line\">#查看当前Dart版本信息</span><br><span class=\"line\">brew info dart</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"文档\"><a href=\"#文档\" class=\"headerlink\" title=\"文档\"></a>文档</h3><ul>\n<li><a href=\"https://flutter.dev/docs/get-started/install/macos\" target=\"_blank\" rel=\"noopener\">Flutter 官方安装指南</a></li>\n<li><a href=\"https://dart.dev/get-dart\" target=\"_blank\" rel=\"noopener\">Dart 安装指南</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"下载-Flutter-SDK\"><a href=\"#下载-Flutter-SDK\" class=\"headerlink\" title=\"下载 Flutter SDK\"></a>下载 Flutter SDK</h3><ol>\n<li>获取Flutter SDK的最新稳定版本：</li>\n</ol>\n<p>将 SDK 下载到指定文件夹下，建议创建一个专门开发 Flutter 项目的文件夹下。</p>\n<p>直接到<a href=\"https://flutter.dev/docs/development/tools/sdk/releases?tab=macos\" target=\"_blank\" rel=\"noopener\">官网</a>下载稳定版回来。</p>\n<p>也可以通过 git 克隆对网络环境要求比较高，建议是从官网下载。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https://github.com/flutter/flutter.git</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>配置环境变量</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export PATH=&quot;$PATH:[PATH_TO_FLUTTER_GIT_DIRECTORY]/flutter/bin&quot;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>[PATH_TO_FLUTTER_GIT_DIRECTORY] 指上面你下载回来 SDK 存放的路径。</p>\n</blockquote>\n<p>将上面的代码放到 <code>.bash_profile</code> 文件中</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim ~/.bash_profile</span><br></pre></td></tr></table></figure>\n\n<p>生效配置环境</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source ~/.bash_profile</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>检查环境变量是否配置成功</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">flutter -h</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/2020/01/flutter_build_01.png\" alt=\"image\"></p>\n<p>如果出现这个信息说明环境已经配置成功了。</p>\n<ol start=\"4\">\n<li>检查 Flutter 环境配置是否完成</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">flutter doctor</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/2020/01/flutter_build_02.png\" alt=\"image\"></p>\n<blockquote>\n<p>留意输出的信息，并且需要处理 <code>[x]</code> 与 <code>[!]</code> 的提示信息。</p>\n</blockquote>\n<p><img src=\"/images/2020/01/flutter_build_03.png\" alt=\"image\"></p>\n<p>如果配置全没问题后，执行 <code>flutter doctor</code> 命令输出信息以上情况。</p>\n<h3 id=\"下载-Dart-SDK\"><a href=\"#下载-Dart-SDK\" class=\"headerlink\" title=\"下载 Dart SDK\"></a>下载 Dart SDK</h3><p>Mac 通过 HomeBrew 安装</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew tap dart-lang/dart</span><br><span class=\"line\">brew install dart</span><br></pre></td></tr></table></figure>\n\n<p>其他实用命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#更新Dart版本</span><br><span class=\"line\">brew upgrade dart</span><br><span class=\"line\"></span><br><span class=\"line\">#切换本地指定版本</span><br><span class=\"line\">brew switch dart 2.1.0</span><br><span class=\"line\"></span><br><span class=\"line\">#查看当前Dart版本信息</span><br><span class=\"line\">brew info dart</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"文档\"><a href=\"#文档\" class=\"headerlink\" title=\"文档\"></a>文档</h3><ul>\n<li><a href=\"https://flutter.dev/docs/get-started/install/macos\" target=\"_blank\" rel=\"noopener\">Flutter 官方安装指南</a></li>\n<li><a href=\"https://dart.dev/get-dart\" target=\"_blank\" rel=\"noopener\">Dart 安装指南</a></li>\n</ul>\n"},{"title":"是时候让你项目用上 ViewBindings 了","date":"2019-06-13T15:37:07.000Z","_content":"\n## 写在前面\n\n相信大多数人在写 findViewById 都是烦恼的，不少人会使用 ButterKnife 来简化，利用插件会自动生成绑定 View 代码，可是一旦界面控件多时候，就会出现几十行甚至上百行的 BindView 代码。此时有没有更好的框架来帮我们呢？\n\n答案是有的，在前不久的 Google IO 2019 上面提到了 ViewBindings 概念，后来我详细了解后，发现这个东西可以理解为 DataBinding 的一部分，具体区别在于 ViewBindings 只是视图绑定部分。想更深入了解两者区别，可以看下 [这篇文章](https://proandroiddev.com/new-in-android-viewbindings-the-difference-from-databinding-library-bef5945baf5e)\n\n## 使用\n\n### 构建 DataBingding 环境\n\n在 App 模块的 build.gradle 文件中添加 DataBinding 配置\n\n```\nandroid {\n    ....\n    dataBinding {\n        enabled = true\n    }\n}\n```\n\n### 在基类配置 Bingding 代码\n\n#### Activity\n\n```\npublic class CustomActivity<VB extends ViewDataBinding> extends AppCompatActivity {\n\n    private View mContentView;\n    protected VB mViewBinding;\n    \n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n    }\n    \n    @Override\n    public void setContentView(@LayoutRes int layoutResID) {\n        mContentView = View.inflate(this, layoutResID, null);\n        mViewBinding = DataBindingUtil.bind(mContentView);\n        super.setContentView(mContentView);\n    }\n}\n```\n#### Fragment\n\n```\npublic class CustomFragment<VB extends ViewDataBinding> extends BaseFragment {\n    \n    private View mContentView;\n    protected VB mViewBinding;\n    \n    @Override\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\n                             Bundle savedInstanceState) {\n        return mContentView;\n    }\n    \n    public void setContentView(int id) {\n        this.mContentView = getActivity().getLayoutInflater().inflate(id, mContainer, false);\n        mViewBinding = DataBindingUtil.bind(mContentView);\n    }\n}\n```\n### 如何使用\n\n#### 布局\n\n在布局的最外层增加 ``<layout></layout>`` 标签\n\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<layout>\n    <LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        xmlns:tools=\"http://schemas.android.com/tools\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        android:background=\"@color/bg_grey_f2f2f2\"\n        android:orientation=\"vertical\">\n\n        <com.chicdeals.widget.CustomRegularTextView\n            android:id=\"@+id/tv_app_cache\"\n            style=\"@style/CommonRippleStyle\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"@dimen/space_50\"\n            android:drawableEnd=\"@mipmap/ic_account_arrow_default\"\n            android:drawablePadding=\"@dimen/space_12\"\n            android:gravity=\"center_vertical\"\n            android:paddingStart=\"@dimen/space_12\"\n            android:paddingEnd=\"@dimen/space_12\"\n            android:text=\"@string/account_change_password\"\n            android:textColor=\"@color/text_grey_333333\"\n            android:textSize=\"@dimen/textSize_15\" />\n\n    </LinearLayout>\n</layout>\n```\n#### 代码\n\n```\npublic class SettingActivity extends CustomActivity<SettingActivityBinding> {\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.setting_activity);\n    }\n    \n    @Override\n    public void initView() {\n        super.initView();\n        \n        mViewBinding.tvAppCache.setText(getCacheSize());\n    }\n}\n```\n\n### 视图点击事件\n\n在引入 DataBinding 时，发现如果处理视图点击，还是需要逐一给视图设置点击事件的绑定，没有其他更好的方法，此时我选择了继续保留 ButterKnife 框架，可以快速绑定视图的点击事件\n\n```\n@OnClick({R.id.tv_change_pwd, R.id.tv_app_version, R.id.tv_app_cache, R.id.cv_sign_out})\npublic void onViewClicked(View view) {\n    switch (view.getId()) {\n        case R.id.tv_change_pwd:\n            break;\n        case R.id.tv_app_version:\n            break;\n        case R.id.tv_app_cache:\n            break;\n        case R.id.cv_sign_out:\n            break;\n    }\n}\n```\n\n## 结束\n\n到这里简述大概如何使用 DataBinding 中的 ViewBinding 部分了。此时有人疑惑为什么不说说 DataBinding 数据绑定部分？\n\n我简单说下几个原因：\n\n1. DataBinding 将部分逻辑移到布局文件，使得布局失去纯粹性，且逻辑变得有点乱，不利于阅读代码；\n2. 如果某个布局 xml 中的 DataBinding 代码有误，编译时会全部布局文件报错，不好定位报错地方；\n3. 在布局文件中插入了部分数据逻辑，使得文件失去了复用性。\n\n综上所述，我只建议大家使用 DataBinding 中的 View 绑定模块的 ViewBindings 框架，解决一个小小需求，替代 findViewById 使得项目代码更加简洁。\n\n\n","source":"_posts/android-viewbindings.md","raw":"---\ntitle: 是时候让你项目用上 ViewBindings 了\ndate: 2019-06-13 23:37:07\ntags: [Android,DataBinding,ViewBindings]\ncategories: Android\n---\n\n## 写在前面\n\n相信大多数人在写 findViewById 都是烦恼的，不少人会使用 ButterKnife 来简化，利用插件会自动生成绑定 View 代码，可是一旦界面控件多时候，就会出现几十行甚至上百行的 BindView 代码。此时有没有更好的框架来帮我们呢？\n\n答案是有的，在前不久的 Google IO 2019 上面提到了 ViewBindings 概念，后来我详细了解后，发现这个东西可以理解为 DataBinding 的一部分，具体区别在于 ViewBindings 只是视图绑定部分。想更深入了解两者区别，可以看下 [这篇文章](https://proandroiddev.com/new-in-android-viewbindings-the-difference-from-databinding-library-bef5945baf5e)\n\n## 使用\n\n### 构建 DataBingding 环境\n\n在 App 模块的 build.gradle 文件中添加 DataBinding 配置\n\n```\nandroid {\n    ....\n    dataBinding {\n        enabled = true\n    }\n}\n```\n\n### 在基类配置 Bingding 代码\n\n#### Activity\n\n```\npublic class CustomActivity<VB extends ViewDataBinding> extends AppCompatActivity {\n\n    private View mContentView;\n    protected VB mViewBinding;\n    \n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n    }\n    \n    @Override\n    public void setContentView(@LayoutRes int layoutResID) {\n        mContentView = View.inflate(this, layoutResID, null);\n        mViewBinding = DataBindingUtil.bind(mContentView);\n        super.setContentView(mContentView);\n    }\n}\n```\n#### Fragment\n\n```\npublic class CustomFragment<VB extends ViewDataBinding> extends BaseFragment {\n    \n    private View mContentView;\n    protected VB mViewBinding;\n    \n    @Override\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\n                             Bundle savedInstanceState) {\n        return mContentView;\n    }\n    \n    public void setContentView(int id) {\n        this.mContentView = getActivity().getLayoutInflater().inflate(id, mContainer, false);\n        mViewBinding = DataBindingUtil.bind(mContentView);\n    }\n}\n```\n### 如何使用\n\n#### 布局\n\n在布局的最外层增加 ``<layout></layout>`` 标签\n\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<layout>\n    <LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        xmlns:tools=\"http://schemas.android.com/tools\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        android:background=\"@color/bg_grey_f2f2f2\"\n        android:orientation=\"vertical\">\n\n        <com.chicdeals.widget.CustomRegularTextView\n            android:id=\"@+id/tv_app_cache\"\n            style=\"@style/CommonRippleStyle\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"@dimen/space_50\"\n            android:drawableEnd=\"@mipmap/ic_account_arrow_default\"\n            android:drawablePadding=\"@dimen/space_12\"\n            android:gravity=\"center_vertical\"\n            android:paddingStart=\"@dimen/space_12\"\n            android:paddingEnd=\"@dimen/space_12\"\n            android:text=\"@string/account_change_password\"\n            android:textColor=\"@color/text_grey_333333\"\n            android:textSize=\"@dimen/textSize_15\" />\n\n    </LinearLayout>\n</layout>\n```\n#### 代码\n\n```\npublic class SettingActivity extends CustomActivity<SettingActivityBinding> {\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.setting_activity);\n    }\n    \n    @Override\n    public void initView() {\n        super.initView();\n        \n        mViewBinding.tvAppCache.setText(getCacheSize());\n    }\n}\n```\n\n### 视图点击事件\n\n在引入 DataBinding 时，发现如果处理视图点击，还是需要逐一给视图设置点击事件的绑定，没有其他更好的方法，此时我选择了继续保留 ButterKnife 框架，可以快速绑定视图的点击事件\n\n```\n@OnClick({R.id.tv_change_pwd, R.id.tv_app_version, R.id.tv_app_cache, R.id.cv_sign_out})\npublic void onViewClicked(View view) {\n    switch (view.getId()) {\n        case R.id.tv_change_pwd:\n            break;\n        case R.id.tv_app_version:\n            break;\n        case R.id.tv_app_cache:\n            break;\n        case R.id.cv_sign_out:\n            break;\n    }\n}\n```\n\n## 结束\n\n到这里简述大概如何使用 DataBinding 中的 ViewBinding 部分了。此时有人疑惑为什么不说说 DataBinding 数据绑定部分？\n\n我简单说下几个原因：\n\n1. DataBinding 将部分逻辑移到布局文件，使得布局失去纯粹性，且逻辑变得有点乱，不利于阅读代码；\n2. 如果某个布局 xml 中的 DataBinding 代码有误，编译时会全部布局文件报错，不好定位报错地方；\n3. 在布局文件中插入了部分数据逻辑，使得文件失去了复用性。\n\n综上所述，我只建议大家使用 DataBinding 中的 View 绑定模块的 ViewBindings 框架，解决一个小小需求，替代 findViewById 使得项目代码更加简洁。\n\n\n","slug":"android-viewbindings","published":1,"updated":"2019-06-13T15:42:20.493Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cks0kficl000rw3yzlskoy83w","content":"<h2 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h2><p>相信大多数人在写 findViewById 都是烦恼的，不少人会使用 ButterKnife 来简化，利用插件会自动生成绑定 View 代码，可是一旦界面控件多时候，就会出现几十行甚至上百行的 BindView 代码。此时有没有更好的框架来帮我们呢？</p>\n<p>答案是有的，在前不久的 Google IO 2019 上面提到了 ViewBindings 概念，后来我详细了解后，发现这个东西可以理解为 DataBinding 的一部分，具体区别在于 ViewBindings 只是视图绑定部分。想更深入了解两者区别，可以看下 <a href=\"https://proandroiddev.com/new-in-android-viewbindings-the-difference-from-databinding-library-bef5945baf5e\" target=\"_blank\" rel=\"noopener\">这篇文章</a></p>\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><h3 id=\"构建-DataBingding-环境\"><a href=\"#构建-DataBingding-环境\" class=\"headerlink\" title=\"构建 DataBingding 环境\"></a>构建 DataBingding 环境</h3><p>在 App 模块的 build.gradle 文件中添加 DataBinding 配置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">android &#123;</span><br><span class=\"line\">    ....</span><br><span class=\"line\">    dataBinding &#123;</span><br><span class=\"line\">        enabled = true</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"在基类配置-Bingding-代码\"><a href=\"#在基类配置-Bingding-代码\" class=\"headerlink\" title=\"在基类配置 Bingding 代码\"></a>在基类配置 Bingding 代码</h3><h4 id=\"Activity\"><a href=\"#Activity\" class=\"headerlink\" title=\"Activity\"></a>Activity</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class CustomActivity&lt;VB extends ViewDataBinding&gt; extends AppCompatActivity &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private View mContentView;</span><br><span class=\"line\">    protected VB mViewBinding;</span><br><span class=\"line\">    </span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class=\"line\">        super.onCreate(savedInstanceState);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void setContentView(@LayoutRes int layoutResID) &#123;</span><br><span class=\"line\">        mContentView = View.inflate(this, layoutResID, null);</span><br><span class=\"line\">        mViewBinding = DataBindingUtil.bind(mContentView);</span><br><span class=\"line\">        super.setContentView(mContentView);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Fragment\"><a href=\"#Fragment\" class=\"headerlink\" title=\"Fragment\"></a>Fragment</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class CustomFragment&lt;VB extends ViewDataBinding&gt; extends BaseFragment &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    private View mContentView;</span><br><span class=\"line\">    protected VB mViewBinding;</span><br><span class=\"line\">    </span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public View onCreateView(LayoutInflater inflater, ViewGroup container,</span><br><span class=\"line\">                             Bundle savedInstanceState) &#123;</span><br><span class=\"line\">        return mContentView;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    public void setContentView(int id) &#123;</span><br><span class=\"line\">        this.mContentView = getActivity().getLayoutInflater().inflate(id, mContainer, false);</span><br><span class=\"line\">        mViewBinding = DataBindingUtil.bind(mContentView);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"如何使用\"><a href=\"#如何使用\" class=\"headerlink\" title=\"如何使用\"></a>如何使用</h3><h4 id=\"布局\"><a href=\"#布局\" class=\"headerlink\" title=\"布局\"></a>布局</h4><p>在布局的最外层增加 <code>&lt;layout&gt;&lt;/layout&gt;</code> 标签</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class=\"line\">&lt;layout&gt;</span><br><span class=\"line\">    &lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</span><br><span class=\"line\">        xmlns:tools=&quot;http://schemas.android.com/tools&quot;</span><br><span class=\"line\">        android:layout_width=&quot;match_parent&quot;</span><br><span class=\"line\">        android:layout_height=&quot;match_parent&quot;</span><br><span class=\"line\">        android:background=&quot;@color/bg_grey_f2f2f2&quot;</span><br><span class=\"line\">        android:orientation=&quot;vertical&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;com.chicdeals.widget.CustomRegularTextView</span><br><span class=\"line\">            android:id=&quot;@+id/tv_app_cache&quot;</span><br><span class=\"line\">            style=&quot;@style/CommonRippleStyle&quot;</span><br><span class=\"line\">            android:layout_width=&quot;match_parent&quot;</span><br><span class=\"line\">            android:layout_height=&quot;@dimen/space_50&quot;</span><br><span class=\"line\">            android:drawableEnd=&quot;@mipmap/ic_account_arrow_default&quot;</span><br><span class=\"line\">            android:drawablePadding=&quot;@dimen/space_12&quot;</span><br><span class=\"line\">            android:gravity=&quot;center_vertical&quot;</span><br><span class=\"line\">            android:paddingStart=&quot;@dimen/space_12&quot;</span><br><span class=\"line\">            android:paddingEnd=&quot;@dimen/space_12&quot;</span><br><span class=\"line\">            android:text=&quot;@string/account_change_password&quot;</span><br><span class=\"line\">            android:textColor=&quot;@color/text_grey_333333&quot;</span><br><span class=\"line\">            android:textSize=&quot;@dimen/textSize_15&quot; /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;/LinearLayout&gt;</span><br><span class=\"line\">&lt;/layout&gt;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class SettingActivity extends CustomActivity&lt;SettingActivityBinding&gt; &#123;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class=\"line\">        super.onCreate(savedInstanceState);</span><br><span class=\"line\">        setContentView(R.layout.setting_activity);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void initView() &#123;</span><br><span class=\"line\">        super.initView();</span><br><span class=\"line\">        </span><br><span class=\"line\">        mViewBinding.tvAppCache.setText(getCacheSize());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"视图点击事件\"><a href=\"#视图点击事件\" class=\"headerlink\" title=\"视图点击事件\"></a>视图点击事件</h3><p>在引入 DataBinding 时，发现如果处理视图点击，还是需要逐一给视图设置点击事件的绑定，没有其他更好的方法，此时我选择了继续保留 ButterKnife 框架，可以快速绑定视图的点击事件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@OnClick(&#123;R.id.tv_change_pwd, R.id.tv_app_version, R.id.tv_app_cache, R.id.cv_sign_out&#125;)</span><br><span class=\"line\">public void onViewClicked(View view) &#123;</span><br><span class=\"line\">    switch (view.getId()) &#123;</span><br><span class=\"line\">        case R.id.tv_change_pwd:</span><br><span class=\"line\">            break;</span><br><span class=\"line\">        case R.id.tv_app_version:</span><br><span class=\"line\">            break;</span><br><span class=\"line\">        case R.id.tv_app_cache:</span><br><span class=\"line\">            break;</span><br><span class=\"line\">        case R.id.cv_sign_out:</span><br><span class=\"line\">            break;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"结束\"><a href=\"#结束\" class=\"headerlink\" title=\"结束\"></a>结束</h2><p>到这里简述大概如何使用 DataBinding 中的 ViewBinding 部分了。此时有人疑惑为什么不说说 DataBinding 数据绑定部分？</p>\n<p>我简单说下几个原因：</p>\n<ol>\n<li>DataBinding 将部分逻辑移到布局文件，使得布局失去纯粹性，且逻辑变得有点乱，不利于阅读代码；</li>\n<li>如果某个布局 xml 中的 DataBinding 代码有误，编译时会全部布局文件报错，不好定位报错地方；</li>\n<li>在布局文件中插入了部分数据逻辑，使得文件失去了复用性。</li>\n</ol>\n<p>综上所述，我只建议大家使用 DataBinding 中的 View 绑定模块的 ViewBindings 框架，解决一个小小需求，替代 findViewById 使得项目代码更加简洁。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h2><p>相信大多数人在写 findViewById 都是烦恼的，不少人会使用 ButterKnife 来简化，利用插件会自动生成绑定 View 代码，可是一旦界面控件多时候，就会出现几十行甚至上百行的 BindView 代码。此时有没有更好的框架来帮我们呢？</p>\n<p>答案是有的，在前不久的 Google IO 2019 上面提到了 ViewBindings 概念，后来我详细了解后，发现这个东西可以理解为 DataBinding 的一部分，具体区别在于 ViewBindings 只是视图绑定部分。想更深入了解两者区别，可以看下 <a href=\"https://proandroiddev.com/new-in-android-viewbindings-the-difference-from-databinding-library-bef5945baf5e\" target=\"_blank\" rel=\"noopener\">这篇文章</a></p>\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><h3 id=\"构建-DataBingding-环境\"><a href=\"#构建-DataBingding-环境\" class=\"headerlink\" title=\"构建 DataBingding 环境\"></a>构建 DataBingding 环境</h3><p>在 App 模块的 build.gradle 文件中添加 DataBinding 配置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">android &#123;</span><br><span class=\"line\">    ....</span><br><span class=\"line\">    dataBinding &#123;</span><br><span class=\"line\">        enabled = true</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"在基类配置-Bingding-代码\"><a href=\"#在基类配置-Bingding-代码\" class=\"headerlink\" title=\"在基类配置 Bingding 代码\"></a>在基类配置 Bingding 代码</h3><h4 id=\"Activity\"><a href=\"#Activity\" class=\"headerlink\" title=\"Activity\"></a>Activity</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class CustomActivity&lt;VB extends ViewDataBinding&gt; extends AppCompatActivity &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private View mContentView;</span><br><span class=\"line\">    protected VB mViewBinding;</span><br><span class=\"line\">    </span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class=\"line\">        super.onCreate(savedInstanceState);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void setContentView(@LayoutRes int layoutResID) &#123;</span><br><span class=\"line\">        mContentView = View.inflate(this, layoutResID, null);</span><br><span class=\"line\">        mViewBinding = DataBindingUtil.bind(mContentView);</span><br><span class=\"line\">        super.setContentView(mContentView);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Fragment\"><a href=\"#Fragment\" class=\"headerlink\" title=\"Fragment\"></a>Fragment</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class CustomFragment&lt;VB extends ViewDataBinding&gt; extends BaseFragment &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    private View mContentView;</span><br><span class=\"line\">    protected VB mViewBinding;</span><br><span class=\"line\">    </span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public View onCreateView(LayoutInflater inflater, ViewGroup container,</span><br><span class=\"line\">                             Bundle savedInstanceState) &#123;</span><br><span class=\"line\">        return mContentView;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    public void setContentView(int id) &#123;</span><br><span class=\"line\">        this.mContentView = getActivity().getLayoutInflater().inflate(id, mContainer, false);</span><br><span class=\"line\">        mViewBinding = DataBindingUtil.bind(mContentView);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"如何使用\"><a href=\"#如何使用\" class=\"headerlink\" title=\"如何使用\"></a>如何使用</h3><h4 id=\"布局\"><a href=\"#布局\" class=\"headerlink\" title=\"布局\"></a>布局</h4><p>在布局的最外层增加 <code>&lt;layout&gt;&lt;/layout&gt;</code> 标签</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class=\"line\">&lt;layout&gt;</span><br><span class=\"line\">    &lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</span><br><span class=\"line\">        xmlns:tools=&quot;http://schemas.android.com/tools&quot;</span><br><span class=\"line\">        android:layout_width=&quot;match_parent&quot;</span><br><span class=\"line\">        android:layout_height=&quot;match_parent&quot;</span><br><span class=\"line\">        android:background=&quot;@color/bg_grey_f2f2f2&quot;</span><br><span class=\"line\">        android:orientation=&quot;vertical&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;com.chicdeals.widget.CustomRegularTextView</span><br><span class=\"line\">            android:id=&quot;@+id/tv_app_cache&quot;</span><br><span class=\"line\">            style=&quot;@style/CommonRippleStyle&quot;</span><br><span class=\"line\">            android:layout_width=&quot;match_parent&quot;</span><br><span class=\"line\">            android:layout_height=&quot;@dimen/space_50&quot;</span><br><span class=\"line\">            android:drawableEnd=&quot;@mipmap/ic_account_arrow_default&quot;</span><br><span class=\"line\">            android:drawablePadding=&quot;@dimen/space_12&quot;</span><br><span class=\"line\">            android:gravity=&quot;center_vertical&quot;</span><br><span class=\"line\">            android:paddingStart=&quot;@dimen/space_12&quot;</span><br><span class=\"line\">            android:paddingEnd=&quot;@dimen/space_12&quot;</span><br><span class=\"line\">            android:text=&quot;@string/account_change_password&quot;</span><br><span class=\"line\">            android:textColor=&quot;@color/text_grey_333333&quot;</span><br><span class=\"line\">            android:textSize=&quot;@dimen/textSize_15&quot; /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;/LinearLayout&gt;</span><br><span class=\"line\">&lt;/layout&gt;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class SettingActivity extends CustomActivity&lt;SettingActivityBinding&gt; &#123;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class=\"line\">        super.onCreate(savedInstanceState);</span><br><span class=\"line\">        setContentView(R.layout.setting_activity);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void initView() &#123;</span><br><span class=\"line\">        super.initView();</span><br><span class=\"line\">        </span><br><span class=\"line\">        mViewBinding.tvAppCache.setText(getCacheSize());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"视图点击事件\"><a href=\"#视图点击事件\" class=\"headerlink\" title=\"视图点击事件\"></a>视图点击事件</h3><p>在引入 DataBinding 时，发现如果处理视图点击，还是需要逐一给视图设置点击事件的绑定，没有其他更好的方法，此时我选择了继续保留 ButterKnife 框架，可以快速绑定视图的点击事件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@OnClick(&#123;R.id.tv_change_pwd, R.id.tv_app_version, R.id.tv_app_cache, R.id.cv_sign_out&#125;)</span><br><span class=\"line\">public void onViewClicked(View view) &#123;</span><br><span class=\"line\">    switch (view.getId()) &#123;</span><br><span class=\"line\">        case R.id.tv_change_pwd:</span><br><span class=\"line\">            break;</span><br><span class=\"line\">        case R.id.tv_app_version:</span><br><span class=\"line\">            break;</span><br><span class=\"line\">        case R.id.tv_app_cache:</span><br><span class=\"line\">            break;</span><br><span class=\"line\">        case R.id.cv_sign_out:</span><br><span class=\"line\">            break;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"结束\"><a href=\"#结束\" class=\"headerlink\" title=\"结束\"></a>结束</h2><p>到这里简述大概如何使用 DataBinding 中的 ViewBinding 部分了。此时有人疑惑为什么不说说 DataBinding 数据绑定部分？</p>\n<p>我简单说下几个原因：</p>\n<ol>\n<li>DataBinding 将部分逻辑移到布局文件，使得布局失去纯粹性，且逻辑变得有点乱，不利于阅读代码；</li>\n<li>如果某个布局 xml 中的 DataBinding 代码有误，编译时会全部布局文件报错，不好定位报错地方；</li>\n<li>在布局文件中插入了部分数据逻辑，使得文件失去了复用性。</li>\n</ol>\n<p>综上所述，我只建议大家使用 DataBinding 中的 View 绑定模块的 ViewBindings 框架，解决一个小小需求，替代 findViewById 使得项目代码更加简洁。</p>\n"},{"title":"Flutter 如何使用自定义字体","date":"2020-02-01T12:52:25.000Z","_content":"\n### 1. 导入字体包 \n\n在项目路径新创建 ``fonts`` 文件夹，里面存放自定义字体包。\n\n> 注意这个文件夹的路径需要放到主目录下，如果在 ``asstes`` 文件夹下创建在 iOS 那边打出来的产物会出现无法应用到自定义字体的问题。\n\n![image](/images/2020/02/flutter_fonts_01.png)\n\n### 2. 在 pubspec.yaml 中声明字体\n\n```\nflutter:\n  fonts:\n   - family: Hind Siliguri\n     fonts:\n       - asset: assets/fonts/Hind-Siliguri-Bold.ttf\n       - asset: assets/fonts/Hind-Siliguri-Regular.ttf\n```\n\n``family`` 属性决定了字体的名称，将会在 ``TextStyle`` 的 ``fontFamily`` 属性中用到。\n\n### 3. 全局设置默认字体\n\n在主入口 ``main.dart`` 文件配置：\n\n```\nrunApp(MaterialApp(\n    theme: ThemeData(\n      fontFamily: 'Hind Siliguri',\n      ...\n    ),\n));\n```\n\n设置的 ``fontFamily`` 的值必须与 ``pubspec.yaml``  中声明的名称相匹配。\n\n### 4. 抽取封装通用的字体样式（可选）\n\n```\nimport 'package:flutter/material.dart';\n\nclass Styles {\n\n  static TextStyle boldTextStyle(Color color, double fontSize, {Color backgroundColor, double lineHeight}) {\n    return TextStyle(\n      fontSize: fontSize,\n      color: color,\n      fontWeight: FontWeight.bold,\n      backgroundColor: backgroundColor,\n      height: lineHeight,\n    );\n  }\n\n  static TextStyle regularTextStyle(Color color, double fontSize, {Color backgroundColor, double lineHeight}) {\n    return TextStyle(\n      fontSize: fontSize,\n      color: color,\n      backgroundColor: backgroundColor,\n      height: lineHeight,\n    );\n  }\n}\n\n```\n### 5. 使用\n\n```\nText(\n      'Contact Us',\n      style: Styles.boldTextStyle(Colour.color_333333, 18),\n    ),\n```\n\n### 6. 效果\n\n![image](/images/2020/02/flutter_fonts_02.png)\n\n### 资料\n\n[官方文档-使用自定义字体](https://flutter.dev/docs/cookbook/design/fonts)\n\n\n","source":"_posts/flutter-font.md","raw":"---\ntitle: Flutter 如何使用自定义字体\ndate: 2020-02-01 20:52:25\ntags: [Flutter]\ncategories: Flutter\n---\n\n### 1. 导入字体包 \n\n在项目路径新创建 ``fonts`` 文件夹，里面存放自定义字体包。\n\n> 注意这个文件夹的路径需要放到主目录下，如果在 ``asstes`` 文件夹下创建在 iOS 那边打出来的产物会出现无法应用到自定义字体的问题。\n\n![image](/images/2020/02/flutter_fonts_01.png)\n\n### 2. 在 pubspec.yaml 中声明字体\n\n```\nflutter:\n  fonts:\n   - family: Hind Siliguri\n     fonts:\n       - asset: assets/fonts/Hind-Siliguri-Bold.ttf\n       - asset: assets/fonts/Hind-Siliguri-Regular.ttf\n```\n\n``family`` 属性决定了字体的名称，将会在 ``TextStyle`` 的 ``fontFamily`` 属性中用到。\n\n### 3. 全局设置默认字体\n\n在主入口 ``main.dart`` 文件配置：\n\n```\nrunApp(MaterialApp(\n    theme: ThemeData(\n      fontFamily: 'Hind Siliguri',\n      ...\n    ),\n));\n```\n\n设置的 ``fontFamily`` 的值必须与 ``pubspec.yaml``  中声明的名称相匹配。\n\n### 4. 抽取封装通用的字体样式（可选）\n\n```\nimport 'package:flutter/material.dart';\n\nclass Styles {\n\n  static TextStyle boldTextStyle(Color color, double fontSize, {Color backgroundColor, double lineHeight}) {\n    return TextStyle(\n      fontSize: fontSize,\n      color: color,\n      fontWeight: FontWeight.bold,\n      backgroundColor: backgroundColor,\n      height: lineHeight,\n    );\n  }\n\n  static TextStyle regularTextStyle(Color color, double fontSize, {Color backgroundColor, double lineHeight}) {\n    return TextStyle(\n      fontSize: fontSize,\n      color: color,\n      backgroundColor: backgroundColor,\n      height: lineHeight,\n    );\n  }\n}\n\n```\n### 5. 使用\n\n```\nText(\n      'Contact Us',\n      style: Styles.boldTextStyle(Colour.color_333333, 18),\n    ),\n```\n\n### 6. 效果\n\n![image](/images/2020/02/flutter_fonts_02.png)\n\n### 资料\n\n[官方文档-使用自定义字体](https://flutter.dev/docs/cookbook/design/fonts)\n\n\n","slug":"flutter-font","published":1,"updated":"2020-11-22T05:20:20.054Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cks0kficm000ww3yzwkge7tzz","content":"<h3 id=\"1-导入字体包\"><a href=\"#1-导入字体包\" class=\"headerlink\" title=\"1. 导入字体包\"></a>1. 导入字体包</h3><p>在项目路径新创建 <code>fonts</code> 文件夹，里面存放自定义字体包。</p>\n<blockquote>\n<p>注意这个文件夹的路径需要放到主目录下，如果在 <code>asstes</code> 文件夹下创建在 iOS 那边打出来的产物会出现无法应用到自定义字体的问题。</p>\n</blockquote>\n<p><img src=\"/images/2020/02/flutter_fonts_01.png\" alt=\"image\"></p>\n<h3 id=\"2-在-pubspec-yaml-中声明字体\"><a href=\"#2-在-pubspec-yaml-中声明字体\" class=\"headerlink\" title=\"2. 在 pubspec.yaml 中声明字体\"></a>2. 在 pubspec.yaml 中声明字体</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">flutter:</span><br><span class=\"line\">  fonts:</span><br><span class=\"line\">   - family: Hind Siliguri</span><br><span class=\"line\">     fonts:</span><br><span class=\"line\">       - asset: assets/fonts/Hind-Siliguri-Bold.ttf</span><br><span class=\"line\">       - asset: assets/fonts/Hind-Siliguri-Regular.ttf</span><br></pre></td></tr></table></figure>\n\n<p><code>family</code> 属性决定了字体的名称，将会在 <code>TextStyle</code> 的 <code>fontFamily</code> 属性中用到。</p>\n<h3 id=\"3-全局设置默认字体\"><a href=\"#3-全局设置默认字体\" class=\"headerlink\" title=\"3. 全局设置默认字体\"></a>3. 全局设置默认字体</h3><p>在主入口 <code>main.dart</code> 文件配置：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">runApp(MaterialApp(</span><br><span class=\"line\">    theme: ThemeData(</span><br><span class=\"line\">      fontFamily: &apos;Hind Siliguri&apos;,</span><br><span class=\"line\">      ...</span><br><span class=\"line\">    ),</span><br><span class=\"line\">));</span><br></pre></td></tr></table></figure>\n\n<p>设置的 <code>fontFamily</code> 的值必须与 <code>pubspec.yaml</code>  中声明的名称相匹配。</p>\n<h3 id=\"4-抽取封装通用的字体样式（可选）\"><a href=\"#4-抽取封装通用的字体样式（可选）\" class=\"headerlink\" title=\"4. 抽取封装通用的字体样式（可选）\"></a>4. 抽取封装通用的字体样式（可选）</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &apos;package:flutter/material.dart&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">class Styles &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  static TextStyle boldTextStyle(Color color, double fontSize, &#123;Color backgroundColor, double lineHeight&#125;) &#123;</span><br><span class=\"line\">    return TextStyle(</span><br><span class=\"line\">      fontSize: fontSize,</span><br><span class=\"line\">      color: color,</span><br><span class=\"line\">      fontWeight: FontWeight.bold,</span><br><span class=\"line\">      backgroundColor: backgroundColor,</span><br><span class=\"line\">      height: lineHeight,</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  static TextStyle regularTextStyle(Color color, double fontSize, &#123;Color backgroundColor, double lineHeight&#125;) &#123;</span><br><span class=\"line\">    return TextStyle(</span><br><span class=\"line\">      fontSize: fontSize,</span><br><span class=\"line\">      color: color,</span><br><span class=\"line\">      backgroundColor: backgroundColor,</span><br><span class=\"line\">      height: lineHeight,</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-使用\"><a href=\"#5-使用\" class=\"headerlink\" title=\"5. 使用\"></a>5. 使用</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Text(</span><br><span class=\"line\">      &apos;Contact Us&apos;,</span><br><span class=\"line\">      style: Styles.boldTextStyle(Colour.color_333333, 18),</span><br><span class=\"line\">    ),</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6-效果\"><a href=\"#6-效果\" class=\"headerlink\" title=\"6. 效果\"></a>6. 效果</h3><p><img src=\"/images/2020/02/flutter_fonts_02.png\" alt=\"image\"></p>\n<h3 id=\"资料\"><a href=\"#资料\" class=\"headerlink\" title=\"资料\"></a>资料</h3><p><a href=\"https://flutter.dev/docs/cookbook/design/fonts\" target=\"_blank\" rel=\"noopener\">官方文档-使用自定义字体</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"1-导入字体包\"><a href=\"#1-导入字体包\" class=\"headerlink\" title=\"1. 导入字体包\"></a>1. 导入字体包</h3><p>在项目路径新创建 <code>fonts</code> 文件夹，里面存放自定义字体包。</p>\n<blockquote>\n<p>注意这个文件夹的路径需要放到主目录下，如果在 <code>asstes</code> 文件夹下创建在 iOS 那边打出来的产物会出现无法应用到自定义字体的问题。</p>\n</blockquote>\n<p><img src=\"/images/2020/02/flutter_fonts_01.png\" alt=\"image\"></p>\n<h3 id=\"2-在-pubspec-yaml-中声明字体\"><a href=\"#2-在-pubspec-yaml-中声明字体\" class=\"headerlink\" title=\"2. 在 pubspec.yaml 中声明字体\"></a>2. 在 pubspec.yaml 中声明字体</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">flutter:</span><br><span class=\"line\">  fonts:</span><br><span class=\"line\">   - family: Hind Siliguri</span><br><span class=\"line\">     fonts:</span><br><span class=\"line\">       - asset: assets/fonts/Hind-Siliguri-Bold.ttf</span><br><span class=\"line\">       - asset: assets/fonts/Hind-Siliguri-Regular.ttf</span><br></pre></td></tr></table></figure>\n\n<p><code>family</code> 属性决定了字体的名称，将会在 <code>TextStyle</code> 的 <code>fontFamily</code> 属性中用到。</p>\n<h3 id=\"3-全局设置默认字体\"><a href=\"#3-全局设置默认字体\" class=\"headerlink\" title=\"3. 全局设置默认字体\"></a>3. 全局设置默认字体</h3><p>在主入口 <code>main.dart</code> 文件配置：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">runApp(MaterialApp(</span><br><span class=\"line\">    theme: ThemeData(</span><br><span class=\"line\">      fontFamily: &apos;Hind Siliguri&apos;,</span><br><span class=\"line\">      ...</span><br><span class=\"line\">    ),</span><br><span class=\"line\">));</span><br></pre></td></tr></table></figure>\n\n<p>设置的 <code>fontFamily</code> 的值必须与 <code>pubspec.yaml</code>  中声明的名称相匹配。</p>\n<h3 id=\"4-抽取封装通用的字体样式（可选）\"><a href=\"#4-抽取封装通用的字体样式（可选）\" class=\"headerlink\" title=\"4. 抽取封装通用的字体样式（可选）\"></a>4. 抽取封装通用的字体样式（可选）</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &apos;package:flutter/material.dart&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">class Styles &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  static TextStyle boldTextStyle(Color color, double fontSize, &#123;Color backgroundColor, double lineHeight&#125;) &#123;</span><br><span class=\"line\">    return TextStyle(</span><br><span class=\"line\">      fontSize: fontSize,</span><br><span class=\"line\">      color: color,</span><br><span class=\"line\">      fontWeight: FontWeight.bold,</span><br><span class=\"line\">      backgroundColor: backgroundColor,</span><br><span class=\"line\">      height: lineHeight,</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  static TextStyle regularTextStyle(Color color, double fontSize, &#123;Color backgroundColor, double lineHeight&#125;) &#123;</span><br><span class=\"line\">    return TextStyle(</span><br><span class=\"line\">      fontSize: fontSize,</span><br><span class=\"line\">      color: color,</span><br><span class=\"line\">      backgroundColor: backgroundColor,</span><br><span class=\"line\">      height: lineHeight,</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-使用\"><a href=\"#5-使用\" class=\"headerlink\" title=\"5. 使用\"></a>5. 使用</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Text(</span><br><span class=\"line\">      &apos;Contact Us&apos;,</span><br><span class=\"line\">      style: Styles.boldTextStyle(Colour.color_333333, 18),</span><br><span class=\"line\">    ),</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6-效果\"><a href=\"#6-效果\" class=\"headerlink\" title=\"6. 效果\"></a>6. 效果</h3><p><img src=\"/images/2020/02/flutter_fonts_02.png\" alt=\"image\"></p>\n<h3 id=\"资料\"><a href=\"#资料\" class=\"headerlink\" title=\"资料\"></a>资料</h3><p><a href=\"https://flutter.dev/docs/cookbook/design/fonts\" target=\"_blank\" rel=\"noopener\">官方文档-使用自定义字体</a></p>\n"},{"title":"Flutter 自动打包并将 aar 文件上传到 Maven","date":"2020-04-26T14:42:04.000Z","_content":"\n### 思路\n \n1. 先执行 ``flutter pub get`` 获取项目最新依赖插件。\n2. 对 flutter module 进行打包成 aar，因为是上传到 maven 的，只要 release 版本即可。\n3. 对打包出来的 aar 文件，简单粗暴使用 ``mvn deploy`` 指令进行上传到 maven。\n4. 上传完之后，提示如何引入到项目。\n\n\n### 完整构建脚本\n\n创建一个 ``android_build.sh`` 文件\n\n```shell\n#!/usr/bin/env bash\n\n###############################################################\n# 脚本是 shell 文件，只适用于 mac 系统\n# 执行脚本时，版本号为必填参数\n# 在项目路径下执行命令：./android_build.sh 版本号\n# 若出现提示 `zsh: command not found: android_build.sh`\n# 解决方法：\n# 1. vim ~/.zshrc\n# 2. 找到 “# User configuration” 在其位置下面加 `source ~/.bash_profile`\n# 3. 保存退出\n# 4. source ~/.zshrc\n###############################################################\n\n# 在执行出错时结束程序\nset -e\n\n# 读取版本号\nversion=$1\n\n###### 1. 检查参数\nif [ ! -n  \"$version\" ]; then\n\necho \">>> 版本号参数不能为空!\"\n\n# 结束脚本运行\nexit\nfi\n\n###### 2. 获取/更新包\n\necho \">>> 执行 flutter pub get!\"\n\nflutter pub get\n\n###### 3. 构建依赖项目的AAR\n\necho \">>> 执行构建 ${version} release 版本 aar !\"\n\nflutter build aar --no-debug --no-profile --build-number ${version}\n\necho \">>> 构建成功\"\n\n###### 4. 将文件上传 maven\n\necho \">>> 执行上传 Maven\"\n\n# 打包出来的 aar 文件存放路径\nfile_path=\"build/host/outputs/repo/com/chicdeals/flutter/flutter_release/$version/flutter_release-$version\"\n\nmvn deploy:deploy-file \\\n-s=\"mvn-settings.xml\" \\\n-DpomFile=\"$file_path.pom\" \\\n-DgeneratePom=true \\\n-Dfile=\"$file_path.aar\" \\\n-Durl=\"https://oss.bgapps.cn/repository/banggood-release\" \\\n-DrepositoryId=\"com.chicdeals.flutter\" \\\n-DgroupId=\"com.chicdeals.flutter\" \\\n-Dpackaging=aar\n\necho \">>> 上传成功\"\n\n###### 5. 提示如何引入\n\necho \">>> 项目接入地址：\"\n\necho \">>> implementation 'com.chicdeals.flutter:flutter_release:$version'\"\n\n```\n\n与 ``android_build.sh`` 文件同目录下创建 maven 账号密码配置文件 ``mvn-settings.xml``。\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<settings xmlns=\"http://maven.apache.org/SETTINGS/1.0.0\"\n          xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n          xsi:schemaLocation=\"http://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd\">\n          \n  <pluginGroups></pluginGroups>\n\n  <proxies></proxies>\n\n  <servers>\n    <!-- server\n     | Specifies the authentication information to use when connecting to a particular server, identified by\n     | a unique name within the system (referred to by the 'id' attribute below).\n     |\n     | NOTE: You should either specify username/password OR privateKey/passphrase, since these pairings are\n     |       used together.\n     |\n     -->\n    <server>\n      <id>com.chicdeals.flutter</id>\n      <username>Maven账号</username>\n      <password>Maven密码</password>\n    </server>\n    \n  </servers>\n\n  </profiles>\n\n</settings>\n\n```\n\n### 解释\n\n上面脚本的注释已经做了比较详细的解释了，在这里对几个比较重点的地方再做一遍解释说明。\n\n1. 执行命令是 ``./android_build.sh 版本号`` 版本号为必传参数。\n2. 执行 mvn 命令的前提需要 Mac 系统安装 Maven，安装方法建议通过 ``brew install maven`` 安装。\n3. Maven 账号密码配置文件在 ``mvn-settings.xml``，其中文件配置的 ``id`` 需要与 ``DgroupId`` 和 ``DrepositoryId`` 保持一致。\n\n\n### 拓展\n\n1. 如何验证安装成功 Maven，执行以下命令：\n\n```\n$ mvn -version\n```\n\n成功时，输出的日志如下：\n\n```\nApache Maven 3.6.3 (cecedd343002696d0abb50b32b541b8a6ba2883f)\nMaven home: /usr/local/maven/apache-maven-3.6.3\nJava version: 1.8.0_172, vendor: Oracle Corporation, runtime: /Library/Java/JavaVirtualMachines/jdk1.8.0_172.jdk/Contents/Home/jre\nDefault locale: zh_CN, platform encoding: UTF-8\nOS name: \"mac os x\", version: \"10.15.3\", arch: \"x86_64\", family: \"mac\"\n```\n\n2. 想查看详细 Maven 上传日志，在命令行加多 ``--debug`` 即可。\n\n```\nmvn --debug deploy:deploy-file \\\n-s=\"mvn-settings.xml\" \\\n-DpomFile=\"build/host/outputs/repo/com/chicdeals/flutter/flutter_release/1.0/flutter_release-1.0.pom\" \\\n-DgeneratePom=true \\\n-Dfile=\"build/host/outputs/repo/com/chicdeals/flutter/flutter_release/1.0/flutter_release-1.0.aar\" \\\n-Durl=\"https://oss.bgapps.cn/repository/banggood-release\" \\\n-DrepositoryId=\"com.chicdeals.flutter\" \\\n-DgroupId=\"com.chicdeals.flutter\" \\\n-Dpackaging=aar\n```\n\n### 参考资料\n\n* [Flutter 自动打包依赖aar上传Maven仓库( Shell+Gradle 脚本)](https://blog.csdn.net/qizewei123/article/details/102768038)\n* [Flutter混编一键打包并上传maven](https://galaxybruce.github.io/flutter/Flutter%E6%B7%B7%E7%BC%96%E4%B8%80%E9%94%AE%E6%89%93%E5%8C%85%E5%B9%B6%E4%B8%8A%E4%BC%A0maven.html)\n* [Flutter 1.12后 上传aar至maven私服](https://kikt.top/posts/flutter/exists/upload-aar-to-maven/)\n\n","source":"_posts/flutter-maven.md","raw":"---\ntitle: Flutter 自动打包并将 aar 文件上传到 Maven\ndate: 2020-04-26 22:42:04\ntags: [Flutter]\ncategories: Flutter\n---\n\n### 思路\n \n1. 先执行 ``flutter pub get`` 获取项目最新依赖插件。\n2. 对 flutter module 进行打包成 aar，因为是上传到 maven 的，只要 release 版本即可。\n3. 对打包出来的 aar 文件，简单粗暴使用 ``mvn deploy`` 指令进行上传到 maven。\n4. 上传完之后，提示如何引入到项目。\n\n\n### 完整构建脚本\n\n创建一个 ``android_build.sh`` 文件\n\n```shell\n#!/usr/bin/env bash\n\n###############################################################\n# 脚本是 shell 文件，只适用于 mac 系统\n# 执行脚本时，版本号为必填参数\n# 在项目路径下执行命令：./android_build.sh 版本号\n# 若出现提示 `zsh: command not found: android_build.sh`\n# 解决方法：\n# 1. vim ~/.zshrc\n# 2. 找到 “# User configuration” 在其位置下面加 `source ~/.bash_profile`\n# 3. 保存退出\n# 4. source ~/.zshrc\n###############################################################\n\n# 在执行出错时结束程序\nset -e\n\n# 读取版本号\nversion=$1\n\n###### 1. 检查参数\nif [ ! -n  \"$version\" ]; then\n\necho \">>> 版本号参数不能为空!\"\n\n# 结束脚本运行\nexit\nfi\n\n###### 2. 获取/更新包\n\necho \">>> 执行 flutter pub get!\"\n\nflutter pub get\n\n###### 3. 构建依赖项目的AAR\n\necho \">>> 执行构建 ${version} release 版本 aar !\"\n\nflutter build aar --no-debug --no-profile --build-number ${version}\n\necho \">>> 构建成功\"\n\n###### 4. 将文件上传 maven\n\necho \">>> 执行上传 Maven\"\n\n# 打包出来的 aar 文件存放路径\nfile_path=\"build/host/outputs/repo/com/chicdeals/flutter/flutter_release/$version/flutter_release-$version\"\n\nmvn deploy:deploy-file \\\n-s=\"mvn-settings.xml\" \\\n-DpomFile=\"$file_path.pom\" \\\n-DgeneratePom=true \\\n-Dfile=\"$file_path.aar\" \\\n-Durl=\"https://oss.bgapps.cn/repository/banggood-release\" \\\n-DrepositoryId=\"com.chicdeals.flutter\" \\\n-DgroupId=\"com.chicdeals.flutter\" \\\n-Dpackaging=aar\n\necho \">>> 上传成功\"\n\n###### 5. 提示如何引入\n\necho \">>> 项目接入地址：\"\n\necho \">>> implementation 'com.chicdeals.flutter:flutter_release:$version'\"\n\n```\n\n与 ``android_build.sh`` 文件同目录下创建 maven 账号密码配置文件 ``mvn-settings.xml``。\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<settings xmlns=\"http://maven.apache.org/SETTINGS/1.0.0\"\n          xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n          xsi:schemaLocation=\"http://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd\">\n          \n  <pluginGroups></pluginGroups>\n\n  <proxies></proxies>\n\n  <servers>\n    <!-- server\n     | Specifies the authentication information to use when connecting to a particular server, identified by\n     | a unique name within the system (referred to by the 'id' attribute below).\n     |\n     | NOTE: You should either specify username/password OR privateKey/passphrase, since these pairings are\n     |       used together.\n     |\n     -->\n    <server>\n      <id>com.chicdeals.flutter</id>\n      <username>Maven账号</username>\n      <password>Maven密码</password>\n    </server>\n    \n  </servers>\n\n  </profiles>\n\n</settings>\n\n```\n\n### 解释\n\n上面脚本的注释已经做了比较详细的解释了，在这里对几个比较重点的地方再做一遍解释说明。\n\n1. 执行命令是 ``./android_build.sh 版本号`` 版本号为必传参数。\n2. 执行 mvn 命令的前提需要 Mac 系统安装 Maven，安装方法建议通过 ``brew install maven`` 安装。\n3. Maven 账号密码配置文件在 ``mvn-settings.xml``，其中文件配置的 ``id`` 需要与 ``DgroupId`` 和 ``DrepositoryId`` 保持一致。\n\n\n### 拓展\n\n1. 如何验证安装成功 Maven，执行以下命令：\n\n```\n$ mvn -version\n```\n\n成功时，输出的日志如下：\n\n```\nApache Maven 3.6.3 (cecedd343002696d0abb50b32b541b8a6ba2883f)\nMaven home: /usr/local/maven/apache-maven-3.6.3\nJava version: 1.8.0_172, vendor: Oracle Corporation, runtime: /Library/Java/JavaVirtualMachines/jdk1.8.0_172.jdk/Contents/Home/jre\nDefault locale: zh_CN, platform encoding: UTF-8\nOS name: \"mac os x\", version: \"10.15.3\", arch: \"x86_64\", family: \"mac\"\n```\n\n2. 想查看详细 Maven 上传日志，在命令行加多 ``--debug`` 即可。\n\n```\nmvn --debug deploy:deploy-file \\\n-s=\"mvn-settings.xml\" \\\n-DpomFile=\"build/host/outputs/repo/com/chicdeals/flutter/flutter_release/1.0/flutter_release-1.0.pom\" \\\n-DgeneratePom=true \\\n-Dfile=\"build/host/outputs/repo/com/chicdeals/flutter/flutter_release/1.0/flutter_release-1.0.aar\" \\\n-Durl=\"https://oss.bgapps.cn/repository/banggood-release\" \\\n-DrepositoryId=\"com.chicdeals.flutter\" \\\n-DgroupId=\"com.chicdeals.flutter\" \\\n-Dpackaging=aar\n```\n\n### 参考资料\n\n* [Flutter 自动打包依赖aar上传Maven仓库( Shell+Gradle 脚本)](https://blog.csdn.net/qizewei123/article/details/102768038)\n* [Flutter混编一键打包并上传maven](https://galaxybruce.github.io/flutter/Flutter%E6%B7%B7%E7%BC%96%E4%B8%80%E9%94%AE%E6%89%93%E5%8C%85%E5%B9%B6%E4%B8%8A%E4%BC%A0maven.html)\n* [Flutter 1.12后 上传aar至maven私服](https://kikt.top/posts/flutter/exists/upload-aar-to-maven/)\n\n","slug":"flutter-maven","published":1,"updated":"2020-11-26T14:43:11.892Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cks0kficn000xw3yzf5jctqqa","content":"<h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><ol>\n<li>先执行 <code>flutter pub get</code> 获取项目最新依赖插件。</li>\n<li>对 flutter module 进行打包成 aar，因为是上传到 maven 的，只要 release 版本即可。</li>\n<li>对打包出来的 aar 文件，简单粗暴使用 <code>mvn deploy</code> 指令进行上传到 maven。</li>\n<li>上传完之后，提示如何引入到项目。</li>\n</ol>\n<h3 id=\"完整构建脚本\"><a href=\"#完整构建脚本\" class=\"headerlink\" title=\"完整构建脚本\"></a>完整构建脚本</h3><p>创建一个 <code>android_build.sh</code> 文件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">!/usr/bin/env bash</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\">##############################################################</span></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 脚本是 shell 文件，只适用于 mac 系统</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 执行脚本时，版本号为必填参数</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 在项目路径下执行命令：./android_build.sh 版本号</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 若出现提示 `zsh: <span class=\"built_in\">command</span> not found: android_build.sh`</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 解决方法：</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 1. vim ~/.zshrc</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 2. 找到 “<span class=\"comment\"># User configuration” 在其位置下面加 `source ~/.bash_profile`</span></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 3. 保存退出</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 4. <span class=\"built_in\">source</span> ~/.zshrc</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\">##############################################################</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 在执行出错时结束程序</span></span><br><span class=\"line\">set -e</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 读取版本号</span></span><br><span class=\"line\">version=$1</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\">##### 1. 检查参数</span></span></span><br><span class=\"line\">if [ ! -n  \"$version\" ]; then</span><br><span class=\"line\"></span><br><span class=\"line\">echo \"&gt;&gt;&gt; 版本号参数不能为空!\"</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 结束脚本运行</span></span><br><span class=\"line\">exit</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\">##### 2. 获取/更新包</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">echo \"&gt;&gt;&gt; 执行 flutter pub get!\"</span><br><span class=\"line\"></span><br><span class=\"line\">flutter pub get</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\">##### 3. 构建依赖项目的AAR</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">echo \"&gt;&gt;&gt; 执行构建 $&#123;version&#125; release 版本 aar !\"</span><br><span class=\"line\"></span><br><span class=\"line\">flutter build aar --no-debug --no-profile --build-number $&#123;version&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">echo \"&gt;&gt;&gt; 构建成功\"</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\">##### 4. 将文件上传 maven</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">echo \"&gt;&gt;&gt; 执行上传 Maven\"</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 打包出来的 aar 文件存放路径</span></span><br><span class=\"line\">file_path=\"build/host/outputs/repo/com/chicdeals/flutter/flutter_release/$version/flutter_release-$version\"</span><br><span class=\"line\"></span><br><span class=\"line\">mvn deploy:deploy-file \\</span><br><span class=\"line\">-s=\"mvn-settings.xml\" \\</span><br><span class=\"line\">-DpomFile=\"$file_path.pom\" \\</span><br><span class=\"line\">-DgeneratePom=true \\</span><br><span class=\"line\">-Dfile=\"$file_path.aar\" \\</span><br><span class=\"line\">-Durl=\"https://oss.bgapps.cn/repository/banggood-release\" \\</span><br><span class=\"line\">-DrepositoryId=\"com.chicdeals.flutter\" \\</span><br><span class=\"line\">-DgroupId=\"com.chicdeals.flutter\" \\</span><br><span class=\"line\">-Dpackaging=aar</span><br><span class=\"line\"></span><br><span class=\"line\">echo \"&gt;&gt;&gt; 上传成功\"</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\">##### 5. 提示如何引入</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">echo \"&gt;&gt;&gt; 项目接入地址：\"</span><br><span class=\"line\"></span><br><span class=\"line\">echo \"&gt;&gt;&gt; implementation 'com.chicdeals.flutter:flutter_release:$version'\"</span><br></pre></td></tr></table></figure>\n\n<p>与 <code>android_build.sh</code> 文件同目录下创建 maven 账号密码配置文件 <code>mvn-settings.xml</code>。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">settings</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://maven.apache.org/SETTINGS/1.0.0\"</span></span></span><br><span class=\"line\"><span class=\"tag\">          <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></span></span><br><span class=\"line\"><span class=\"tag\">          <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd\"</span>&gt;</span></span><br><span class=\"line\">          </span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">pluginGroups</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">pluginGroups</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">proxies</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">proxies</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">servers</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- server</span></span><br><span class=\"line\"><span class=\"comment\">     | Specifies the authentication information to use when connecting to a particular server, identified by</span></span><br><span class=\"line\"><span class=\"comment\">     | a unique name within the system (referred to by the 'id' attribute below).</span></span><br><span class=\"line\"><span class=\"comment\">     |</span></span><br><span class=\"line\"><span class=\"comment\">     | <span class=\"doctag\">NOTE:</span> You should either specify username/password OR privateKey/passphrase, since these pairings are</span></span><br><span class=\"line\"><span class=\"comment\">     |       used together.</span></span><br><span class=\"line\"><span class=\"comment\">     |</span></span><br><span class=\"line\"><span class=\"comment\">     --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">server</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>com.chicdeals.flutter<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">username</span>&gt;</span>Maven账号<span class=\"tag\">&lt;/<span class=\"name\">username</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">password</span>&gt;</span>Maven密码<span class=\"tag\">&lt;/<span class=\"name\">password</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">server</span>&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">servers</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">profiles</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">settings</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"解释\"><a href=\"#解释\" class=\"headerlink\" title=\"解释\"></a>解释</h3><p>上面脚本的注释已经做了比较详细的解释了，在这里对几个比较重点的地方再做一遍解释说明。</p>\n<ol>\n<li>执行命令是 <code>./android_build.sh 版本号</code> 版本号为必传参数。</li>\n<li>执行 mvn 命令的前提需要 Mac 系统安装 Maven，安装方法建议通过 <code>brew install maven</code> 安装。</li>\n<li>Maven 账号密码配置文件在 <code>mvn-settings.xml</code>，其中文件配置的 <code>id</code> 需要与 <code>DgroupId</code> 和 <code>DrepositoryId</code> 保持一致。</li>\n</ol>\n<h3 id=\"拓展\"><a href=\"#拓展\" class=\"headerlink\" title=\"拓展\"></a>拓展</h3><ol>\n<li>如何验证安装成功 Maven，执行以下命令：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mvn -version</span><br></pre></td></tr></table></figure>\n\n<p>成功时，输出的日志如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Apache Maven 3.6.3 (cecedd343002696d0abb50b32b541b8a6ba2883f)</span><br><span class=\"line\">Maven home: /usr/local/maven/apache-maven-3.6.3</span><br><span class=\"line\">Java version: 1.8.0_172, vendor: Oracle Corporation, runtime: /Library/Java/JavaVirtualMachines/jdk1.8.0_172.jdk/Contents/Home/jre</span><br><span class=\"line\">Default locale: zh_CN, platform encoding: UTF-8</span><br><span class=\"line\">OS name: &quot;mac os x&quot;, version: &quot;10.15.3&quot;, arch: &quot;x86_64&quot;, family: &quot;mac&quot;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>想查看详细 Maven 上传日志，在命令行加多 <code>--debug</code> 即可。</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mvn --debug deploy:deploy-file \\</span><br><span class=\"line\">-s=&quot;mvn-settings.xml&quot; \\</span><br><span class=\"line\">-DpomFile=&quot;build/host/outputs/repo/com/chicdeals/flutter/flutter_release/1.0/flutter_release-1.0.pom&quot; \\</span><br><span class=\"line\">-DgeneratePom=true \\</span><br><span class=\"line\">-Dfile=&quot;build/host/outputs/repo/com/chicdeals/flutter/flutter_release/1.0/flutter_release-1.0.aar&quot; \\</span><br><span class=\"line\">-Durl=&quot;https://oss.bgapps.cn/repository/banggood-release&quot; \\</span><br><span class=\"line\">-DrepositoryId=&quot;com.chicdeals.flutter&quot; \\</span><br><span class=\"line\">-DgroupId=&quot;com.chicdeals.flutter&quot; \\</span><br><span class=\"line\">-Dpackaging=aar</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><ul>\n<li><a href=\"https://blog.csdn.net/qizewei123/article/details/102768038\" target=\"_blank\" rel=\"noopener\">Flutter 自动打包依赖aar上传Maven仓库( Shell+Gradle 脚本)</a></li>\n<li><a href=\"https://galaxybruce.github.io/flutter/Flutter%E6%B7%B7%E7%BC%96%E4%B8%80%E9%94%AE%E6%89%93%E5%8C%85%E5%B9%B6%E4%B8%8A%E4%BC%A0maven.html\" target=\"_blank\" rel=\"noopener\">Flutter混编一键打包并上传maven</a></li>\n<li><a href=\"https://kikt.top/posts/flutter/exists/upload-aar-to-maven/\" target=\"_blank\" rel=\"noopener\">Flutter 1.12后 上传aar至maven私服</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><ol>\n<li>先执行 <code>flutter pub get</code> 获取项目最新依赖插件。</li>\n<li>对 flutter module 进行打包成 aar，因为是上传到 maven 的，只要 release 版本即可。</li>\n<li>对打包出来的 aar 文件，简单粗暴使用 <code>mvn deploy</code> 指令进行上传到 maven。</li>\n<li>上传完之后，提示如何引入到项目。</li>\n</ol>\n<h3 id=\"完整构建脚本\"><a href=\"#完整构建脚本\" class=\"headerlink\" title=\"完整构建脚本\"></a>完整构建脚本</h3><p>创建一个 <code>android_build.sh</code> 文件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">!/usr/bin/env bash</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\">##############################################################</span></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 脚本是 shell 文件，只适用于 mac 系统</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 执行脚本时，版本号为必填参数</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 在项目路径下执行命令：./android_build.sh 版本号</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 若出现提示 `zsh: <span class=\"built_in\">command</span> not found: android_build.sh`</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 解决方法：</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 1. vim ~/.zshrc</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 2. 找到 “<span class=\"comment\"># User configuration” 在其位置下面加 `source ~/.bash_profile`</span></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 3. 保存退出</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 4. <span class=\"built_in\">source</span> ~/.zshrc</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\">##############################################################</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 在执行出错时结束程序</span></span><br><span class=\"line\">set -e</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 读取版本号</span></span><br><span class=\"line\">version=$1</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\">##### 1. 检查参数</span></span></span><br><span class=\"line\">if [ ! -n  \"$version\" ]; then</span><br><span class=\"line\"></span><br><span class=\"line\">echo \"&gt;&gt;&gt; 版本号参数不能为空!\"</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 结束脚本运行</span></span><br><span class=\"line\">exit</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\">##### 2. 获取/更新包</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">echo \"&gt;&gt;&gt; 执行 flutter pub get!\"</span><br><span class=\"line\"></span><br><span class=\"line\">flutter pub get</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\">##### 3. 构建依赖项目的AAR</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">echo \"&gt;&gt;&gt; 执行构建 $&#123;version&#125; release 版本 aar !\"</span><br><span class=\"line\"></span><br><span class=\"line\">flutter build aar --no-debug --no-profile --build-number $&#123;version&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">echo \"&gt;&gt;&gt; 构建成功\"</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\">##### 4. 将文件上传 maven</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">echo \"&gt;&gt;&gt; 执行上传 Maven\"</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 打包出来的 aar 文件存放路径</span></span><br><span class=\"line\">file_path=\"build/host/outputs/repo/com/chicdeals/flutter/flutter_release/$version/flutter_release-$version\"</span><br><span class=\"line\"></span><br><span class=\"line\">mvn deploy:deploy-file \\</span><br><span class=\"line\">-s=\"mvn-settings.xml\" \\</span><br><span class=\"line\">-DpomFile=\"$file_path.pom\" \\</span><br><span class=\"line\">-DgeneratePom=true \\</span><br><span class=\"line\">-Dfile=\"$file_path.aar\" \\</span><br><span class=\"line\">-Durl=\"https://oss.bgapps.cn/repository/banggood-release\" \\</span><br><span class=\"line\">-DrepositoryId=\"com.chicdeals.flutter\" \\</span><br><span class=\"line\">-DgroupId=\"com.chicdeals.flutter\" \\</span><br><span class=\"line\">-Dpackaging=aar</span><br><span class=\"line\"></span><br><span class=\"line\">echo \"&gt;&gt;&gt; 上传成功\"</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\">##### 5. 提示如何引入</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">echo \"&gt;&gt;&gt; 项目接入地址：\"</span><br><span class=\"line\"></span><br><span class=\"line\">echo \"&gt;&gt;&gt; implementation 'com.chicdeals.flutter:flutter_release:$version'\"</span><br></pre></td></tr></table></figure>\n\n<p>与 <code>android_build.sh</code> 文件同目录下创建 maven 账号密码配置文件 <code>mvn-settings.xml</code>。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">settings</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://maven.apache.org/SETTINGS/1.0.0\"</span></span></span><br><span class=\"line\"><span class=\"tag\">          <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></span></span><br><span class=\"line\"><span class=\"tag\">          <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd\"</span>&gt;</span></span><br><span class=\"line\">          </span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">pluginGroups</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">pluginGroups</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">proxies</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">proxies</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">servers</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- server</span></span><br><span class=\"line\"><span class=\"comment\">     | Specifies the authentication information to use when connecting to a particular server, identified by</span></span><br><span class=\"line\"><span class=\"comment\">     | a unique name within the system (referred to by the 'id' attribute below).</span></span><br><span class=\"line\"><span class=\"comment\">     |</span></span><br><span class=\"line\"><span class=\"comment\">     | <span class=\"doctag\">NOTE:</span> You should either specify username/password OR privateKey/passphrase, since these pairings are</span></span><br><span class=\"line\"><span class=\"comment\">     |       used together.</span></span><br><span class=\"line\"><span class=\"comment\">     |</span></span><br><span class=\"line\"><span class=\"comment\">     --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">server</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>com.chicdeals.flutter<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">username</span>&gt;</span>Maven账号<span class=\"tag\">&lt;/<span class=\"name\">username</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">password</span>&gt;</span>Maven密码<span class=\"tag\">&lt;/<span class=\"name\">password</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">server</span>&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">servers</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">profiles</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">settings</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"解释\"><a href=\"#解释\" class=\"headerlink\" title=\"解释\"></a>解释</h3><p>上面脚本的注释已经做了比较详细的解释了，在这里对几个比较重点的地方再做一遍解释说明。</p>\n<ol>\n<li>执行命令是 <code>./android_build.sh 版本号</code> 版本号为必传参数。</li>\n<li>执行 mvn 命令的前提需要 Mac 系统安装 Maven，安装方法建议通过 <code>brew install maven</code> 安装。</li>\n<li>Maven 账号密码配置文件在 <code>mvn-settings.xml</code>，其中文件配置的 <code>id</code> 需要与 <code>DgroupId</code> 和 <code>DrepositoryId</code> 保持一致。</li>\n</ol>\n<h3 id=\"拓展\"><a href=\"#拓展\" class=\"headerlink\" title=\"拓展\"></a>拓展</h3><ol>\n<li>如何验证安装成功 Maven，执行以下命令：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mvn -version</span><br></pre></td></tr></table></figure>\n\n<p>成功时，输出的日志如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Apache Maven 3.6.3 (cecedd343002696d0abb50b32b541b8a6ba2883f)</span><br><span class=\"line\">Maven home: /usr/local/maven/apache-maven-3.6.3</span><br><span class=\"line\">Java version: 1.8.0_172, vendor: Oracle Corporation, runtime: /Library/Java/JavaVirtualMachines/jdk1.8.0_172.jdk/Contents/Home/jre</span><br><span class=\"line\">Default locale: zh_CN, platform encoding: UTF-8</span><br><span class=\"line\">OS name: &quot;mac os x&quot;, version: &quot;10.15.3&quot;, arch: &quot;x86_64&quot;, family: &quot;mac&quot;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>想查看详细 Maven 上传日志，在命令行加多 <code>--debug</code> 即可。</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mvn --debug deploy:deploy-file \\</span><br><span class=\"line\">-s=&quot;mvn-settings.xml&quot; \\</span><br><span class=\"line\">-DpomFile=&quot;build/host/outputs/repo/com/chicdeals/flutter/flutter_release/1.0/flutter_release-1.0.pom&quot; \\</span><br><span class=\"line\">-DgeneratePom=true \\</span><br><span class=\"line\">-Dfile=&quot;build/host/outputs/repo/com/chicdeals/flutter/flutter_release/1.0/flutter_release-1.0.aar&quot; \\</span><br><span class=\"line\">-Durl=&quot;https://oss.bgapps.cn/repository/banggood-release&quot; \\</span><br><span class=\"line\">-DrepositoryId=&quot;com.chicdeals.flutter&quot; \\</span><br><span class=\"line\">-DgroupId=&quot;com.chicdeals.flutter&quot; \\</span><br><span class=\"line\">-Dpackaging=aar</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><ul>\n<li><a href=\"https://blog.csdn.net/qizewei123/article/details/102768038\" target=\"_blank\" rel=\"noopener\">Flutter 自动打包依赖aar上传Maven仓库( Shell+Gradle 脚本)</a></li>\n<li><a href=\"https://galaxybruce.github.io/flutter/Flutter%E6%B7%B7%E7%BC%96%E4%B8%80%E9%94%AE%E6%89%93%E5%8C%85%E5%B9%B6%E4%B8%8A%E4%BC%A0maven.html\" target=\"_blank\" rel=\"noopener\">Flutter混编一键打包并上传maven</a></li>\n<li><a href=\"https://kikt.top/posts/flutter/exists/upload-aar-to-maven/\" target=\"_blank\" rel=\"noopener\">Flutter 1.12后 上传aar至maven私服</a></li>\n</ul>\n"},{"title":"Flutter 如何实现国际化多语言","date":"2020-02-18T13:22:51.000Z","_content":"\n关于 Flutter 国际化实现方案，网上查看了很多资料，主要有两种。\n \n1. 基于 intl package 的国际化实现（官方推荐）\n2. 创建支持语种的 Json 文件，存储及读取里面的语言\n\n> 本文介绍的是第一种实现方案，毕竟都是官方推荐使用的。\n\n### 前言\n\n采用第一种方案，不得不提的一个插件 [Flutter Intl](https://plugins.jetbrains.com/plugin/13666-flutter-intl/)，安装使用该插件之后实现国际化非常简单。\n\n* 该插件更新维护频率高，也是目前大部分人使用的。\n* 并且支持 Android Studio 和 VS Code 开发工具\n\n下面是以 Android Studio 为例，详细讲解使用过程：\n\n### 1.安装插件\n\n在 Preferences > Plugins > Marketplace > 搜索 ``Flutter Intl`` > 安装完重启 AS\n\n![image](/images/2020/02/flutter_language_01.png)\n\n### 2. 初始化项目 Intl\n\n![image](/images/2020/02/flutter_language_02.png)\n\n完成上面操作之后会自动生成以下文件目录：\n\n![image](/images/2020/02/flutter_language_03.png)\n\n* generated 是自动生成的 dart 代码。\n* I10n 是对应的 arb 文件目录，项目的文案都是在这里新增。\n\n在 ``pubspec.yaml`` 文件底部也会新增配置：\n\n```\nflutter_intl:\n  enabled: true\n```\n\n### 3. 项目增加国际化支持\n\n在项目的 ``pubspec.yaml`` 下添加依赖 ``flutter_localizations``\n\n```dart\ndependencies:\n  flutter:\n    sdk: flutter\n  flutter_localizations:\n    sdk: flutter\n```\n\n添加完之后执行下命令 ``flutter pub get``，回到 ``main.dart`` 文件配置项目支持的语种\n\n```dart\nrunApp(MaterialApp(\n    localizationsDelegates: [\n      S.delegate,\n      GlobalMaterialLocalizations.delegate,\n      GlobalWidgetsLocalizations.delegate,\n      GlobalCupertinoLocalizations.delegate,\n    ],\n    // 支持语种\n    supportedLocales: S.delegate.supportedLocales,\n    // 设置当前项目的语言\n    locale: Local('en', 'GB'),\n));\n```\n\n在主入口前初始化框架当前语言：\n\n```dart\nS.load(Locale('en', 'GB'));\n```\n\n### 4. 如何使用\n\n在刚通过插件生成的文件 ``intl_en.arb`` 下，新增文案：\n\n```\n{\n  \"contactUs\": \"ContactUs\"\n}\n```\n\n添加完之后 ``command+s`` 保存，插件就会执行命令，在 ``I10n.dart`` 和 ``messages_en.dart`` 文件下生成对应的代码。\n\nI10n.dart:\n\n```\nclass S {\n  ...\n\n  /// `ContactUs`\n  String get contactUs {\n    return Intl.message(\n      'ContactUs',\n      name: 'contactUs',\n      desc: '',\n      args: [],\n    );\n  }\n}\n```\n\nmessages_en.dart:\n\n```\nclass MessageLookup extends MessageLookupByLibrary {\n  String get localeName => 'en';\n\n  final messages = _notInlinedMessages(_notInlinedMessages);\n  static _notInlinedMessages(_) => <String, Function> {\n    \"contactUs\" : MessageLookupByLibrary.simpleMessage(\"ContactUs\")\n  };\n}\n```\n\n**在代码中使用新增文案**\n\n```\nS.of(context).contactUs\n```\n\n### 5. 如何新增语种\n\n>点击 Tools > Flutter Intl > Add Locale\n\n![image](/images/2020/02/flutter_language_04.png)\n\n新增 中东阿拉伯语：\n\n![image](/images/2020/02/flutter_language_05.png)\n\n点击 OK 之后，插件会新创建两个文件：\n\n![image](/images/2020/02/flutter_language_06.png)\n\n然后在新创建的 ``intl_ar.arb`` 文件，增加对应的语种即可：\n\n```\n{\n  \"contactUs\": \"اتصل بنا\"\n}\n```\n\n### 6. Arb 文件更多语法使用\n\n占位符：\n\n```\n{\n    \"hello\": \"Hello {name}\"\n}\n```\n\n使用：\n\n```\nS.of(contxt).hello(\"GoJun\");\n```\n\n\n### 资料\n\n* [Flutter国际化的三种方式-->json](https://www.jianshu.com/p/1960d34e54ae)\n* [官方文档 Flutter 应用国际化](https://flutter.dev/docs/development/accessibility-and-localization/internationalization)\n* [Fluter Intl 插件](https://plugins.jetbrains.com/plugin/13666-flutter-intl/)","source":"_posts/flutter-language.md","raw":"---\ntitle: Flutter 如何实现国际化多语言\ndate: 2020-02-18 21:22:51\ntags: [Flutter]\ncategories: Flutter\n---\n\n关于 Flutter 国际化实现方案，网上查看了很多资料，主要有两种。\n \n1. 基于 intl package 的国际化实现（官方推荐）\n2. 创建支持语种的 Json 文件，存储及读取里面的语言\n\n> 本文介绍的是第一种实现方案，毕竟都是官方推荐使用的。\n\n### 前言\n\n采用第一种方案，不得不提的一个插件 [Flutter Intl](https://plugins.jetbrains.com/plugin/13666-flutter-intl/)，安装使用该插件之后实现国际化非常简单。\n\n* 该插件更新维护频率高，也是目前大部分人使用的。\n* 并且支持 Android Studio 和 VS Code 开发工具\n\n下面是以 Android Studio 为例，详细讲解使用过程：\n\n### 1.安装插件\n\n在 Preferences > Plugins > Marketplace > 搜索 ``Flutter Intl`` > 安装完重启 AS\n\n![image](/images/2020/02/flutter_language_01.png)\n\n### 2. 初始化项目 Intl\n\n![image](/images/2020/02/flutter_language_02.png)\n\n完成上面操作之后会自动生成以下文件目录：\n\n![image](/images/2020/02/flutter_language_03.png)\n\n* generated 是自动生成的 dart 代码。\n* I10n 是对应的 arb 文件目录，项目的文案都是在这里新增。\n\n在 ``pubspec.yaml`` 文件底部也会新增配置：\n\n```\nflutter_intl:\n  enabled: true\n```\n\n### 3. 项目增加国际化支持\n\n在项目的 ``pubspec.yaml`` 下添加依赖 ``flutter_localizations``\n\n```dart\ndependencies:\n  flutter:\n    sdk: flutter\n  flutter_localizations:\n    sdk: flutter\n```\n\n添加完之后执行下命令 ``flutter pub get``，回到 ``main.dart`` 文件配置项目支持的语种\n\n```dart\nrunApp(MaterialApp(\n    localizationsDelegates: [\n      S.delegate,\n      GlobalMaterialLocalizations.delegate,\n      GlobalWidgetsLocalizations.delegate,\n      GlobalCupertinoLocalizations.delegate,\n    ],\n    // 支持语种\n    supportedLocales: S.delegate.supportedLocales,\n    // 设置当前项目的语言\n    locale: Local('en', 'GB'),\n));\n```\n\n在主入口前初始化框架当前语言：\n\n```dart\nS.load(Locale('en', 'GB'));\n```\n\n### 4. 如何使用\n\n在刚通过插件生成的文件 ``intl_en.arb`` 下，新增文案：\n\n```\n{\n  \"contactUs\": \"ContactUs\"\n}\n```\n\n添加完之后 ``command+s`` 保存，插件就会执行命令，在 ``I10n.dart`` 和 ``messages_en.dart`` 文件下生成对应的代码。\n\nI10n.dart:\n\n```\nclass S {\n  ...\n\n  /// `ContactUs`\n  String get contactUs {\n    return Intl.message(\n      'ContactUs',\n      name: 'contactUs',\n      desc: '',\n      args: [],\n    );\n  }\n}\n```\n\nmessages_en.dart:\n\n```\nclass MessageLookup extends MessageLookupByLibrary {\n  String get localeName => 'en';\n\n  final messages = _notInlinedMessages(_notInlinedMessages);\n  static _notInlinedMessages(_) => <String, Function> {\n    \"contactUs\" : MessageLookupByLibrary.simpleMessage(\"ContactUs\")\n  };\n}\n```\n\n**在代码中使用新增文案**\n\n```\nS.of(context).contactUs\n```\n\n### 5. 如何新增语种\n\n>点击 Tools > Flutter Intl > Add Locale\n\n![image](/images/2020/02/flutter_language_04.png)\n\n新增 中东阿拉伯语：\n\n![image](/images/2020/02/flutter_language_05.png)\n\n点击 OK 之后，插件会新创建两个文件：\n\n![image](/images/2020/02/flutter_language_06.png)\n\n然后在新创建的 ``intl_ar.arb`` 文件，增加对应的语种即可：\n\n```\n{\n  \"contactUs\": \"اتصل بنا\"\n}\n```\n\n### 6. Arb 文件更多语法使用\n\n占位符：\n\n```\n{\n    \"hello\": \"Hello {name}\"\n}\n```\n\n使用：\n\n```\nS.of(contxt).hello(\"GoJun\");\n```\n\n\n### 资料\n\n* [Flutter国际化的三种方式-->json](https://www.jianshu.com/p/1960d34e54ae)\n* [官方文档 Flutter 应用国际化](https://flutter.dev/docs/development/accessibility-and-localization/internationalization)\n* [Fluter Intl 插件](https://plugins.jetbrains.com/plugin/13666-flutter-intl/)","slug":"flutter-language","published":1,"updated":"2020-11-23T13:30:36.562Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cks0kficp0011w3yzpkk3t2yn","content":"<p>关于 Flutter 国际化实现方案，网上查看了很多资料，主要有两种。</p>\n<ol>\n<li>基于 intl package 的国际化实现（官方推荐）</li>\n<li>创建支持语种的 Json 文件，存储及读取里面的语言</li>\n</ol>\n<blockquote>\n<p>本文介绍的是第一种实现方案，毕竟都是官方推荐使用的。</p>\n</blockquote>\n<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>采用第一种方案，不得不提的一个插件 <a href=\"https://plugins.jetbrains.com/plugin/13666-flutter-intl/\" target=\"_blank\" rel=\"noopener\">Flutter Intl</a>，安装使用该插件之后实现国际化非常简单。</p>\n<ul>\n<li>该插件更新维护频率高，也是目前大部分人使用的。</li>\n<li>并且支持 Android Studio 和 VS Code 开发工具</li>\n</ul>\n<p>下面是以 Android Studio 为例，详细讲解使用过程：</p>\n<h3 id=\"1-安装插件\"><a href=\"#1-安装插件\" class=\"headerlink\" title=\"1.安装插件\"></a>1.安装插件</h3><p>在 Preferences &gt; Plugins &gt; Marketplace &gt; 搜索 <code>Flutter Intl</code> &gt; 安装完重启 AS</p>\n<p><img src=\"/images/2020/02/flutter_language_01.png\" alt=\"image\"></p>\n<h3 id=\"2-初始化项目-Intl\"><a href=\"#2-初始化项目-Intl\" class=\"headerlink\" title=\"2. 初始化项目 Intl\"></a>2. 初始化项目 Intl</h3><p><img src=\"/images/2020/02/flutter_language_02.png\" alt=\"image\"></p>\n<p>完成上面操作之后会自动生成以下文件目录：</p>\n<p><img src=\"/images/2020/02/flutter_language_03.png\" alt=\"image\"></p>\n<ul>\n<li>generated 是自动生成的 dart 代码。</li>\n<li>I10n 是对应的 arb 文件目录，项目的文案都是在这里新增。</li>\n</ul>\n<p>在 <code>pubspec.yaml</code> 文件底部也会新增配置：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">flutter_intl:</span><br><span class=\"line\">  enabled: true</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-项目增加国际化支持\"><a href=\"#3-项目增加国际化支持\" class=\"headerlink\" title=\"3. 项目增加国际化支持\"></a>3. 项目增加国际化支持</h3><p>在项目的 <code>pubspec.yaml</code> 下添加依赖 <code>flutter_localizations</code></p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dependencies:</span><br><span class=\"line\">  flutter:</span><br><span class=\"line\">    sdk: flutter</span><br><span class=\"line\">  flutter_localizations:</span><br><span class=\"line\">    sdk: flutter</span><br></pre></td></tr></table></figure>\n\n<p>添加完之后执行下命令 <code>flutter pub get</code>，回到 <code>main.dart</code> 文件配置项目支持的语种</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">runApp(MaterialApp(</span><br><span class=\"line\">    localizationsDelegates: [</span><br><span class=\"line\">      S.delegate,</span><br><span class=\"line\">      GlobalMaterialLocalizations.delegate,</span><br><span class=\"line\">      GlobalWidgetsLocalizations.delegate,</span><br><span class=\"line\">      GlobalCupertinoLocalizations.delegate,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    <span class=\"comment\">// 支持语种</span></span><br><span class=\"line\">    supportedLocales: S.delegate.supportedLocales,</span><br><span class=\"line\">    <span class=\"comment\">// 设置当前项目的语言</span></span><br><span class=\"line\">    locale: Local(<span class=\"string\">'en'</span>, <span class=\"string\">'GB'</span>),</span><br><span class=\"line\">));</span><br></pre></td></tr></table></figure>\n\n<p>在主入口前初始化框架当前语言：</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">S.load(Locale(<span class=\"string\">'en'</span>, <span class=\"string\">'GB'</span>));</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-如何使用\"><a href=\"#4-如何使用\" class=\"headerlink\" title=\"4. 如何使用\"></a>4. 如何使用</h3><p>在刚通过插件生成的文件 <code>intl_en.arb</code> 下，新增文案：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;contactUs&quot;: &quot;ContactUs&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>添加完之后 <code>command+s</code> 保存，插件就会执行命令，在 <code>I10n.dart</code> 和 <code>messages_en.dart</code> 文件下生成对应的代码。</p>\n<p>I10n.dart:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class S &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\"></span><br><span class=\"line\">  /// `ContactUs`</span><br><span class=\"line\">  String get contactUs &#123;</span><br><span class=\"line\">    return Intl.message(</span><br><span class=\"line\">      &apos;ContactUs&apos;,</span><br><span class=\"line\">      name: &apos;contactUs&apos;,</span><br><span class=\"line\">      desc: &apos;&apos;,</span><br><span class=\"line\">      args: [],</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>messages_en.dart:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class MessageLookup extends MessageLookupByLibrary &#123;</span><br><span class=\"line\">  String get localeName =&gt; &apos;en&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">  final messages = _notInlinedMessages(_notInlinedMessages);</span><br><span class=\"line\">  static _notInlinedMessages(_) =&gt; &lt;String, Function&gt; &#123;</span><br><span class=\"line\">    &quot;contactUs&quot; : MessageLookupByLibrary.simpleMessage(&quot;ContactUs&quot;)</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>在代码中使用新增文案</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">S.of(context).contactUs</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-如何新增语种\"><a href=\"#5-如何新增语种\" class=\"headerlink\" title=\"5. 如何新增语种\"></a>5. 如何新增语种</h3><blockquote>\n<p>点击 Tools &gt; Flutter Intl &gt; Add Locale</p>\n</blockquote>\n<p><img src=\"/images/2020/02/flutter_language_04.png\" alt=\"image\"></p>\n<p>新增 中东阿拉伯语：</p>\n<p><img src=\"/images/2020/02/flutter_language_05.png\" alt=\"image\"></p>\n<p>点击 OK 之后，插件会新创建两个文件：</p>\n<p><img src=\"/images/2020/02/flutter_language_06.png\" alt=\"image\"></p>\n<p>然后在新创建的 <code>intl_ar.arb</code> 文件，增加对应的语种即可：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;contactUs&quot;: &quot;اتصل بنا&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6-Arb-文件更多语法使用\"><a href=\"#6-Arb-文件更多语法使用\" class=\"headerlink\" title=\"6. Arb 文件更多语法使用\"></a>6. Arb 文件更多语法使用</h3><p>占位符：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;hello&quot;: &quot;Hello &#123;name&#125;&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>使用：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">S.of(contxt).hello(&quot;GoJun&quot;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"资料\"><a href=\"#资料\" class=\"headerlink\" title=\"资料\"></a>资料</h3><ul>\n<li><a href=\"https://www.jianshu.com/p/1960d34e54ae\" target=\"_blank\" rel=\"noopener\">Flutter国际化的三种方式–&gt;json</a></li>\n<li><a href=\"https://flutter.dev/docs/development/accessibility-and-localization/internationalization\" target=\"_blank\" rel=\"noopener\">官方文档 Flutter 应用国际化</a></li>\n<li><a href=\"https://plugins.jetbrains.com/plugin/13666-flutter-intl/\" target=\"_blank\" rel=\"noopener\">Fluter Intl 插件</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>关于 Flutter 国际化实现方案，网上查看了很多资料，主要有两种。</p>\n<ol>\n<li>基于 intl package 的国际化实现（官方推荐）</li>\n<li>创建支持语种的 Json 文件，存储及读取里面的语言</li>\n</ol>\n<blockquote>\n<p>本文介绍的是第一种实现方案，毕竟都是官方推荐使用的。</p>\n</blockquote>\n<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>采用第一种方案，不得不提的一个插件 <a href=\"https://plugins.jetbrains.com/plugin/13666-flutter-intl/\" target=\"_blank\" rel=\"noopener\">Flutter Intl</a>，安装使用该插件之后实现国际化非常简单。</p>\n<ul>\n<li>该插件更新维护频率高，也是目前大部分人使用的。</li>\n<li>并且支持 Android Studio 和 VS Code 开发工具</li>\n</ul>\n<p>下面是以 Android Studio 为例，详细讲解使用过程：</p>\n<h3 id=\"1-安装插件\"><a href=\"#1-安装插件\" class=\"headerlink\" title=\"1.安装插件\"></a>1.安装插件</h3><p>在 Preferences &gt; Plugins &gt; Marketplace &gt; 搜索 <code>Flutter Intl</code> &gt; 安装完重启 AS</p>\n<p><img src=\"/images/2020/02/flutter_language_01.png\" alt=\"image\"></p>\n<h3 id=\"2-初始化项目-Intl\"><a href=\"#2-初始化项目-Intl\" class=\"headerlink\" title=\"2. 初始化项目 Intl\"></a>2. 初始化项目 Intl</h3><p><img src=\"/images/2020/02/flutter_language_02.png\" alt=\"image\"></p>\n<p>完成上面操作之后会自动生成以下文件目录：</p>\n<p><img src=\"/images/2020/02/flutter_language_03.png\" alt=\"image\"></p>\n<ul>\n<li>generated 是自动生成的 dart 代码。</li>\n<li>I10n 是对应的 arb 文件目录，项目的文案都是在这里新增。</li>\n</ul>\n<p>在 <code>pubspec.yaml</code> 文件底部也会新增配置：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">flutter_intl:</span><br><span class=\"line\">  enabled: true</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-项目增加国际化支持\"><a href=\"#3-项目增加国际化支持\" class=\"headerlink\" title=\"3. 项目增加国际化支持\"></a>3. 项目增加国际化支持</h3><p>在项目的 <code>pubspec.yaml</code> 下添加依赖 <code>flutter_localizations</code></p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dependencies:</span><br><span class=\"line\">  flutter:</span><br><span class=\"line\">    sdk: flutter</span><br><span class=\"line\">  flutter_localizations:</span><br><span class=\"line\">    sdk: flutter</span><br></pre></td></tr></table></figure>\n\n<p>添加完之后执行下命令 <code>flutter pub get</code>，回到 <code>main.dart</code> 文件配置项目支持的语种</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">runApp(MaterialApp(</span><br><span class=\"line\">    localizationsDelegates: [</span><br><span class=\"line\">      S.delegate,</span><br><span class=\"line\">      GlobalMaterialLocalizations.delegate,</span><br><span class=\"line\">      GlobalWidgetsLocalizations.delegate,</span><br><span class=\"line\">      GlobalCupertinoLocalizations.delegate,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    <span class=\"comment\">// 支持语种</span></span><br><span class=\"line\">    supportedLocales: S.delegate.supportedLocales,</span><br><span class=\"line\">    <span class=\"comment\">// 设置当前项目的语言</span></span><br><span class=\"line\">    locale: Local(<span class=\"string\">'en'</span>, <span class=\"string\">'GB'</span>),</span><br><span class=\"line\">));</span><br></pre></td></tr></table></figure>\n\n<p>在主入口前初始化框架当前语言：</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">S.load(Locale(<span class=\"string\">'en'</span>, <span class=\"string\">'GB'</span>));</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-如何使用\"><a href=\"#4-如何使用\" class=\"headerlink\" title=\"4. 如何使用\"></a>4. 如何使用</h3><p>在刚通过插件生成的文件 <code>intl_en.arb</code> 下，新增文案：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;contactUs&quot;: &quot;ContactUs&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>添加完之后 <code>command+s</code> 保存，插件就会执行命令，在 <code>I10n.dart</code> 和 <code>messages_en.dart</code> 文件下生成对应的代码。</p>\n<p>I10n.dart:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class S &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\"></span><br><span class=\"line\">  /// `ContactUs`</span><br><span class=\"line\">  String get contactUs &#123;</span><br><span class=\"line\">    return Intl.message(</span><br><span class=\"line\">      &apos;ContactUs&apos;,</span><br><span class=\"line\">      name: &apos;contactUs&apos;,</span><br><span class=\"line\">      desc: &apos;&apos;,</span><br><span class=\"line\">      args: [],</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>messages_en.dart:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class MessageLookup extends MessageLookupByLibrary &#123;</span><br><span class=\"line\">  String get localeName =&gt; &apos;en&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">  final messages = _notInlinedMessages(_notInlinedMessages);</span><br><span class=\"line\">  static _notInlinedMessages(_) =&gt; &lt;String, Function&gt; &#123;</span><br><span class=\"line\">    &quot;contactUs&quot; : MessageLookupByLibrary.simpleMessage(&quot;ContactUs&quot;)</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>在代码中使用新增文案</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">S.of(context).contactUs</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-如何新增语种\"><a href=\"#5-如何新增语种\" class=\"headerlink\" title=\"5. 如何新增语种\"></a>5. 如何新增语种</h3><blockquote>\n<p>点击 Tools &gt; Flutter Intl &gt; Add Locale</p>\n</blockquote>\n<p><img src=\"/images/2020/02/flutter_language_04.png\" alt=\"image\"></p>\n<p>新增 中东阿拉伯语：</p>\n<p><img src=\"/images/2020/02/flutter_language_05.png\" alt=\"image\"></p>\n<p>点击 OK 之后，插件会新创建两个文件：</p>\n<p><img src=\"/images/2020/02/flutter_language_06.png\" alt=\"image\"></p>\n<p>然后在新创建的 <code>intl_ar.arb</code> 文件，增加对应的语种即可：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;contactUs&quot;: &quot;اتصل بنا&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6-Arb-文件更多语法使用\"><a href=\"#6-Arb-文件更多语法使用\" class=\"headerlink\" title=\"6. Arb 文件更多语法使用\"></a>6. Arb 文件更多语法使用</h3><p>占位符：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;hello&quot;: &quot;Hello &#123;name&#125;&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>使用：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">S.of(contxt).hello(&quot;GoJun&quot;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"资料\"><a href=\"#资料\" class=\"headerlink\" title=\"资料\"></a>资料</h3><ul>\n<li><a href=\"https://www.jianshu.com/p/1960d34e54ae\" target=\"_blank\" rel=\"noopener\">Flutter国际化的三种方式–&gt;json</a></li>\n<li><a href=\"https://flutter.dev/docs/development/accessibility-and-localization/internationalization\" target=\"_blank\" rel=\"noopener\">官方文档 Flutter 应用国际化</a></li>\n<li><a href=\"https://plugins.jetbrains.com/plugin/13666-flutter-intl/\" target=\"_blank\" rel=\"noopener\">Fluter Intl 插件</a></li>\n</ul>\n"},{"title":"Android 原生项目如何引入 Flutter","date":"2020-03-05T15:26:26.000Z","_content":"\n有两种方式创建，一种使用 Android Studio 创建集成 Flutter 模块，一种通过命令创建手动集成。\n\n最开始使用 Android Studio 创建，但是一直卡在 ``Creating Flutter Project `` 网上查了很多解决方法均无法解决，因此我是通过手动集成的。\n\n### 一、创建 Flutter 模块\n\n打开终端选择自己指定的路径下，通过以下命令创建模块：\n\n```\nflutter create - t module --org com.chicdeals.flutter ky_flutter\n```\n\n创建完之后，打开 ``pubspec.yaml`` 文件拉到最后看到比平常创建的 Flutter 项目多出下面信息：\n\n```\n  # This section identifies your Flutter project as a module meant for\n  # embedding in a native host app.  These identifiers should _not_ ordinarily\n  # be changed after generation - they are used to ensure that the tooling can\n  # maintain consistency when adding or modifying assets and plugins.\n  # They also do not have any bearing on your native host application's\n  # identifiers, which may be completely independent or the same as these.\n  module:\n    androidX: true\n    androidPackage: com.chicdeals.flutter.ky_flutter\n    iosBundleIdentifier: com.chicdeals.flutter.ky_flutter\n```\n\n修改下信息，去掉包名后面的 ``.ky_flutter`` 简短下包名。\n\n### 二、Android 项目引入 Java8\n\n在尝试将 Flutter 模块项目集成到宿主 Android 应用之前，请先确保宿主 Android 应用的 ``build.gradle`` 文件的 ``android { }`` 块中声明了以下源兼容性，例如：\n\n```\nandroid {\n  //...\n  compileOptions {\n    sourceCompatibility 1.8\n    targetCompatibility 1.8\n  }\n}\n```\n\n### 三、将 Flutter module 作为依赖项\n\n#### 方案A - 依赖 AAR\n\n这种方式会将 Flutter 库打包成由 AAR 和 POM artifacts 组成的本地 Maven 存储库。这种方案可以使你的团队不需要安装 Flutter SDK 即可编译宿主应用。\n\n1. 在你的 Flutter 模块路径下，执行如下命令：\n\n```\nflutter build aar\n```\n\n构建完成后，终端会输出如何完成集成操作的提示。\n\n![image](/images/2020/03/native_flutter_01.png)\n\n需要注意的是以下配置是放在最外层位置：\n\n```\nrepositories {\n        maven {\n            url '/Users/apple/FlutterDev/project/ky_flutter/build/host/outputs/repo'\n        }\n        maven {\n            url 'https://storage.googleapis.com/download.flutter.io'\n        }\n      }\n```\n\n应用只配置 debug、pre、release 构建模式，因此在引用的时候，可以这样配置：\n\n```gradle\ndebugImplementation 'com.chicdeals.flutter:flutter_debug:1.0'\npreImplementation 'com.chicdeals.flutter:flutter_profile:1.0'\nreleaseImplementation 'com.chicdeals.flutter:flutter_release:1.0'\n```\n\n> 如果你是使用 Android Studio 开发工具，你也可以直接点击 Android Studio 菜单中的 Build > Flutter > Build AAR 为 Flutter 模块构建 AAR。\n\n![image](/images/2020/03/native_flutter_02.png)\n\n#### 方案 B - 依赖模块的源码\n\n该方式可以使你的 Android 项目和 Flutter 项目能够同步一键式构建。当你需要同时在这两个项目中进行快速迭代时，这种方案非常方便，但是此时，你的团队必须安装 Flutter SDK 才能构建宿主应用程序。\n\n具体实现方式，如有需要请看官方指导文档，在这里我就不做简述了，因为我是使用方案A，没有选择方案 B。\n\n### 参考链接\n\n* [将 Flutter module 集成到 Android 项目](https://flutter.dev/docs/development/add-to-app/android/project-setup)\n","source":"_posts/flutter-native.md","raw":"---\ntitle: Android 原生项目如何引入 Flutter\ndate: 2020-03-05 23:26:26\ntags: [Flutter]\ncategories: Flutter\n---\n\n有两种方式创建，一种使用 Android Studio 创建集成 Flutter 模块，一种通过命令创建手动集成。\n\n最开始使用 Android Studio 创建，但是一直卡在 ``Creating Flutter Project `` 网上查了很多解决方法均无法解决，因此我是通过手动集成的。\n\n### 一、创建 Flutter 模块\n\n打开终端选择自己指定的路径下，通过以下命令创建模块：\n\n```\nflutter create - t module --org com.chicdeals.flutter ky_flutter\n```\n\n创建完之后，打开 ``pubspec.yaml`` 文件拉到最后看到比平常创建的 Flutter 项目多出下面信息：\n\n```\n  # This section identifies your Flutter project as a module meant for\n  # embedding in a native host app.  These identifiers should _not_ ordinarily\n  # be changed after generation - they are used to ensure that the tooling can\n  # maintain consistency when adding or modifying assets and plugins.\n  # They also do not have any bearing on your native host application's\n  # identifiers, which may be completely independent or the same as these.\n  module:\n    androidX: true\n    androidPackage: com.chicdeals.flutter.ky_flutter\n    iosBundleIdentifier: com.chicdeals.flutter.ky_flutter\n```\n\n修改下信息，去掉包名后面的 ``.ky_flutter`` 简短下包名。\n\n### 二、Android 项目引入 Java8\n\n在尝试将 Flutter 模块项目集成到宿主 Android 应用之前，请先确保宿主 Android 应用的 ``build.gradle`` 文件的 ``android { }`` 块中声明了以下源兼容性，例如：\n\n```\nandroid {\n  //...\n  compileOptions {\n    sourceCompatibility 1.8\n    targetCompatibility 1.8\n  }\n}\n```\n\n### 三、将 Flutter module 作为依赖项\n\n#### 方案A - 依赖 AAR\n\n这种方式会将 Flutter 库打包成由 AAR 和 POM artifacts 组成的本地 Maven 存储库。这种方案可以使你的团队不需要安装 Flutter SDK 即可编译宿主应用。\n\n1. 在你的 Flutter 模块路径下，执行如下命令：\n\n```\nflutter build aar\n```\n\n构建完成后，终端会输出如何完成集成操作的提示。\n\n![image](/images/2020/03/native_flutter_01.png)\n\n需要注意的是以下配置是放在最外层位置：\n\n```\nrepositories {\n        maven {\n            url '/Users/apple/FlutterDev/project/ky_flutter/build/host/outputs/repo'\n        }\n        maven {\n            url 'https://storage.googleapis.com/download.flutter.io'\n        }\n      }\n```\n\n应用只配置 debug、pre、release 构建模式，因此在引用的时候，可以这样配置：\n\n```gradle\ndebugImplementation 'com.chicdeals.flutter:flutter_debug:1.0'\npreImplementation 'com.chicdeals.flutter:flutter_profile:1.0'\nreleaseImplementation 'com.chicdeals.flutter:flutter_release:1.0'\n```\n\n> 如果你是使用 Android Studio 开发工具，你也可以直接点击 Android Studio 菜单中的 Build > Flutter > Build AAR 为 Flutter 模块构建 AAR。\n\n![image](/images/2020/03/native_flutter_02.png)\n\n#### 方案 B - 依赖模块的源码\n\n该方式可以使你的 Android 项目和 Flutter 项目能够同步一键式构建。当你需要同时在这两个项目中进行快速迭代时，这种方案非常方便，但是此时，你的团队必须安装 Flutter SDK 才能构建宿主应用程序。\n\n具体实现方式，如有需要请看官方指导文档，在这里我就不做简述了，因为我是使用方案A，没有选择方案 B。\n\n### 参考链接\n\n* [将 Flutter module 集成到 Android 项目](https://flutter.dev/docs/development/add-to-app/android/project-setup)\n","slug":"flutter-native","published":1,"updated":"2020-11-25T15:22:27.866Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cks0kficq0014w3yz4r2lp4rx","content":"<p>有两种方式创建，一种使用 Android Studio 创建集成 Flutter 模块，一种通过命令创建手动集成。</p>\n<p>最开始使用 Android Studio 创建，但是一直卡在 <code>Creating Flutter Project</code> 网上查了很多解决方法均无法解决，因此我是通过手动集成的。</p>\n<h3 id=\"一、创建-Flutter-模块\"><a href=\"#一、创建-Flutter-模块\" class=\"headerlink\" title=\"一、创建 Flutter 模块\"></a>一、创建 Flutter 模块</h3><p>打开终端选择自己指定的路径下，通过以下命令创建模块：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">flutter create - t module --org com.chicdeals.flutter ky_flutter</span><br></pre></td></tr></table></figure>\n\n<p>创建完之后，打开 <code>pubspec.yaml</code> 文件拉到最后看到比平常创建的 Flutter 项目多出下面信息：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># This section identifies your Flutter project as a module meant for</span><br><span class=\"line\"># embedding in a native host app.  These identifiers should _not_ ordinarily</span><br><span class=\"line\"># be changed after generation - they are used to ensure that the tooling can</span><br><span class=\"line\"># maintain consistency when adding or modifying assets and plugins.</span><br><span class=\"line\"># They also do not have any bearing on your native host application&apos;s</span><br><span class=\"line\"># identifiers, which may be completely independent or the same as these.</span><br><span class=\"line\">module:</span><br><span class=\"line\">  androidX: true</span><br><span class=\"line\">  androidPackage: com.chicdeals.flutter.ky_flutter</span><br><span class=\"line\">  iosBundleIdentifier: com.chicdeals.flutter.ky_flutter</span><br></pre></td></tr></table></figure>\n\n<p>修改下信息，去掉包名后面的 <code>.ky_flutter</code> 简短下包名。</p>\n<h3 id=\"二、Android-项目引入-Java8\"><a href=\"#二、Android-项目引入-Java8\" class=\"headerlink\" title=\"二、Android 项目引入 Java8\"></a>二、Android 项目引入 Java8</h3><p>在尝试将 Flutter 模块项目集成到宿主 Android 应用之前，请先确保宿主 Android 应用的 <code>build.gradle</code> 文件的 <code>android { }</code> 块中声明了以下源兼容性，例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">android &#123;</span><br><span class=\"line\">  //...</span><br><span class=\"line\">  compileOptions &#123;</span><br><span class=\"line\">    sourceCompatibility 1.8</span><br><span class=\"line\">    targetCompatibility 1.8</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"三、将-Flutter-module-作为依赖项\"><a href=\"#三、将-Flutter-module-作为依赖项\" class=\"headerlink\" title=\"三、将 Flutter module 作为依赖项\"></a>三、将 Flutter module 作为依赖项</h3><h4 id=\"方案A-依赖-AAR\"><a href=\"#方案A-依赖-AAR\" class=\"headerlink\" title=\"方案A - 依赖 AAR\"></a>方案A - 依赖 AAR</h4><p>这种方式会将 Flutter 库打包成由 AAR 和 POM artifacts 组成的本地 Maven 存储库。这种方案可以使你的团队不需要安装 Flutter SDK 即可编译宿主应用。</p>\n<ol>\n<li>在你的 Flutter 模块路径下，执行如下命令：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">flutter build aar</span><br></pre></td></tr></table></figure>\n\n<p>构建完成后，终端会输出如何完成集成操作的提示。</p>\n<p><img src=\"/images/2020/03/native_flutter_01.png\" alt=\"image\"></p>\n<p>需要注意的是以下配置是放在最外层位置：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">repositories &#123;</span><br><span class=\"line\">        maven &#123;</span><br><span class=\"line\">            url &apos;/Users/apple/FlutterDev/project/ky_flutter/build/host/outputs/repo&apos;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        maven &#123;</span><br><span class=\"line\">            url &apos;https://storage.googleapis.com/download.flutter.io&apos;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br></pre></td></tr></table></figure>\n\n<p>应用只配置 debug、pre、release 构建模式，因此在引用的时候，可以这样配置：</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">debugImplementation <span class=\"string\">'com.chicdeals.flutter:flutter_debug:1.0'</span></span><br><span class=\"line\">preImplementation <span class=\"string\">'com.chicdeals.flutter:flutter_profile:1.0'</span></span><br><span class=\"line\">releaseImplementation <span class=\"string\">'com.chicdeals.flutter:flutter_release:1.0'</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>如果你是使用 Android Studio 开发工具，你也可以直接点击 Android Studio 菜单中的 Build &gt; Flutter &gt; Build AAR 为 Flutter 模块构建 AAR。</p>\n</blockquote>\n<p><img src=\"/images/2020/03/native_flutter_02.png\" alt=\"image\"></p>\n<h4 id=\"方案-B-依赖模块的源码\"><a href=\"#方案-B-依赖模块的源码\" class=\"headerlink\" title=\"方案 B - 依赖模块的源码\"></a>方案 B - 依赖模块的源码</h4><p>该方式可以使你的 Android 项目和 Flutter 项目能够同步一键式构建。当你需要同时在这两个项目中进行快速迭代时，这种方案非常方便，但是此时，你的团队必须安装 Flutter SDK 才能构建宿主应用程序。</p>\n<p>具体实现方式，如有需要请看官方指导文档，在这里我就不做简述了，因为我是使用方案A，没有选择方案 B。</p>\n<h3 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h3><ul>\n<li><a href=\"https://flutter.dev/docs/development/add-to-app/android/project-setup\" target=\"_blank\" rel=\"noopener\">将 Flutter module 集成到 Android 项目</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>有两种方式创建，一种使用 Android Studio 创建集成 Flutter 模块，一种通过命令创建手动集成。</p>\n<p>最开始使用 Android Studio 创建，但是一直卡在 <code>Creating Flutter Project</code> 网上查了很多解决方法均无法解决，因此我是通过手动集成的。</p>\n<h3 id=\"一、创建-Flutter-模块\"><a href=\"#一、创建-Flutter-模块\" class=\"headerlink\" title=\"一、创建 Flutter 模块\"></a>一、创建 Flutter 模块</h3><p>打开终端选择自己指定的路径下，通过以下命令创建模块：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">flutter create - t module --org com.chicdeals.flutter ky_flutter</span><br></pre></td></tr></table></figure>\n\n<p>创建完之后，打开 <code>pubspec.yaml</code> 文件拉到最后看到比平常创建的 Flutter 项目多出下面信息：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># This section identifies your Flutter project as a module meant for</span><br><span class=\"line\"># embedding in a native host app.  These identifiers should _not_ ordinarily</span><br><span class=\"line\"># be changed after generation - they are used to ensure that the tooling can</span><br><span class=\"line\"># maintain consistency when adding or modifying assets and plugins.</span><br><span class=\"line\"># They also do not have any bearing on your native host application&apos;s</span><br><span class=\"line\"># identifiers, which may be completely independent or the same as these.</span><br><span class=\"line\">module:</span><br><span class=\"line\">  androidX: true</span><br><span class=\"line\">  androidPackage: com.chicdeals.flutter.ky_flutter</span><br><span class=\"line\">  iosBundleIdentifier: com.chicdeals.flutter.ky_flutter</span><br></pre></td></tr></table></figure>\n\n<p>修改下信息，去掉包名后面的 <code>.ky_flutter</code> 简短下包名。</p>\n<h3 id=\"二、Android-项目引入-Java8\"><a href=\"#二、Android-项目引入-Java8\" class=\"headerlink\" title=\"二、Android 项目引入 Java8\"></a>二、Android 项目引入 Java8</h3><p>在尝试将 Flutter 模块项目集成到宿主 Android 应用之前，请先确保宿主 Android 应用的 <code>build.gradle</code> 文件的 <code>android { }</code> 块中声明了以下源兼容性，例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">android &#123;</span><br><span class=\"line\">  //...</span><br><span class=\"line\">  compileOptions &#123;</span><br><span class=\"line\">    sourceCompatibility 1.8</span><br><span class=\"line\">    targetCompatibility 1.8</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"三、将-Flutter-module-作为依赖项\"><a href=\"#三、将-Flutter-module-作为依赖项\" class=\"headerlink\" title=\"三、将 Flutter module 作为依赖项\"></a>三、将 Flutter module 作为依赖项</h3><h4 id=\"方案A-依赖-AAR\"><a href=\"#方案A-依赖-AAR\" class=\"headerlink\" title=\"方案A - 依赖 AAR\"></a>方案A - 依赖 AAR</h4><p>这种方式会将 Flutter 库打包成由 AAR 和 POM artifacts 组成的本地 Maven 存储库。这种方案可以使你的团队不需要安装 Flutter SDK 即可编译宿主应用。</p>\n<ol>\n<li>在你的 Flutter 模块路径下，执行如下命令：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">flutter build aar</span><br></pre></td></tr></table></figure>\n\n<p>构建完成后，终端会输出如何完成集成操作的提示。</p>\n<p><img src=\"/images/2020/03/native_flutter_01.png\" alt=\"image\"></p>\n<p>需要注意的是以下配置是放在最外层位置：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">repositories &#123;</span><br><span class=\"line\">        maven &#123;</span><br><span class=\"line\">            url &apos;/Users/apple/FlutterDev/project/ky_flutter/build/host/outputs/repo&apos;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        maven &#123;</span><br><span class=\"line\">            url &apos;https://storage.googleapis.com/download.flutter.io&apos;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br></pre></td></tr></table></figure>\n\n<p>应用只配置 debug、pre、release 构建模式，因此在引用的时候，可以这样配置：</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">debugImplementation <span class=\"string\">'com.chicdeals.flutter:flutter_debug:1.0'</span></span><br><span class=\"line\">preImplementation <span class=\"string\">'com.chicdeals.flutter:flutter_profile:1.0'</span></span><br><span class=\"line\">releaseImplementation <span class=\"string\">'com.chicdeals.flutter:flutter_release:1.0'</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>如果你是使用 Android Studio 开发工具，你也可以直接点击 Android Studio 菜单中的 Build &gt; Flutter &gt; Build AAR 为 Flutter 模块构建 AAR。</p>\n</blockquote>\n<p><img src=\"/images/2020/03/native_flutter_02.png\" alt=\"image\"></p>\n<h4 id=\"方案-B-依赖模块的源码\"><a href=\"#方案-B-依赖模块的源码\" class=\"headerlink\" title=\"方案 B - 依赖模块的源码\"></a>方案 B - 依赖模块的源码</h4><p>该方式可以使你的 Android 项目和 Flutter 项目能够同步一键式构建。当你需要同时在这两个项目中进行快速迭代时，这种方案非常方便，但是此时，你的团队必须安装 Flutter SDK 才能构建宿主应用程序。</p>\n<p>具体实现方式，如有需要请看官方指导文档，在这里我就不做简述了，因为我是使用方案A，没有选择方案 B。</p>\n<h3 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h3><ul>\n<li><a href=\"https://flutter.dev/docs/development/add-to-app/android/project-setup\" target=\"_blank\" rel=\"noopener\">将 Flutter module 集成到 Android 项目</a></li>\n</ul>\n"},{"title":"常用 Git 相关命令清单","date":"2016-12-31T16:07:52.000Z","_content":"\n\n### Git\n\n1. `git config --global user.name \"Your Name\"` (安装完 git 后，设置用户名与邮箱)\n\n2. `git config --global user.email \"Your email\"` (设置邮箱)\n\n3. `ssh-keygen -t rsa -C \"youremail@example.com\"` (创建 SSH key)\n\n4. `ssh-agent -s` (查看 ssh 是否启用)\n\n5. `ssh -T git@github.com` (验证)\n\n6. `git init` (初始化一个本地仓库)\n\n7. `git add . `(将所有文件加入到跟踪列表)\n\n8. `git commit -m \"write something title\"` (提交到本地仓库)\n\n9. `git status` (查看 git 文件哪处发生改动)\n\n10. `git remote add origin git@github.com:github账户名/github创建的库.git` (将本地仓库关联到 github 上远程仓库)\n\n11. `git push -u origin master` (将本地仓库的所有内容推送到远程库上，下一次推送时直接 git push)\n\n12. `git clone URL` (克隆远程仓库)\n\n13. `git branch` (查看当前分支)\n\n15. `git checkout -- filename` (文件恢复到最新版本，但丢失最近一次提交后你修改的内容)\n\n16. `git checkout name` (切换分支，name 为分支名称)\n\n17. `git reset --hard commitNumber` (回滚到某个 commit 不保存之前改动过的内容文件)\n\n18. `git push --force` (上条命令回滚之后的变更强行推送至服务器)\n\n19. `git tag` (查看本地 tag 列表)\n\n20. `git tag -d tagName` (删除本地 tag)\n\n21. `git push origin --tags` (将本地 tag 提交到远程)\n\n### Git-Flow\n\n1. `git flow init` (初始化)\n\n2. `git flow feature start MYFEATURE` (开始新 Feature)\n\n3. `git flow feature publish MYFEATURE` (Publish 一个 Feature (也就是 push 到远程))\n\n4. `git flow feature pull origin MYFEATURE` (获取 Publish 的 Feature)\n\n5. `git flow feature finish MYFEATURE` (完成一个 Feature)\n\n6. `git flow release start RELEASE [BASE]` (开始一个 Release)\n\n7. `git flow release publish RELEASE` (Publish 一个 Release)\n\n8. `git flow release finish RELEASE ` (发布 Release)\n\n9. `git push --tags` (发布 Release 后进行，push 到远程)\n\n10. `git flow hotfix start VERSION [BASENAME]` (开始一个 Hotfix)\n\n11. `git flow hotfix finish VERSION` (发布一个 Hotfix)\n\n\n### Git-Submodule\n\n1. `git submodule add git@github.com:github账户名/github创建的库.git` (在已存在 git 仓库添加子仓库)\n\n2. `git submodule init` (初始化 Submodule)\n\n3. `git submodule update` (更新 Submodule)\n\n### vim\n\n1. `vim filename` (打开编辑文件)\n\n2. 按一下 `i` 键 (进行编辑文件)\n\n3. 按一下 `Esc` 键 (退出 `i` (插入)命令进行其它命令使用)\n\n4. `:wq` (保存文件并退出)\n\n5. `:q!` (强制退出,不保存)\n\n6. `:w filename` (将文件以指定的文件名 filename 保存)\n\n### Git-Flow 规范理解与延伸\n\n![](/images/2017/01/03-1.png)\n\n### Git Commit 规范\n\n为了更加方便查找 git commit 的日志，因此有必要在 commit 的时候进行备注说明类型  \n\n参考阮老师的文章：[地址](http://www.ruanyifeng.com/blog/2016/01/commit_message_change_log.html)\n\n与团队成员约定在 commit 填写 message 的时候，在前面加多一个 type，具体的类型如下：\n\n类型 | 描述\n----|----\nfeat | 新功能（Feature）\nfix | 修补 bug\nstyle | 界面样式变动（不影响原有业务代码逻辑）\nbuild | Gradle 构建的变动，例如第三方库版本号变动\n\n> 例子：feat: 完成登录注册功能\n\n### 参考链接\n\n* [常用 Git 命令清单](http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html)\n* [git-flow流程规范](https://www.zybuluo.com/Roy270490837/note/835720)\n* [Git 工具 - 子模块](https://git-scm.com/book/zh/v2/Git-%E5%B7%A5%E5%85%B7-%E5%AD%90%E6%A8%A1%E5%9D%97)\n* [Git submodule的坑](http://blog.devtang.com/2013/05/08/git-submodule-issues/)\n\n","source":"_posts/git-command.md","raw":"---\ntitle: 常用 Git 相关命令清单\ndate: 2017-01-01 00:07:52\ntags: [Git]\ncategories: Git\n---\n\n\n### Git\n\n1. `git config --global user.name \"Your Name\"` (安装完 git 后，设置用户名与邮箱)\n\n2. `git config --global user.email \"Your email\"` (设置邮箱)\n\n3. `ssh-keygen -t rsa -C \"youremail@example.com\"` (创建 SSH key)\n\n4. `ssh-agent -s` (查看 ssh 是否启用)\n\n5. `ssh -T git@github.com` (验证)\n\n6. `git init` (初始化一个本地仓库)\n\n7. `git add . `(将所有文件加入到跟踪列表)\n\n8. `git commit -m \"write something title\"` (提交到本地仓库)\n\n9. `git status` (查看 git 文件哪处发生改动)\n\n10. `git remote add origin git@github.com:github账户名/github创建的库.git` (将本地仓库关联到 github 上远程仓库)\n\n11. `git push -u origin master` (将本地仓库的所有内容推送到远程库上，下一次推送时直接 git push)\n\n12. `git clone URL` (克隆远程仓库)\n\n13. `git branch` (查看当前分支)\n\n15. `git checkout -- filename` (文件恢复到最新版本，但丢失最近一次提交后你修改的内容)\n\n16. `git checkout name` (切换分支，name 为分支名称)\n\n17. `git reset --hard commitNumber` (回滚到某个 commit 不保存之前改动过的内容文件)\n\n18. `git push --force` (上条命令回滚之后的变更强行推送至服务器)\n\n19. `git tag` (查看本地 tag 列表)\n\n20. `git tag -d tagName` (删除本地 tag)\n\n21. `git push origin --tags` (将本地 tag 提交到远程)\n\n### Git-Flow\n\n1. `git flow init` (初始化)\n\n2. `git flow feature start MYFEATURE` (开始新 Feature)\n\n3. `git flow feature publish MYFEATURE` (Publish 一个 Feature (也就是 push 到远程))\n\n4. `git flow feature pull origin MYFEATURE` (获取 Publish 的 Feature)\n\n5. `git flow feature finish MYFEATURE` (完成一个 Feature)\n\n6. `git flow release start RELEASE [BASE]` (开始一个 Release)\n\n7. `git flow release publish RELEASE` (Publish 一个 Release)\n\n8. `git flow release finish RELEASE ` (发布 Release)\n\n9. `git push --tags` (发布 Release 后进行，push 到远程)\n\n10. `git flow hotfix start VERSION [BASENAME]` (开始一个 Hotfix)\n\n11. `git flow hotfix finish VERSION` (发布一个 Hotfix)\n\n\n### Git-Submodule\n\n1. `git submodule add git@github.com:github账户名/github创建的库.git` (在已存在 git 仓库添加子仓库)\n\n2. `git submodule init` (初始化 Submodule)\n\n3. `git submodule update` (更新 Submodule)\n\n### vim\n\n1. `vim filename` (打开编辑文件)\n\n2. 按一下 `i` 键 (进行编辑文件)\n\n3. 按一下 `Esc` 键 (退出 `i` (插入)命令进行其它命令使用)\n\n4. `:wq` (保存文件并退出)\n\n5. `:q!` (强制退出,不保存)\n\n6. `:w filename` (将文件以指定的文件名 filename 保存)\n\n### Git-Flow 规范理解与延伸\n\n![](/images/2017/01/03-1.png)\n\n### Git Commit 规范\n\n为了更加方便查找 git commit 的日志，因此有必要在 commit 的时候进行备注说明类型  \n\n参考阮老师的文章：[地址](http://www.ruanyifeng.com/blog/2016/01/commit_message_change_log.html)\n\n与团队成员约定在 commit 填写 message 的时候，在前面加多一个 type，具体的类型如下：\n\n类型 | 描述\n----|----\nfeat | 新功能（Feature）\nfix | 修补 bug\nstyle | 界面样式变动（不影响原有业务代码逻辑）\nbuild | Gradle 构建的变动，例如第三方库版本号变动\n\n> 例子：feat: 完成登录注册功能\n\n### 参考链接\n\n* [常用 Git 命令清单](http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html)\n* [git-flow流程规范](https://www.zybuluo.com/Roy270490837/note/835720)\n* [Git 工具 - 子模块](https://git-scm.com/book/zh/v2/Git-%E5%B7%A5%E5%85%B7-%E5%AD%90%E6%A8%A1%E5%9D%97)\n* [Git submodule的坑](http://blog.devtang.com/2013/05/08/git-submodule-issues/)\n\n","slug":"git-command","published":1,"updated":"2019-06-12T16:59:23.855Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cks0kficr0019w3yzkpin4rwc","content":"<h3 id=\"Git\"><a href=\"#Git\" class=\"headerlink\" title=\"Git\"></a>Git</h3><ol>\n<li><p><code>git config --global user.name &quot;Your Name&quot;</code> (安装完 git 后，设置用户名与邮箱)</p>\n</li>\n<li><p><code>git config --global user.email &quot;Your email&quot;</code> (设置邮箱)</p>\n</li>\n<li><p><code>ssh-keygen -t rsa -C &quot;youremail@example.com&quot;</code> (创建 SSH key)</p>\n</li>\n<li><p><code>ssh-agent -s</code> (查看 ssh 是否启用)</p>\n</li>\n<li><p><code>ssh -T git@github.com</code> (验证)</p>\n</li>\n<li><p><code>git init</code> (初始化一个本地仓库)</p>\n</li>\n<li><p><code>git add .</code>(将所有文件加入到跟踪列表)</p>\n</li>\n<li><p><code>git commit -m &quot;write something title&quot;</code> (提交到本地仓库)</p>\n</li>\n<li><p><code>git status</code> (查看 git 文件哪处发生改动)</p>\n</li>\n<li><p><code>git remote add origin git@github.com:github账户名/github创建的库.git</code> (将本地仓库关联到 github 上远程仓库)</p>\n</li>\n<li><p><code>git push -u origin master</code> (将本地仓库的所有内容推送到远程库上，下一次推送时直接 git push)</p>\n</li>\n<li><p><code>git clone URL</code> (克隆远程仓库)</p>\n</li>\n<li><p><code>git branch</code> (查看当前分支)</p>\n</li>\n<li><p><code>git checkout -- filename</code> (文件恢复到最新版本，但丢失最近一次提交后你修改的内容)</p>\n</li>\n<li><p><code>git checkout name</code> (切换分支，name 为分支名称)</p>\n</li>\n<li><p><code>git reset --hard commitNumber</code> (回滚到某个 commit 不保存之前改动过的内容文件)</p>\n</li>\n<li><p><code>git push --force</code> (上条命令回滚之后的变更强行推送至服务器)</p>\n</li>\n<li><p><code>git tag</code> (查看本地 tag 列表)</p>\n</li>\n<li><p><code>git tag -d tagName</code> (删除本地 tag)</p>\n</li>\n<li><p><code>git push origin --tags</code> (将本地 tag 提交到远程)</p>\n</li>\n</ol>\n<h3 id=\"Git-Flow\"><a href=\"#Git-Flow\" class=\"headerlink\" title=\"Git-Flow\"></a>Git-Flow</h3><ol>\n<li><p><code>git flow init</code> (初始化)</p>\n</li>\n<li><p><code>git flow feature start MYFEATURE</code> (开始新 Feature)</p>\n</li>\n<li><p><code>git flow feature publish MYFEATURE</code> (Publish 一个 Feature (也就是 push 到远程))</p>\n</li>\n<li><p><code>git flow feature pull origin MYFEATURE</code> (获取 Publish 的 Feature)</p>\n</li>\n<li><p><code>git flow feature finish MYFEATURE</code> (完成一个 Feature)</p>\n</li>\n<li><p><code>git flow release start RELEASE [BASE]</code> (开始一个 Release)</p>\n</li>\n<li><p><code>git flow release publish RELEASE</code> (Publish 一个 Release)</p>\n</li>\n<li><p><code>git flow release finish RELEASE</code> (发布 Release)</p>\n</li>\n<li><p><code>git push --tags</code> (发布 Release 后进行，push 到远程)</p>\n</li>\n<li><p><code>git flow hotfix start VERSION [BASENAME]</code> (开始一个 Hotfix)</p>\n</li>\n<li><p><code>git flow hotfix finish VERSION</code> (发布一个 Hotfix)</p>\n</li>\n</ol>\n<h3 id=\"Git-Submodule\"><a href=\"#Git-Submodule\" class=\"headerlink\" title=\"Git-Submodule\"></a>Git-Submodule</h3><ol>\n<li><p><code>git submodule add git@github.com:github账户名/github创建的库.git</code> (在已存在 git 仓库添加子仓库)</p>\n</li>\n<li><p><code>git submodule init</code> (初始化 Submodule)</p>\n</li>\n<li><p><code>git submodule update</code> (更新 Submodule)</p>\n</li>\n</ol>\n<h3 id=\"vim\"><a href=\"#vim\" class=\"headerlink\" title=\"vim\"></a>vim</h3><ol>\n<li><p><code>vim filename</code> (打开编辑文件)</p>\n</li>\n<li><p>按一下 <code>i</code> 键 (进行编辑文件)</p>\n</li>\n<li><p>按一下 <code>Esc</code> 键 (退出 <code>i</code> (插入)命令进行其它命令使用)</p>\n</li>\n<li><p><code>:wq</code> (保存文件并退出)</p>\n</li>\n<li><p><code>:q!</code> (强制退出,不保存)</p>\n</li>\n<li><p><code>:w filename</code> (将文件以指定的文件名 filename 保存)</p>\n</li>\n</ol>\n<h3 id=\"Git-Flow-规范理解与延伸\"><a href=\"#Git-Flow-规范理解与延伸\" class=\"headerlink\" title=\"Git-Flow 规范理解与延伸\"></a>Git-Flow 规范理解与延伸</h3><p><img src=\"/images/2017/01/03-1.png\" alt></p>\n<h3 id=\"Git-Commit-规范\"><a href=\"#Git-Commit-规范\" class=\"headerlink\" title=\"Git Commit 规范\"></a>Git Commit 规范</h3><p>为了更加方便查找 git commit 的日志，因此有必要在 commit 的时候进行备注说明类型  </p>\n<p>参考阮老师的文章：<a href=\"http://www.ruanyifeng.com/blog/2016/01/commit_message_change_log.html\" target=\"_blank\" rel=\"noopener\">地址</a></p>\n<p>与团队成员约定在 commit 填写 message 的时候，在前面加多一个 type，具体的类型如下：</p>\n<table>\n<thead>\n<tr>\n<th>类型</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>feat</td>\n<td>新功能（Feature）</td>\n</tr>\n<tr>\n<td>fix</td>\n<td>修补 bug</td>\n</tr>\n<tr>\n<td>style</td>\n<td>界面样式变动（不影响原有业务代码逻辑）</td>\n</tr>\n<tr>\n<td>build</td>\n<td>Gradle 构建的变动，例如第三方库版本号变动</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>例子：feat: 完成登录注册功能</p>\n</blockquote>\n<h3 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h3><ul>\n<li><a href=\"http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html\" target=\"_blank\" rel=\"noopener\">常用 Git 命令清单</a></li>\n<li><a href=\"https://www.zybuluo.com/Roy270490837/note/835720\" target=\"_blank\" rel=\"noopener\">git-flow流程规范</a></li>\n<li><a href=\"https://git-scm.com/book/zh/v2/Git-%E5%B7%A5%E5%85%B7-%E5%AD%90%E6%A8%A1%E5%9D%97\" target=\"_blank\" rel=\"noopener\">Git 工具 - 子模块</a></li>\n<li><a href=\"http://blog.devtang.com/2013/05/08/git-submodule-issues/\" target=\"_blank\" rel=\"noopener\">Git submodule的坑</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"Git\"><a href=\"#Git\" class=\"headerlink\" title=\"Git\"></a>Git</h3><ol>\n<li><p><code>git config --global user.name &quot;Your Name&quot;</code> (安装完 git 后，设置用户名与邮箱)</p>\n</li>\n<li><p><code>git config --global user.email &quot;Your email&quot;</code> (设置邮箱)</p>\n</li>\n<li><p><code>ssh-keygen -t rsa -C &quot;youremail@example.com&quot;</code> (创建 SSH key)</p>\n</li>\n<li><p><code>ssh-agent -s</code> (查看 ssh 是否启用)</p>\n</li>\n<li><p><code>ssh -T git@github.com</code> (验证)</p>\n</li>\n<li><p><code>git init</code> (初始化一个本地仓库)</p>\n</li>\n<li><p><code>git add .</code>(将所有文件加入到跟踪列表)</p>\n</li>\n<li><p><code>git commit -m &quot;write something title&quot;</code> (提交到本地仓库)</p>\n</li>\n<li><p><code>git status</code> (查看 git 文件哪处发生改动)</p>\n</li>\n<li><p><code>git remote add origin git@github.com:github账户名/github创建的库.git</code> (将本地仓库关联到 github 上远程仓库)</p>\n</li>\n<li><p><code>git push -u origin master</code> (将本地仓库的所有内容推送到远程库上，下一次推送时直接 git push)</p>\n</li>\n<li><p><code>git clone URL</code> (克隆远程仓库)</p>\n</li>\n<li><p><code>git branch</code> (查看当前分支)</p>\n</li>\n<li><p><code>git checkout -- filename</code> (文件恢复到最新版本，但丢失最近一次提交后你修改的内容)</p>\n</li>\n<li><p><code>git checkout name</code> (切换分支，name 为分支名称)</p>\n</li>\n<li><p><code>git reset --hard commitNumber</code> (回滚到某个 commit 不保存之前改动过的内容文件)</p>\n</li>\n<li><p><code>git push --force</code> (上条命令回滚之后的变更强行推送至服务器)</p>\n</li>\n<li><p><code>git tag</code> (查看本地 tag 列表)</p>\n</li>\n<li><p><code>git tag -d tagName</code> (删除本地 tag)</p>\n</li>\n<li><p><code>git push origin --tags</code> (将本地 tag 提交到远程)</p>\n</li>\n</ol>\n<h3 id=\"Git-Flow\"><a href=\"#Git-Flow\" class=\"headerlink\" title=\"Git-Flow\"></a>Git-Flow</h3><ol>\n<li><p><code>git flow init</code> (初始化)</p>\n</li>\n<li><p><code>git flow feature start MYFEATURE</code> (开始新 Feature)</p>\n</li>\n<li><p><code>git flow feature publish MYFEATURE</code> (Publish 一个 Feature (也就是 push 到远程))</p>\n</li>\n<li><p><code>git flow feature pull origin MYFEATURE</code> (获取 Publish 的 Feature)</p>\n</li>\n<li><p><code>git flow feature finish MYFEATURE</code> (完成一个 Feature)</p>\n</li>\n<li><p><code>git flow release start RELEASE [BASE]</code> (开始一个 Release)</p>\n</li>\n<li><p><code>git flow release publish RELEASE</code> (Publish 一个 Release)</p>\n</li>\n<li><p><code>git flow release finish RELEASE</code> (发布 Release)</p>\n</li>\n<li><p><code>git push --tags</code> (发布 Release 后进行，push 到远程)</p>\n</li>\n<li><p><code>git flow hotfix start VERSION [BASENAME]</code> (开始一个 Hotfix)</p>\n</li>\n<li><p><code>git flow hotfix finish VERSION</code> (发布一个 Hotfix)</p>\n</li>\n</ol>\n<h3 id=\"Git-Submodule\"><a href=\"#Git-Submodule\" class=\"headerlink\" title=\"Git-Submodule\"></a>Git-Submodule</h3><ol>\n<li><p><code>git submodule add git@github.com:github账户名/github创建的库.git</code> (在已存在 git 仓库添加子仓库)</p>\n</li>\n<li><p><code>git submodule init</code> (初始化 Submodule)</p>\n</li>\n<li><p><code>git submodule update</code> (更新 Submodule)</p>\n</li>\n</ol>\n<h3 id=\"vim\"><a href=\"#vim\" class=\"headerlink\" title=\"vim\"></a>vim</h3><ol>\n<li><p><code>vim filename</code> (打开编辑文件)</p>\n</li>\n<li><p>按一下 <code>i</code> 键 (进行编辑文件)</p>\n</li>\n<li><p>按一下 <code>Esc</code> 键 (退出 <code>i</code> (插入)命令进行其它命令使用)</p>\n</li>\n<li><p><code>:wq</code> (保存文件并退出)</p>\n</li>\n<li><p><code>:q!</code> (强制退出,不保存)</p>\n</li>\n<li><p><code>:w filename</code> (将文件以指定的文件名 filename 保存)</p>\n</li>\n</ol>\n<h3 id=\"Git-Flow-规范理解与延伸\"><a href=\"#Git-Flow-规范理解与延伸\" class=\"headerlink\" title=\"Git-Flow 规范理解与延伸\"></a>Git-Flow 规范理解与延伸</h3><p><img src=\"/images/2017/01/03-1.png\" alt></p>\n<h3 id=\"Git-Commit-规范\"><a href=\"#Git-Commit-规范\" class=\"headerlink\" title=\"Git Commit 规范\"></a>Git Commit 规范</h3><p>为了更加方便查找 git commit 的日志，因此有必要在 commit 的时候进行备注说明类型  </p>\n<p>参考阮老师的文章：<a href=\"http://www.ruanyifeng.com/blog/2016/01/commit_message_change_log.html\" target=\"_blank\" rel=\"noopener\">地址</a></p>\n<p>与团队成员约定在 commit 填写 message 的时候，在前面加多一个 type，具体的类型如下：</p>\n<table>\n<thead>\n<tr>\n<th>类型</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>feat</td>\n<td>新功能（Feature）</td>\n</tr>\n<tr>\n<td>fix</td>\n<td>修补 bug</td>\n</tr>\n<tr>\n<td>style</td>\n<td>界面样式变动（不影响原有业务代码逻辑）</td>\n</tr>\n<tr>\n<td>build</td>\n<td>Gradle 构建的变动，例如第三方库版本号变动</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>例子：feat: 完成登录注册功能</p>\n</blockquote>\n<h3 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h3><ul>\n<li><a href=\"http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html\" target=\"_blank\" rel=\"noopener\">常用 Git 命令清单</a></li>\n<li><a href=\"https://www.zybuluo.com/Roy270490837/note/835720\" target=\"_blank\" rel=\"noopener\">git-flow流程规范</a></li>\n<li><a href=\"https://git-scm.com/book/zh/v2/Git-%E5%B7%A5%E5%85%B7-%E5%AD%90%E6%A8%A1%E5%9D%97\" target=\"_blank\" rel=\"noopener\">Git 工具 - 子模块</a></li>\n<li><a href=\"http://blog.devtang.com/2013/05/08/git-submodule-issues/\" target=\"_blank\" rel=\"noopener\">Git submodule的坑</a></li>\n</ul>\n"},{"title":"如何利用 Google Cloud 搭建 VPS","date":"2018-06-05T16:25:23.000Z","_content":"\n### Google Cloud 官网\n\nhttps://cloud.google.com/\n\n### 活动\n\n现在申请 Google Cloud 赠送免费使用 300美元一年的有效期，使⽤用最低配的话，可以玩一年，每个⽉有 86G 的流量，个人使⽤足够了吧......\n\n### 准备\n\n- 一张 VISA信⽤用卡\n- Google 账户\n- 由于 Google 在中国是不存在的，所以先要有代理\n- 下载 ShadowsocksX-NG，[地址](https://github.com/shadowsocks/ShadowsocksX-NG)\n\n### 开始申请\n\n首先需要登录你的 Google 账号，如果没有的话，自己去创建一个，这就不多说了，登录成功之后，进入到 Google Cloud [官网](https://cloud.google.com/)\n\n此时你会看到右上角有个 免费试用 的入口，点击进去\n\n![](/images/2018/06/01-01.png)\n\n进去之后选择国家为 美国，为什么不选中国呢？因为没有中国可选；同意并继续\n\n![](/images/2018/06/01-2.png)\n\n接下来就是下面的界面了，账号选择个人，填写好注册信息，个人信息地址可以虚拟一个美国身份，推荐随机生成美国身份网站 [地址](http://www.haoweichi.com/Index/random)；\n\n填写你的一张 VISA 信用卡，信用卡会扣除 1 美元，这不用担心只是验证你这张信用卡是否可用，过一会就会退还给你\n\n![](/images/2018/06/01-3.png)\n\n信息填完后，点击开始免费试用，至此你已成功创建了 Google cloud 账号，并且获得免费赠送的 300 美元\n\n### 开始部署\n\n**1. 创建一个项目**\n\n完成上面步骤之后，进入到大概下面的界面，点击箭头位置开始创建一个项目\n\n![](/images/2018/06/01-4.png)\n\n进入到这个界面，项目名称随便你起，位置不用关，直接点创建\n\n![](/images/2018/06/01-5.png)\n\n**2. 设定防火墙**\n\n入口：菜单依次点击【网络】--【防火墙规则】--【创建防火墙规则】\n\n![](/images/2018/06/01-6.png)\n\n先来看下我的配置\n\n![](/images/2018/06/01-7.png)\n\n主要修改点：\n\n- 流量方向：入站  \n- 对匹配项执行的操作：允许  \n- 目标：网络中所有实例  \n- 来源IP地址范围：0.0.0.0/0  \n- 协议和端口：全部允许  \n- 其他默认即可\n\n**3. 申请静态IP**\n\n这个步骤可有可⽆，如果是拿来做 SS 服务器，最好还是申请一个，不然的话每次重启ip地址都会变化，客户端又得重新配置了\n\n菜单依次点击【网络】--【外部IP地址】--【保留静态IP】\n\n![](/images/2018/06/01-8.png)\n\n据说区域选择亚洲东部，国内访问会比较快，这个我不知道没有验证，反正我选择了美国\n\n> 注意：静态 IP 只能申请一个\n\n### 创建计算引擎\n\n菜单一次点击【计算】--【Compute Engine】--【VM 实例】\n\n![](/images/2018/06/01-9.png)\n\n![](/images/2018/06/01-10.png)\n\n![](/images/2018/06/01-11.png)\n\n主要修改点：\n\n- 机器类型：微型(一个共享 vCPU) （右边会有每个月的金额估算值，根据需要吧，选这个是5美元/月，能用一年！）\n- 选择启动磁盘（系统），我选择的是 Debian\n- 访问权限范围：允许默认访问权限\n-（打开管理、磁盘、网络、ssh 密钥选项）选择【网络】\n网络--外部IP选择临时\n\n至此，Google cloud 服务器已经配置完成，可以像正常使用 VPS 一样操作了。\n\n### 搭建 SS\n\n使用 Google Cloud 自带的浏览器 SSH，推荐使用！\n\n![](/images/2018/06/01-12.png)\n\n1. 先输入 ``sudo -i`` 命令进入到 root 账户\n2. 搭建 Shadow-socks，推荐秋水的一键go版本，输入下面命令\n\n```\nwget --no-check-certificate https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks-go.sh\nchmod +x shadowsocks-go.sh\n./shadowsocks-go.sh 2>&1 | tee shadowsocks-go.log\n```\n\n输入命令后，一路回车 Enter 就 Ok，当然这个过程你可以自己定义 端口、密码、加密方式这些信息，执行完之后就会得到如下面信息\n\n![](/images/2018/06/01-13.png)\n\n> 该代理已经失效~~\n\n### SS 服务相关命令\n\nShadowsocks-Go 版（install | uninstall | start | stop | restart | status）\n\n```\n# 使用 root 用户登录，运行安装以及卸载的命令：\n# 进入 root 用户\nsudo -i\n# 安装\n./shadowsocks-go.sh install\n# 卸载\n./shadowsocks-go.sh uninstall\n\n# 安装完成后\n# 重启\n/etc/init.d/shadowsocks restart\n# 停止\n/etc/init.d/shadowsocks stop\n# 启动\n/etc/init.d/shadowsocks start\n# 查看运行状态\n/etc/init.d/shadowsocks status\n\n# 查看配置信息\nvim /etc/shadowsocks/config.json\n\n```\n\n\n### 参考链接\n\n- [Google Cloud服务免费申请试用以及使用教程](https://51.ruyo.net/2144.html)\n- [用Google Cloud搭建免费一年的SS](https://www.jianshu.com/p/6bd66829a1ce)\n- [Shadowsocks-go一键安装脚本](https://teddysun.com/392.html)\n\n\n\n\n\n","source":"_posts/google-clound.md","raw":"---\ntitle: 如何利用 Google Cloud 搭建 VPS\ndate: 2018-06-06 00:25:23\ntags: [翻墙,Google Cloud,VPN]\ncategories: VPN\n---\n\n### Google Cloud 官网\n\nhttps://cloud.google.com/\n\n### 活动\n\n现在申请 Google Cloud 赠送免费使用 300美元一年的有效期，使⽤用最低配的话，可以玩一年，每个⽉有 86G 的流量，个人使⽤足够了吧......\n\n### 准备\n\n- 一张 VISA信⽤用卡\n- Google 账户\n- 由于 Google 在中国是不存在的，所以先要有代理\n- 下载 ShadowsocksX-NG，[地址](https://github.com/shadowsocks/ShadowsocksX-NG)\n\n### 开始申请\n\n首先需要登录你的 Google 账号，如果没有的话，自己去创建一个，这就不多说了，登录成功之后，进入到 Google Cloud [官网](https://cloud.google.com/)\n\n此时你会看到右上角有个 免费试用 的入口，点击进去\n\n![](/images/2018/06/01-01.png)\n\n进去之后选择国家为 美国，为什么不选中国呢？因为没有中国可选；同意并继续\n\n![](/images/2018/06/01-2.png)\n\n接下来就是下面的界面了，账号选择个人，填写好注册信息，个人信息地址可以虚拟一个美国身份，推荐随机生成美国身份网站 [地址](http://www.haoweichi.com/Index/random)；\n\n填写你的一张 VISA 信用卡，信用卡会扣除 1 美元，这不用担心只是验证你这张信用卡是否可用，过一会就会退还给你\n\n![](/images/2018/06/01-3.png)\n\n信息填完后，点击开始免费试用，至此你已成功创建了 Google cloud 账号，并且获得免费赠送的 300 美元\n\n### 开始部署\n\n**1. 创建一个项目**\n\n完成上面步骤之后，进入到大概下面的界面，点击箭头位置开始创建一个项目\n\n![](/images/2018/06/01-4.png)\n\n进入到这个界面，项目名称随便你起，位置不用关，直接点创建\n\n![](/images/2018/06/01-5.png)\n\n**2. 设定防火墙**\n\n入口：菜单依次点击【网络】--【防火墙规则】--【创建防火墙规则】\n\n![](/images/2018/06/01-6.png)\n\n先来看下我的配置\n\n![](/images/2018/06/01-7.png)\n\n主要修改点：\n\n- 流量方向：入站  \n- 对匹配项执行的操作：允许  \n- 目标：网络中所有实例  \n- 来源IP地址范围：0.0.0.0/0  \n- 协议和端口：全部允许  \n- 其他默认即可\n\n**3. 申请静态IP**\n\n这个步骤可有可⽆，如果是拿来做 SS 服务器，最好还是申请一个，不然的话每次重启ip地址都会变化，客户端又得重新配置了\n\n菜单依次点击【网络】--【外部IP地址】--【保留静态IP】\n\n![](/images/2018/06/01-8.png)\n\n据说区域选择亚洲东部，国内访问会比较快，这个我不知道没有验证，反正我选择了美国\n\n> 注意：静态 IP 只能申请一个\n\n### 创建计算引擎\n\n菜单一次点击【计算】--【Compute Engine】--【VM 实例】\n\n![](/images/2018/06/01-9.png)\n\n![](/images/2018/06/01-10.png)\n\n![](/images/2018/06/01-11.png)\n\n主要修改点：\n\n- 机器类型：微型(一个共享 vCPU) （右边会有每个月的金额估算值，根据需要吧，选这个是5美元/月，能用一年！）\n- 选择启动磁盘（系统），我选择的是 Debian\n- 访问权限范围：允许默认访问权限\n-（打开管理、磁盘、网络、ssh 密钥选项）选择【网络】\n网络--外部IP选择临时\n\n至此，Google cloud 服务器已经配置完成，可以像正常使用 VPS 一样操作了。\n\n### 搭建 SS\n\n使用 Google Cloud 自带的浏览器 SSH，推荐使用！\n\n![](/images/2018/06/01-12.png)\n\n1. 先输入 ``sudo -i`` 命令进入到 root 账户\n2. 搭建 Shadow-socks，推荐秋水的一键go版本，输入下面命令\n\n```\nwget --no-check-certificate https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks-go.sh\nchmod +x shadowsocks-go.sh\n./shadowsocks-go.sh 2>&1 | tee shadowsocks-go.log\n```\n\n输入命令后，一路回车 Enter 就 Ok，当然这个过程你可以自己定义 端口、密码、加密方式这些信息，执行完之后就会得到如下面信息\n\n![](/images/2018/06/01-13.png)\n\n> 该代理已经失效~~\n\n### SS 服务相关命令\n\nShadowsocks-Go 版（install | uninstall | start | stop | restart | status）\n\n```\n# 使用 root 用户登录，运行安装以及卸载的命令：\n# 进入 root 用户\nsudo -i\n# 安装\n./shadowsocks-go.sh install\n# 卸载\n./shadowsocks-go.sh uninstall\n\n# 安装完成后\n# 重启\n/etc/init.d/shadowsocks restart\n# 停止\n/etc/init.d/shadowsocks stop\n# 启动\n/etc/init.d/shadowsocks start\n# 查看运行状态\n/etc/init.d/shadowsocks status\n\n# 查看配置信息\nvim /etc/shadowsocks/config.json\n\n```\n\n\n### 参考链接\n\n- [Google Cloud服务免费申请试用以及使用教程](https://51.ruyo.net/2144.html)\n- [用Google Cloud搭建免费一年的SS](https://www.jianshu.com/p/6bd66829a1ce)\n- [Shadowsocks-go一键安装脚本](https://teddysun.com/392.html)\n\n\n\n\n\n","slug":"google-clound","published":1,"updated":"2019-06-12T16:51:50.735Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cks0kfics001bw3yzxpfzo8sd","content":"<h3 id=\"Google-Cloud-官网\"><a href=\"#Google-Cloud-官网\" class=\"headerlink\" title=\"Google Cloud 官网\"></a>Google Cloud 官网</h3><p><a href=\"https://cloud.google.com/\" target=\"_blank\" rel=\"noopener\">https://cloud.google.com/</a></p>\n<h3 id=\"活动\"><a href=\"#活动\" class=\"headerlink\" title=\"活动\"></a>活动</h3><p>现在申请 Google Cloud 赠送免费使用 300美元一年的有效期，使⽤用最低配的话，可以玩一年，每个⽉有 86G 的流量，个人使⽤足够了吧……</p>\n<h3 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h3><ul>\n<li>一张 VISA信⽤用卡</li>\n<li>Google 账户</li>\n<li>由于 Google 在中国是不存在的，所以先要有代理</li>\n<li>下载 ShadowsocksX-NG，<a href=\"https://github.com/shadowsocks/ShadowsocksX-NG\" target=\"_blank\" rel=\"noopener\">地址</a></li>\n</ul>\n<h3 id=\"开始申请\"><a href=\"#开始申请\" class=\"headerlink\" title=\"开始申请\"></a>开始申请</h3><p>首先需要登录你的 Google 账号，如果没有的话，自己去创建一个，这就不多说了，登录成功之后，进入到 Google Cloud <a href=\"https://cloud.google.com/\" target=\"_blank\" rel=\"noopener\">官网</a></p>\n<p>此时你会看到右上角有个 免费试用 的入口，点击进去</p>\n<p><img src=\"/images/2018/06/01-01.png\" alt></p>\n<p>进去之后选择国家为 美国，为什么不选中国呢？因为没有中国可选；同意并继续</p>\n<p><img src=\"/images/2018/06/01-2.png\" alt></p>\n<p>接下来就是下面的界面了，账号选择个人，填写好注册信息，个人信息地址可以虚拟一个美国身份，推荐随机生成美国身份网站 <a href=\"http://www.haoweichi.com/Index/random\" target=\"_blank\" rel=\"noopener\">地址</a>；</p>\n<p>填写你的一张 VISA 信用卡，信用卡会扣除 1 美元，这不用担心只是验证你这张信用卡是否可用，过一会就会退还给你</p>\n<p><img src=\"/images/2018/06/01-3.png\" alt></p>\n<p>信息填完后，点击开始免费试用，至此你已成功创建了 Google cloud 账号，并且获得免费赠送的 300 美元</p>\n<h3 id=\"开始部署\"><a href=\"#开始部署\" class=\"headerlink\" title=\"开始部署\"></a>开始部署</h3><p><strong>1. 创建一个项目</strong></p>\n<p>完成上面步骤之后，进入到大概下面的界面，点击箭头位置开始创建一个项目</p>\n<p><img src=\"/images/2018/06/01-4.png\" alt></p>\n<p>进入到这个界面，项目名称随便你起，位置不用关，直接点创建</p>\n<p><img src=\"/images/2018/06/01-5.png\" alt></p>\n<p><strong>2. 设定防火墙</strong></p>\n<p>入口：菜单依次点击【网络】–【防火墙规则】–【创建防火墙规则】</p>\n<p><img src=\"/images/2018/06/01-6.png\" alt></p>\n<p>先来看下我的配置</p>\n<p><img src=\"/images/2018/06/01-7.png\" alt></p>\n<p>主要修改点：</p>\n<ul>\n<li>流量方向：入站  </li>\n<li>对匹配项执行的操作：允许  </li>\n<li>目标：网络中所有实例  </li>\n<li>来源IP地址范围：0.0.0.0/0  </li>\n<li>协议和端口：全部允许  </li>\n<li>其他默认即可</li>\n</ul>\n<p><strong>3. 申请静态IP</strong></p>\n<p>这个步骤可有可⽆，如果是拿来做 SS 服务器，最好还是申请一个，不然的话每次重启ip地址都会变化，客户端又得重新配置了</p>\n<p>菜单依次点击【网络】–【外部IP地址】–【保留静态IP】</p>\n<p><img src=\"/images/2018/06/01-8.png\" alt></p>\n<p>据说区域选择亚洲东部，国内访问会比较快，这个我不知道没有验证，反正我选择了美国</p>\n<blockquote>\n<p>注意：静态 IP 只能申请一个</p>\n</blockquote>\n<h3 id=\"创建计算引擎\"><a href=\"#创建计算引擎\" class=\"headerlink\" title=\"创建计算引擎\"></a>创建计算引擎</h3><p>菜单一次点击【计算】–【Compute Engine】–【VM 实例】</p>\n<p><img src=\"/images/2018/06/01-9.png\" alt></p>\n<p><img src=\"/images/2018/06/01-10.png\" alt></p>\n<p><img src=\"/images/2018/06/01-11.png\" alt></p>\n<p>主要修改点：</p>\n<ul>\n<li>机器类型：微型(一个共享 vCPU) （右边会有每个月的金额估算值，根据需要吧，选这个是5美元/月，能用一年！）</li>\n<li>选择启动磁盘（系统），我选择的是 Debian</li>\n<li>访问权限范围：允许默认访问权限</li>\n<li>（打开管理、磁盘、网络、ssh 密钥选项）选择【网络】<br>网络–外部IP选择临时</li>\n</ul>\n<p>至此，Google cloud 服务器已经配置完成，可以像正常使用 VPS 一样操作了。</p>\n<h3 id=\"搭建-SS\"><a href=\"#搭建-SS\" class=\"headerlink\" title=\"搭建 SS\"></a>搭建 SS</h3><p>使用 Google Cloud 自带的浏览器 SSH，推荐使用！</p>\n<p><img src=\"/images/2018/06/01-12.png\" alt></p>\n<ol>\n<li>先输入 <code>sudo -i</code> 命令进入到 root 账户</li>\n<li>搭建 Shadow-socks，推荐秋水的一键go版本，输入下面命令</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget --no-check-certificate https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks-go.sh</span><br><span class=\"line\">chmod +x shadowsocks-go.sh</span><br><span class=\"line\">./shadowsocks-go.sh 2&gt;&amp;1 | tee shadowsocks-go.log</span><br></pre></td></tr></table></figure>\n\n<p>输入命令后，一路回车 Enter 就 Ok，当然这个过程你可以自己定义 端口、密码、加密方式这些信息，执行完之后就会得到如下面信息</p>\n<p><img src=\"/images/2018/06/01-13.png\" alt></p>\n<blockquote>\n<p>该代理已经失效~~</p>\n</blockquote>\n<h3 id=\"SS-服务相关命令\"><a href=\"#SS-服务相关命令\" class=\"headerlink\" title=\"SS 服务相关命令\"></a>SS 服务相关命令</h3><p>Shadowsocks-Go 版（install | uninstall | start | stop | restart | status）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 使用 root 用户登录，运行安装以及卸载的命令：</span><br><span class=\"line\"># 进入 root 用户</span><br><span class=\"line\">sudo -i</span><br><span class=\"line\"># 安装</span><br><span class=\"line\">./shadowsocks-go.sh install</span><br><span class=\"line\"># 卸载</span><br><span class=\"line\">./shadowsocks-go.sh uninstall</span><br><span class=\"line\"></span><br><span class=\"line\"># 安装完成后</span><br><span class=\"line\"># 重启</span><br><span class=\"line\">/etc/init.d/shadowsocks restart</span><br><span class=\"line\"># 停止</span><br><span class=\"line\">/etc/init.d/shadowsocks stop</span><br><span class=\"line\"># 启动</span><br><span class=\"line\">/etc/init.d/shadowsocks start</span><br><span class=\"line\"># 查看运行状态</span><br><span class=\"line\">/etc/init.d/shadowsocks status</span><br><span class=\"line\"></span><br><span class=\"line\"># 查看配置信息</span><br><span class=\"line\">vim /etc/shadowsocks/config.json</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h3><ul>\n<li><a href=\"https://51.ruyo.net/2144.html\" target=\"_blank\" rel=\"noopener\">Google Cloud服务免费申请试用以及使用教程</a></li>\n<li><a href=\"https://www.jianshu.com/p/6bd66829a1ce\" target=\"_blank\" rel=\"noopener\">用Google Cloud搭建免费一年的SS</a></li>\n<li><a href=\"https://teddysun.com/392.html\" target=\"_blank\" rel=\"noopener\">Shadowsocks-go一键安装脚本</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"Google-Cloud-官网\"><a href=\"#Google-Cloud-官网\" class=\"headerlink\" title=\"Google Cloud 官网\"></a>Google Cloud 官网</h3><p><a href=\"https://cloud.google.com/\" target=\"_blank\" rel=\"noopener\">https://cloud.google.com/</a></p>\n<h3 id=\"活动\"><a href=\"#活动\" class=\"headerlink\" title=\"活动\"></a>活动</h3><p>现在申请 Google Cloud 赠送免费使用 300美元一年的有效期，使⽤用最低配的话，可以玩一年，每个⽉有 86G 的流量，个人使⽤足够了吧……</p>\n<h3 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h3><ul>\n<li>一张 VISA信⽤用卡</li>\n<li>Google 账户</li>\n<li>由于 Google 在中国是不存在的，所以先要有代理</li>\n<li>下载 ShadowsocksX-NG，<a href=\"https://github.com/shadowsocks/ShadowsocksX-NG\" target=\"_blank\" rel=\"noopener\">地址</a></li>\n</ul>\n<h3 id=\"开始申请\"><a href=\"#开始申请\" class=\"headerlink\" title=\"开始申请\"></a>开始申请</h3><p>首先需要登录你的 Google 账号，如果没有的话，自己去创建一个，这就不多说了，登录成功之后，进入到 Google Cloud <a href=\"https://cloud.google.com/\" target=\"_blank\" rel=\"noopener\">官网</a></p>\n<p>此时你会看到右上角有个 免费试用 的入口，点击进去</p>\n<p><img src=\"/images/2018/06/01-01.png\" alt></p>\n<p>进去之后选择国家为 美国，为什么不选中国呢？因为没有中国可选；同意并继续</p>\n<p><img src=\"/images/2018/06/01-2.png\" alt></p>\n<p>接下来就是下面的界面了，账号选择个人，填写好注册信息，个人信息地址可以虚拟一个美国身份，推荐随机生成美国身份网站 <a href=\"http://www.haoweichi.com/Index/random\" target=\"_blank\" rel=\"noopener\">地址</a>；</p>\n<p>填写你的一张 VISA 信用卡，信用卡会扣除 1 美元，这不用担心只是验证你这张信用卡是否可用，过一会就会退还给你</p>\n<p><img src=\"/images/2018/06/01-3.png\" alt></p>\n<p>信息填完后，点击开始免费试用，至此你已成功创建了 Google cloud 账号，并且获得免费赠送的 300 美元</p>\n<h3 id=\"开始部署\"><a href=\"#开始部署\" class=\"headerlink\" title=\"开始部署\"></a>开始部署</h3><p><strong>1. 创建一个项目</strong></p>\n<p>完成上面步骤之后，进入到大概下面的界面，点击箭头位置开始创建一个项目</p>\n<p><img src=\"/images/2018/06/01-4.png\" alt></p>\n<p>进入到这个界面，项目名称随便你起，位置不用关，直接点创建</p>\n<p><img src=\"/images/2018/06/01-5.png\" alt></p>\n<p><strong>2. 设定防火墙</strong></p>\n<p>入口：菜单依次点击【网络】–【防火墙规则】–【创建防火墙规则】</p>\n<p><img src=\"/images/2018/06/01-6.png\" alt></p>\n<p>先来看下我的配置</p>\n<p><img src=\"/images/2018/06/01-7.png\" alt></p>\n<p>主要修改点：</p>\n<ul>\n<li>流量方向：入站  </li>\n<li>对匹配项执行的操作：允许  </li>\n<li>目标：网络中所有实例  </li>\n<li>来源IP地址范围：0.0.0.0/0  </li>\n<li>协议和端口：全部允许  </li>\n<li>其他默认即可</li>\n</ul>\n<p><strong>3. 申请静态IP</strong></p>\n<p>这个步骤可有可⽆，如果是拿来做 SS 服务器，最好还是申请一个，不然的话每次重启ip地址都会变化，客户端又得重新配置了</p>\n<p>菜单依次点击【网络】–【外部IP地址】–【保留静态IP】</p>\n<p><img src=\"/images/2018/06/01-8.png\" alt></p>\n<p>据说区域选择亚洲东部，国内访问会比较快，这个我不知道没有验证，反正我选择了美国</p>\n<blockquote>\n<p>注意：静态 IP 只能申请一个</p>\n</blockquote>\n<h3 id=\"创建计算引擎\"><a href=\"#创建计算引擎\" class=\"headerlink\" title=\"创建计算引擎\"></a>创建计算引擎</h3><p>菜单一次点击【计算】–【Compute Engine】–【VM 实例】</p>\n<p><img src=\"/images/2018/06/01-9.png\" alt></p>\n<p><img src=\"/images/2018/06/01-10.png\" alt></p>\n<p><img src=\"/images/2018/06/01-11.png\" alt></p>\n<p>主要修改点：</p>\n<ul>\n<li>机器类型：微型(一个共享 vCPU) （右边会有每个月的金额估算值，根据需要吧，选这个是5美元/月，能用一年！）</li>\n<li>选择启动磁盘（系统），我选择的是 Debian</li>\n<li>访问权限范围：允许默认访问权限</li>\n<li>（打开管理、磁盘、网络、ssh 密钥选项）选择【网络】<br>网络–外部IP选择临时</li>\n</ul>\n<p>至此，Google cloud 服务器已经配置完成，可以像正常使用 VPS 一样操作了。</p>\n<h3 id=\"搭建-SS\"><a href=\"#搭建-SS\" class=\"headerlink\" title=\"搭建 SS\"></a>搭建 SS</h3><p>使用 Google Cloud 自带的浏览器 SSH，推荐使用！</p>\n<p><img src=\"/images/2018/06/01-12.png\" alt></p>\n<ol>\n<li>先输入 <code>sudo -i</code> 命令进入到 root 账户</li>\n<li>搭建 Shadow-socks，推荐秋水的一键go版本，输入下面命令</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget --no-check-certificate https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks-go.sh</span><br><span class=\"line\">chmod +x shadowsocks-go.sh</span><br><span class=\"line\">./shadowsocks-go.sh 2&gt;&amp;1 | tee shadowsocks-go.log</span><br></pre></td></tr></table></figure>\n\n<p>输入命令后，一路回车 Enter 就 Ok，当然这个过程你可以自己定义 端口、密码、加密方式这些信息，执行完之后就会得到如下面信息</p>\n<p><img src=\"/images/2018/06/01-13.png\" alt></p>\n<blockquote>\n<p>该代理已经失效~~</p>\n</blockquote>\n<h3 id=\"SS-服务相关命令\"><a href=\"#SS-服务相关命令\" class=\"headerlink\" title=\"SS 服务相关命令\"></a>SS 服务相关命令</h3><p>Shadowsocks-Go 版（install | uninstall | start | stop | restart | status）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 使用 root 用户登录，运行安装以及卸载的命令：</span><br><span class=\"line\"># 进入 root 用户</span><br><span class=\"line\">sudo -i</span><br><span class=\"line\"># 安装</span><br><span class=\"line\">./shadowsocks-go.sh install</span><br><span class=\"line\"># 卸载</span><br><span class=\"line\">./shadowsocks-go.sh uninstall</span><br><span class=\"line\"></span><br><span class=\"line\"># 安装完成后</span><br><span class=\"line\"># 重启</span><br><span class=\"line\">/etc/init.d/shadowsocks restart</span><br><span class=\"line\"># 停止</span><br><span class=\"line\">/etc/init.d/shadowsocks stop</span><br><span class=\"line\"># 启动</span><br><span class=\"line\">/etc/init.d/shadowsocks start</span><br><span class=\"line\"># 查看运行状态</span><br><span class=\"line\">/etc/init.d/shadowsocks status</span><br><span class=\"line\"></span><br><span class=\"line\"># 查看配置信息</span><br><span class=\"line\">vim /etc/shadowsocks/config.json</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h3><ul>\n<li><a href=\"https://51.ruyo.net/2144.html\" target=\"_blank\" rel=\"noopener\">Google Cloud服务免费申请试用以及使用教程</a></li>\n<li><a href=\"https://www.jianshu.com/p/6bd66829a1ce\" target=\"_blank\" rel=\"noopener\">用Google Cloud搭建免费一年的SS</a></li>\n<li><a href=\"https://teddysun.com/392.html\" target=\"_blank\" rel=\"noopener\">Shadowsocks-go一键安装脚本</a></li>\n</ul>\n"},{"title":"欢迎来到我的新博客","date":"2019-06-11T16:07:52.000Z","_content":"\n## 教程\n\n1. [手把手教你使用Hexo + Github Pages搭建个人独立博客](https://segmentfault.com/a/1190000004947261#articleHeader1)\n2. [使用Hexo在Github上搭建专属博客之技术总结](https://www.jianshu.com/p/42aa637f614a)\n3. [主题配置](http://forsigner.com/2016/03/10/fexo-doc-zh-cn/#%E5%BC%80%E5%A7%8B)\n\n## 遇到问题\n\n```\nFATAL Port 4000 has been used. Try other port instead.\nFATAL Something's wrong. Maybe you can find the solution here: http://hexo.io/docs/troubleshooting.html\n```\n解决方案：\n\n```\nsudo hexo s -p 5000\n```\n\n## Hexo 命令\n\n1. ``hexo generate (hexo g)`` 生成静态文件，会在当前目录下生成一个新的叫做public的文件夹\n2. ``hexo server (hexo s)`` 启动本地web服务，用于博客的预览\n3. ``hexo deploy (hexo d)`` 部署播客到远端（比如github, heroku等平台）\n4. ``hexo new \"postName\"`` #新建文章\n5. ``hexo new page \"pageName\"`` #新建页面\n\n```\n$ hexo n == hexo new\n$ hexo g == hexo generate\n$ hexo s == hexo server\n$ hexo d == hexo deploy\n```\n\n## 如何关联上 GitHub\n\n1. Install hexo-deployer-git.\n\n```\n$ npm install hexo-deployer-git --save\n```\n\n2. Edit ``_config.yml`` (with example values shown below as comments):\n\n```\ndeploy:\n  type: git   \n  repo: <repository url>  #https://bitbucket.org/JohnSmith/johnsmith.bitbucket.io\n  branch: [branch] #published\n  message: [message]  #leave this blank\n```\n\n## 绑定个人域名\n\n注册域名地址推荐：[namesilo](https://www.namesilo.com)\n\n然后在 GitHub 你的博客仓库 Setting 页面配置域名\n\n![image](/images/2019/06/01.png)\n\n保存过几分钟就可以访问。\n\n### Hexo 主题模板\n\nhttps://hexo.io/themes/\n\n## 看中的博客模版\n\n1. https://fuzhouxxdong.github.io/hexo-theme-dxx/\n2. http://forsigner.com/\n3. https://blog.devzeng.com/\n4. https://paugram.com/\n5. http://qiubaiying.top/\n\n\n\n\n\n","source":"_posts/hello-blog.md","raw":"---\ntitle: 欢迎来到我的新博客\ndate: 2019-06-12 00:07:52\ntags: [Blog]\ncategories: Blog\n---\n\n## 教程\n\n1. [手把手教你使用Hexo + Github Pages搭建个人独立博客](https://segmentfault.com/a/1190000004947261#articleHeader1)\n2. [使用Hexo在Github上搭建专属博客之技术总结](https://www.jianshu.com/p/42aa637f614a)\n3. [主题配置](http://forsigner.com/2016/03/10/fexo-doc-zh-cn/#%E5%BC%80%E5%A7%8B)\n\n## 遇到问题\n\n```\nFATAL Port 4000 has been used. Try other port instead.\nFATAL Something's wrong. Maybe you can find the solution here: http://hexo.io/docs/troubleshooting.html\n```\n解决方案：\n\n```\nsudo hexo s -p 5000\n```\n\n## Hexo 命令\n\n1. ``hexo generate (hexo g)`` 生成静态文件，会在当前目录下生成一个新的叫做public的文件夹\n2. ``hexo server (hexo s)`` 启动本地web服务，用于博客的预览\n3. ``hexo deploy (hexo d)`` 部署播客到远端（比如github, heroku等平台）\n4. ``hexo new \"postName\"`` #新建文章\n5. ``hexo new page \"pageName\"`` #新建页面\n\n```\n$ hexo n == hexo new\n$ hexo g == hexo generate\n$ hexo s == hexo server\n$ hexo d == hexo deploy\n```\n\n## 如何关联上 GitHub\n\n1. Install hexo-deployer-git.\n\n```\n$ npm install hexo-deployer-git --save\n```\n\n2. Edit ``_config.yml`` (with example values shown below as comments):\n\n```\ndeploy:\n  type: git   \n  repo: <repository url>  #https://bitbucket.org/JohnSmith/johnsmith.bitbucket.io\n  branch: [branch] #published\n  message: [message]  #leave this blank\n```\n\n## 绑定个人域名\n\n注册域名地址推荐：[namesilo](https://www.namesilo.com)\n\n然后在 GitHub 你的博客仓库 Setting 页面配置域名\n\n![image](/images/2019/06/01.png)\n\n保存过几分钟就可以访问。\n\n### Hexo 主题模板\n\nhttps://hexo.io/themes/\n\n## 看中的博客模版\n\n1. https://fuzhouxxdong.github.io/hexo-theme-dxx/\n2. http://forsigner.com/\n3. https://blog.devzeng.com/\n4. https://paugram.com/\n5. http://qiubaiying.top/\n\n\n\n\n\n","slug":"hello-blog","published":1,"updated":"2019-06-16T16:00:32.998Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cks0kficu001fw3yztpf8ac29","content":"<h2 id=\"教程\"><a href=\"#教程\" class=\"headerlink\" title=\"教程\"></a>教程</h2><ol>\n<li><a href=\"https://segmentfault.com/a/1190000004947261#articleHeader1\" target=\"_blank\" rel=\"noopener\">手把手教你使用Hexo + Github Pages搭建个人独立博客</a></li>\n<li><a href=\"https://www.jianshu.com/p/42aa637f614a\" target=\"_blank\" rel=\"noopener\">使用Hexo在Github上搭建专属博客之技术总结</a></li>\n<li><a href=\"http://forsigner.com/2016/03/10/fexo-doc-zh-cn/#%E5%BC%80%E5%A7%8B\" target=\"_blank\" rel=\"noopener\">主题配置</a></li>\n</ol>\n<h2 id=\"遇到问题\"><a href=\"#遇到问题\" class=\"headerlink\" title=\"遇到问题\"></a>遇到问题</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FATAL Port 4000 has been used. Try other port instead.</span><br><span class=\"line\">FATAL Something&apos;s wrong. Maybe you can find the solution here: http://hexo.io/docs/troubleshooting.html</span><br></pre></td></tr></table></figure>\n\n<p>解决方案：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo hexo s -p 5000</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Hexo-命令\"><a href=\"#Hexo-命令\" class=\"headerlink\" title=\"Hexo 命令\"></a>Hexo 命令</h2><ol>\n<li><code>hexo generate (hexo g)</code> 生成静态文件，会在当前目录下生成一个新的叫做public的文件夹</li>\n<li><code>hexo server (hexo s)</code> 启动本地web服务，用于博客的预览</li>\n<li><code>hexo deploy (hexo d)</code> 部署播客到远端（比如github, heroku等平台）</li>\n<li><code>hexo new &quot;postName&quot;</code> #新建文章</li>\n<li><code>hexo new page &quot;pageName&quot;</code> #新建页面</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo n == hexo new</span><br><span class=\"line\">$ hexo g == hexo generate</span><br><span class=\"line\">$ hexo s == hexo server</span><br><span class=\"line\">$ hexo d == hexo deploy</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"如何关联上-GitHub\"><a href=\"#如何关联上-GitHub\" class=\"headerlink\" title=\"如何关联上 GitHub\"></a>如何关联上 GitHub</h2><ol>\n<li>Install hexo-deployer-git.</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>Edit <code>_config.yml</code> (with example values shown below as comments):</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\">  type: git   </span><br><span class=\"line\">  repo: &lt;repository url&gt;  #https://bitbucket.org/JohnSmith/johnsmith.bitbucket.io</span><br><span class=\"line\">  branch: [branch] #published</span><br><span class=\"line\">  message: [message]  #leave this blank</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"绑定个人域名\"><a href=\"#绑定个人域名\" class=\"headerlink\" title=\"绑定个人域名\"></a>绑定个人域名</h2><p>注册域名地址推荐：<a href=\"https://www.namesilo.com\" target=\"_blank\" rel=\"noopener\">namesilo</a></p>\n<p>然后在 GitHub 你的博客仓库 Setting 页面配置域名</p>\n<p><img src=\"/images/2019/06/01.png\" alt=\"image\"></p>\n<p>保存过几分钟就可以访问。</p>\n<h3 id=\"Hexo-主题模板\"><a href=\"#Hexo-主题模板\" class=\"headerlink\" title=\"Hexo 主题模板\"></a>Hexo 主题模板</h3><p><a href=\"https://hexo.io/themes/\" target=\"_blank\" rel=\"noopener\">https://hexo.io/themes/</a></p>\n<h2 id=\"看中的博客模版\"><a href=\"#看中的博客模版\" class=\"headerlink\" title=\"看中的博客模版\"></a>看中的博客模版</h2><ol>\n<li><a href=\"https://fuzhouxxdong.github.io/hexo-theme-dxx/\" target=\"_blank\" rel=\"noopener\">https://fuzhouxxdong.github.io/hexo-theme-dxx/</a></li>\n<li><a href=\"http://forsigner.com/\" target=\"_blank\" rel=\"noopener\">http://forsigner.com/</a></li>\n<li><a href=\"https://blog.devzeng.com/\" target=\"_blank\" rel=\"noopener\">https://blog.devzeng.com/</a></li>\n<li><a href=\"https://paugram.com/\" target=\"_blank\" rel=\"noopener\">https://paugram.com/</a></li>\n<li><a href=\"http://qiubaiying.top/\" target=\"_blank\" rel=\"noopener\">http://qiubaiying.top/</a></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"教程\"><a href=\"#教程\" class=\"headerlink\" title=\"教程\"></a>教程</h2><ol>\n<li><a href=\"https://segmentfault.com/a/1190000004947261#articleHeader1\" target=\"_blank\" rel=\"noopener\">手把手教你使用Hexo + Github Pages搭建个人独立博客</a></li>\n<li><a href=\"https://www.jianshu.com/p/42aa637f614a\" target=\"_blank\" rel=\"noopener\">使用Hexo在Github上搭建专属博客之技术总结</a></li>\n<li><a href=\"http://forsigner.com/2016/03/10/fexo-doc-zh-cn/#%E5%BC%80%E5%A7%8B\" target=\"_blank\" rel=\"noopener\">主题配置</a></li>\n</ol>\n<h2 id=\"遇到问题\"><a href=\"#遇到问题\" class=\"headerlink\" title=\"遇到问题\"></a>遇到问题</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FATAL Port 4000 has been used. Try other port instead.</span><br><span class=\"line\">FATAL Something&apos;s wrong. Maybe you can find the solution here: http://hexo.io/docs/troubleshooting.html</span><br></pre></td></tr></table></figure>\n\n<p>解决方案：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo hexo s -p 5000</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Hexo-命令\"><a href=\"#Hexo-命令\" class=\"headerlink\" title=\"Hexo 命令\"></a>Hexo 命令</h2><ol>\n<li><code>hexo generate (hexo g)</code> 生成静态文件，会在当前目录下生成一个新的叫做public的文件夹</li>\n<li><code>hexo server (hexo s)</code> 启动本地web服务，用于博客的预览</li>\n<li><code>hexo deploy (hexo d)</code> 部署播客到远端（比如github, heroku等平台）</li>\n<li><code>hexo new &quot;postName&quot;</code> #新建文章</li>\n<li><code>hexo new page &quot;pageName&quot;</code> #新建页面</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo n == hexo new</span><br><span class=\"line\">$ hexo g == hexo generate</span><br><span class=\"line\">$ hexo s == hexo server</span><br><span class=\"line\">$ hexo d == hexo deploy</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"如何关联上-GitHub\"><a href=\"#如何关联上-GitHub\" class=\"headerlink\" title=\"如何关联上 GitHub\"></a>如何关联上 GitHub</h2><ol>\n<li>Install hexo-deployer-git.</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>Edit <code>_config.yml</code> (with example values shown below as comments):</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\">  type: git   </span><br><span class=\"line\">  repo: &lt;repository url&gt;  #https://bitbucket.org/JohnSmith/johnsmith.bitbucket.io</span><br><span class=\"line\">  branch: [branch] #published</span><br><span class=\"line\">  message: [message]  #leave this blank</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"绑定个人域名\"><a href=\"#绑定个人域名\" class=\"headerlink\" title=\"绑定个人域名\"></a>绑定个人域名</h2><p>注册域名地址推荐：<a href=\"https://www.namesilo.com\" target=\"_blank\" rel=\"noopener\">namesilo</a></p>\n<p>然后在 GitHub 你的博客仓库 Setting 页面配置域名</p>\n<p><img src=\"/images/2019/06/01.png\" alt=\"image\"></p>\n<p>保存过几分钟就可以访问。</p>\n<h3 id=\"Hexo-主题模板\"><a href=\"#Hexo-主题模板\" class=\"headerlink\" title=\"Hexo 主题模板\"></a>Hexo 主题模板</h3><p><a href=\"https://hexo.io/themes/\" target=\"_blank\" rel=\"noopener\">https://hexo.io/themes/</a></p>\n<h2 id=\"看中的博客模版\"><a href=\"#看中的博客模版\" class=\"headerlink\" title=\"看中的博客模版\"></a>看中的博客模版</h2><ol>\n<li><a href=\"https://fuzhouxxdong.github.io/hexo-theme-dxx/\" target=\"_blank\" rel=\"noopener\">https://fuzhouxxdong.github.io/hexo-theme-dxx/</a></li>\n<li><a href=\"http://forsigner.com/\" target=\"_blank\" rel=\"noopener\">http://forsigner.com/</a></li>\n<li><a href=\"https://blog.devzeng.com/\" target=\"_blank\" rel=\"noopener\">https://blog.devzeng.com/</a></li>\n<li><a href=\"https://paugram.com/\" target=\"_blank\" rel=\"noopener\">https://paugram.com/</a></li>\n<li><a href=\"http://qiubaiying.top/\" target=\"_blank\" rel=\"noopener\">http://qiubaiying.top/</a></li>\n</ol>\n"},{"title":"MacOs 最全的 Jenkins Android 自动打包构建教程","date":"2019-09-24T13:51:40.000Z","_content":"\n## 安装\n\n1. 下载安装可以到 Jenkins [官网](https://jenkins.io/zh/) 下载Mac版本的安装包，然后进行手动安装（坑多，不推荐）\n2. 使用 brew 下载安装Jenkins（推荐，简单傻瓜式，下载安装配置一步到位）具体做法如下：\n``brew install jenkins``\n\n## 启动\n\n安装完成在终端输入 ``jenkins`` 启动\n\n然后在浏览器打开 ``http://localhost:8080``\n\n首次启动会看到一个界面要求你输入管理员密码，如果你是命令安装的，在终端启动的时候会输出此密码。\n\n![image](/images/2019/09/07.png)\n\n按它页面提示的路径找到该文件，复制里面的一串字符到输入框回车即可。\n\n会出现找不到此文件的情况，原因是 secrets 文件夹未授权当前用户访问。\n\n解决方法：https://stackoverflow.com/a/38943610\n\n## 基本配置\n\n第一次启动要求你创建一个管理员账号。\n\n## 插件的安装\n\n进入后，会让你选择推荐插件安装还是自定义插件安装，对于小白可以直接点击推荐安装。\n\n## Jenkins的环境配置\n\n配置 JDK 路径\n\nMac 查看 JDK 路径方法：\n``打开终端，执行    /usr/libexec/java_home -V``\n\n![image](/images/2019/09/08.png)\n\n\n## 环境变量配置（ANDROID_HOME的配置）\n\n![image](/images/2019/09/09.png)\n\n## 创建项目\n\n1）输入项目名称，选择自定义构建项目\n\n![image](/images/2019/09/10.png)\n\n2）配置 Git\n\n![image](/images/2019/09/11.png)\n\n3）配置对项目有写权限的账户\n\n> 进入 GitHub --> Settings --> Developer settings --> Personal Access Token --> Generate new token\n\n![image](/images/2019/09/12.png)\n\n复制刚才生成的 token\n\n![image](/images/2019/09/13.png)\n\n回到 Jenkins 配置\n\n![image](/images/2019/09/14.png)\n\n选择``Secret text``，``Secret`` 填入前面在 GitHub 上生成的 Personal access tokens，Description 随便写一些描述信息，如下图：\n\n![image](/images/2019/09/15.png)\n\n3）Gradle 构建脚本\n\n![image](/images/2019/09/16.png)\n\n4）构建完成存档的文件\n\n![image](/images/2019/09/17.png)\n\n## 构建\n\n1）开始\n\n![image](/images/2019/09/18.png)\n\n2）查看控制台输出日志\n\n![image](/images/2019/09/19.png)\n\n![image](/images/2019/09/20.png)\n\n3）主页面显示的安装包\n\n![image](/images/2019/09/21.png)\n\n## 向 GitHub 提交代码时触发自动构建\n\n需要在 GitHub 对应项目上配置 Webhooks。\n\n> GitHub 项目 --> Settings --> Webhooks --> Add webhooks\n\n如下图：填入 ``Payload URL``\n\n![image](/images/2019/09/22.png)\n\n**解释：** Webhook 是通知 Jenkins 时的请求地址，用来填写到 GitHub 上，这样 GitHub 就能通过该地址通知到 Jenkins；\n假设 Jenkins 所在服务器的地址是：192.168.0.1，端口为8080，项目是 github-webhook，那么 Webhook 地址就是 http://192.168.0.1:8080/github-webhook。\n\n``再次提醒，上述地址必须是外网也能访问的，否则GitHub无法访问到Jenkins。``\n\n## 测试\n\n至此配置已经完成，将 GitHub 上的项目克隆下来，修改某个文件提交，测试看 Jenkins 是否能自动构建。\n\n**Good Luck!**\n\n## 推荐阅读\n\n* [如何利用 frp 实现 Mac 的内网穿透](https://gojun.me/2019/09/23/jenkins-frp/)\n\n## 参考链接\n\n1. [这应该是最全的 Jenkins Android 自动打包构建教程](https://juejin.im/post/5b6a542b5188251a9e171bf2)\n2. [MAC 上搭建Jenkins实现 Android 自动打包](https://blog.csdn.net/ATangSir/article/details/71699403)\n3. [实战：向 GitHub 提交代码时触发 Jenkins 自动构建](https://blog.csdn.net/boling_cavalry/article/details/78943061)\n4. [搭建 frp 实现内网穿透](https://blog.csdn.net/zengd0/article/details/79522253)\n5. [利用 frp 为 jenkins 配置内网打包节点](https://alphagao.com/2018/05/05/config-native-package-node-for-jenkins-server/)\n","source":"_posts/jenkins.md","raw":"---\ntitle: MacOs 最全的 Jenkins Android 自动打包构建教程\ndate: 2019-09-24 21:51:40\ntags: [Jenkins, MacOs]\n---\n\n## 安装\n\n1. 下载安装可以到 Jenkins [官网](https://jenkins.io/zh/) 下载Mac版本的安装包，然后进行手动安装（坑多，不推荐）\n2. 使用 brew 下载安装Jenkins（推荐，简单傻瓜式，下载安装配置一步到位）具体做法如下：\n``brew install jenkins``\n\n## 启动\n\n安装完成在终端输入 ``jenkins`` 启动\n\n然后在浏览器打开 ``http://localhost:8080``\n\n首次启动会看到一个界面要求你输入管理员密码，如果你是命令安装的，在终端启动的时候会输出此密码。\n\n![image](/images/2019/09/07.png)\n\n按它页面提示的路径找到该文件，复制里面的一串字符到输入框回车即可。\n\n会出现找不到此文件的情况，原因是 secrets 文件夹未授权当前用户访问。\n\n解决方法：https://stackoverflow.com/a/38943610\n\n## 基本配置\n\n第一次启动要求你创建一个管理员账号。\n\n## 插件的安装\n\n进入后，会让你选择推荐插件安装还是自定义插件安装，对于小白可以直接点击推荐安装。\n\n## Jenkins的环境配置\n\n配置 JDK 路径\n\nMac 查看 JDK 路径方法：\n``打开终端，执行    /usr/libexec/java_home -V``\n\n![image](/images/2019/09/08.png)\n\n\n## 环境变量配置（ANDROID_HOME的配置）\n\n![image](/images/2019/09/09.png)\n\n## 创建项目\n\n1）输入项目名称，选择自定义构建项目\n\n![image](/images/2019/09/10.png)\n\n2）配置 Git\n\n![image](/images/2019/09/11.png)\n\n3）配置对项目有写权限的账户\n\n> 进入 GitHub --> Settings --> Developer settings --> Personal Access Token --> Generate new token\n\n![image](/images/2019/09/12.png)\n\n复制刚才生成的 token\n\n![image](/images/2019/09/13.png)\n\n回到 Jenkins 配置\n\n![image](/images/2019/09/14.png)\n\n选择``Secret text``，``Secret`` 填入前面在 GitHub 上生成的 Personal access tokens，Description 随便写一些描述信息，如下图：\n\n![image](/images/2019/09/15.png)\n\n3）Gradle 构建脚本\n\n![image](/images/2019/09/16.png)\n\n4）构建完成存档的文件\n\n![image](/images/2019/09/17.png)\n\n## 构建\n\n1）开始\n\n![image](/images/2019/09/18.png)\n\n2）查看控制台输出日志\n\n![image](/images/2019/09/19.png)\n\n![image](/images/2019/09/20.png)\n\n3）主页面显示的安装包\n\n![image](/images/2019/09/21.png)\n\n## 向 GitHub 提交代码时触发自动构建\n\n需要在 GitHub 对应项目上配置 Webhooks。\n\n> GitHub 项目 --> Settings --> Webhooks --> Add webhooks\n\n如下图：填入 ``Payload URL``\n\n![image](/images/2019/09/22.png)\n\n**解释：** Webhook 是通知 Jenkins 时的请求地址，用来填写到 GitHub 上，这样 GitHub 就能通过该地址通知到 Jenkins；\n假设 Jenkins 所在服务器的地址是：192.168.0.1，端口为8080，项目是 github-webhook，那么 Webhook 地址就是 http://192.168.0.1:8080/github-webhook。\n\n``再次提醒，上述地址必须是外网也能访问的，否则GitHub无法访问到Jenkins。``\n\n## 测试\n\n至此配置已经完成，将 GitHub 上的项目克隆下来，修改某个文件提交，测试看 Jenkins 是否能自动构建。\n\n**Good Luck!**\n\n## 推荐阅读\n\n* [如何利用 frp 实现 Mac 的内网穿透](https://gojun.me/2019/09/23/jenkins-frp/)\n\n## 参考链接\n\n1. [这应该是最全的 Jenkins Android 自动打包构建教程](https://juejin.im/post/5b6a542b5188251a9e171bf2)\n2. [MAC 上搭建Jenkins实现 Android 自动打包](https://blog.csdn.net/ATangSir/article/details/71699403)\n3. [实战：向 GitHub 提交代码时触发 Jenkins 自动构建](https://blog.csdn.net/boling_cavalry/article/details/78943061)\n4. [搭建 frp 实现内网穿透](https://blog.csdn.net/zengd0/article/details/79522253)\n5. [利用 frp 为 jenkins 配置内网打包节点](https://alphagao.com/2018/05/05/config-native-package-node-for-jenkins-server/)\n","slug":"jenkins","published":1,"updated":"2019-09-24T14:09:16.046Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cks0kficv001jw3yzszjuctho","content":"<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><ol>\n<li>下载安装可以到 Jenkins <a href=\"https://jenkins.io/zh/\" target=\"_blank\" rel=\"noopener\">官网</a> 下载Mac版本的安装包，然后进行手动安装（坑多，不推荐）</li>\n<li>使用 brew 下载安装Jenkins（推荐，简单傻瓜式，下载安装配置一步到位）具体做法如下：<br><code>brew install jenkins</code></li>\n</ol>\n<h2 id=\"启动\"><a href=\"#启动\" class=\"headerlink\" title=\"启动\"></a>启动</h2><p>安装完成在终端输入 <code>jenkins</code> 启动</p>\n<p>然后在浏览器打开 <code>http://localhost:8080</code></p>\n<p>首次启动会看到一个界面要求你输入管理员密码，如果你是命令安装的，在终端启动的时候会输出此密码。</p>\n<p><img src=\"/images/2019/09/07.png\" alt=\"image\"></p>\n<p>按它页面提示的路径找到该文件，复制里面的一串字符到输入框回车即可。</p>\n<p>会出现找不到此文件的情况，原因是 secrets 文件夹未授权当前用户访问。</p>\n<p>解决方法：<a href=\"https://stackoverflow.com/a/38943610\" target=\"_blank\" rel=\"noopener\">https://stackoverflow.com/a/38943610</a></p>\n<h2 id=\"基本配置\"><a href=\"#基本配置\" class=\"headerlink\" title=\"基本配置\"></a>基本配置</h2><p>第一次启动要求你创建一个管理员账号。</p>\n<h2 id=\"插件的安装\"><a href=\"#插件的安装\" class=\"headerlink\" title=\"插件的安装\"></a>插件的安装</h2><p>进入后，会让你选择推荐插件安装还是自定义插件安装，对于小白可以直接点击推荐安装。</p>\n<h2 id=\"Jenkins的环境配置\"><a href=\"#Jenkins的环境配置\" class=\"headerlink\" title=\"Jenkins的环境配置\"></a>Jenkins的环境配置</h2><p>配置 JDK 路径</p>\n<p>Mac 查看 JDK 路径方法：<br><code>打开终端，执行    /usr/libexec/java_home -V</code></p>\n<p><img src=\"/images/2019/09/08.png\" alt=\"image\"></p>\n<h2 id=\"环境变量配置（ANDROID-HOME的配置）\"><a href=\"#环境变量配置（ANDROID-HOME的配置）\" class=\"headerlink\" title=\"环境变量配置（ANDROID_HOME的配置）\"></a>环境变量配置（ANDROID_HOME的配置）</h2><p><img src=\"/images/2019/09/09.png\" alt=\"image\"></p>\n<h2 id=\"创建项目\"><a href=\"#创建项目\" class=\"headerlink\" title=\"创建项目\"></a>创建项目</h2><p>1）输入项目名称，选择自定义构建项目</p>\n<p><img src=\"/images/2019/09/10.png\" alt=\"image\"></p>\n<p>2）配置 Git</p>\n<p><img src=\"/images/2019/09/11.png\" alt=\"image\"></p>\n<p>3）配置对项目有写权限的账户</p>\n<blockquote>\n<p>进入 GitHub –&gt; Settings –&gt; Developer settings –&gt; Personal Access Token –&gt; Generate new token</p>\n</blockquote>\n<p><img src=\"/images/2019/09/12.png\" alt=\"image\"></p>\n<p>复制刚才生成的 token</p>\n<p><img src=\"/images/2019/09/13.png\" alt=\"image\"></p>\n<p>回到 Jenkins 配置</p>\n<p><img src=\"/images/2019/09/14.png\" alt=\"image\"></p>\n<p>选择<code>Secret text</code>，<code>Secret</code> 填入前面在 GitHub 上生成的 Personal access tokens，Description 随便写一些描述信息，如下图：</p>\n<p><img src=\"/images/2019/09/15.png\" alt=\"image\"></p>\n<p>3）Gradle 构建脚本</p>\n<p><img src=\"/images/2019/09/16.png\" alt=\"image\"></p>\n<p>4）构建完成存档的文件</p>\n<p><img src=\"/images/2019/09/17.png\" alt=\"image\"></p>\n<h2 id=\"构建\"><a href=\"#构建\" class=\"headerlink\" title=\"构建\"></a>构建</h2><p>1）开始</p>\n<p><img src=\"/images/2019/09/18.png\" alt=\"image\"></p>\n<p>2）查看控制台输出日志</p>\n<p><img src=\"/images/2019/09/19.png\" alt=\"image\"></p>\n<p><img src=\"/images/2019/09/20.png\" alt=\"image\"></p>\n<p>3）主页面显示的安装包</p>\n<p><img src=\"/images/2019/09/21.png\" alt=\"image\"></p>\n<h2 id=\"向-GitHub-提交代码时触发自动构建\"><a href=\"#向-GitHub-提交代码时触发自动构建\" class=\"headerlink\" title=\"向 GitHub 提交代码时触发自动构建\"></a>向 GitHub 提交代码时触发自动构建</h2><p>需要在 GitHub 对应项目上配置 Webhooks。</p>\n<blockquote>\n<p>GitHub 项目 –&gt; Settings –&gt; Webhooks –&gt; Add webhooks</p>\n</blockquote>\n<p>如下图：填入 <code>Payload URL</code></p>\n<p><img src=\"/images/2019/09/22.png\" alt=\"image\"></p>\n<p><strong>解释：</strong> Webhook 是通知 Jenkins 时的请求地址，用来填写到 GitHub 上，这样 GitHub 就能通过该地址通知到 Jenkins；<br>假设 Jenkins 所在服务器的地址是：192.168.0.1，端口为8080，项目是 github-webhook，那么 Webhook 地址就是 <a href=\"http://192.168.0.1:8080/github-webhook。\" target=\"_blank\" rel=\"noopener\">http://192.168.0.1:8080/github-webhook。</a></p>\n<p><code>再次提醒，上述地址必须是外网也能访问的，否则GitHub无法访问到Jenkins。</code></p>\n<h2 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h2><p>至此配置已经完成，将 GitHub 上的项目克隆下来，修改某个文件提交，测试看 Jenkins 是否能自动构建。</p>\n<p><strong>Good Luck!</strong></p>\n<h2 id=\"推荐阅读\"><a href=\"#推荐阅读\" class=\"headerlink\" title=\"推荐阅读\"></a>推荐阅读</h2><ul>\n<li><a href=\"https://gojun.me/2019/09/23/jenkins-frp/\" target=\"_blank\" rel=\"noopener\">如何利用 frp 实现 Mac 的内网穿透</a></li>\n</ul>\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><ol>\n<li><a href=\"https://juejin.im/post/5b6a542b5188251a9e171bf2\" target=\"_blank\" rel=\"noopener\">这应该是最全的 Jenkins Android 自动打包构建教程</a></li>\n<li><a href=\"https://blog.csdn.net/ATangSir/article/details/71699403\" target=\"_blank\" rel=\"noopener\">MAC 上搭建Jenkins实现 Android 自动打包</a></li>\n<li><a href=\"https://blog.csdn.net/boling_cavalry/article/details/78943061\" target=\"_blank\" rel=\"noopener\">实战：向 GitHub 提交代码时触发 Jenkins 自动构建</a></li>\n<li><a href=\"https://blog.csdn.net/zengd0/article/details/79522253\" target=\"_blank\" rel=\"noopener\">搭建 frp 实现内网穿透</a></li>\n<li><a href=\"https://alphagao.com/2018/05/05/config-native-package-node-for-jenkins-server/\" target=\"_blank\" rel=\"noopener\">利用 frp 为 jenkins 配置内网打包节点</a></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><ol>\n<li>下载安装可以到 Jenkins <a href=\"https://jenkins.io/zh/\" target=\"_blank\" rel=\"noopener\">官网</a> 下载Mac版本的安装包，然后进行手动安装（坑多，不推荐）</li>\n<li>使用 brew 下载安装Jenkins（推荐，简单傻瓜式，下载安装配置一步到位）具体做法如下：<br><code>brew install jenkins</code></li>\n</ol>\n<h2 id=\"启动\"><a href=\"#启动\" class=\"headerlink\" title=\"启动\"></a>启动</h2><p>安装完成在终端输入 <code>jenkins</code> 启动</p>\n<p>然后在浏览器打开 <code>http://localhost:8080</code></p>\n<p>首次启动会看到一个界面要求你输入管理员密码，如果你是命令安装的，在终端启动的时候会输出此密码。</p>\n<p><img src=\"/images/2019/09/07.png\" alt=\"image\"></p>\n<p>按它页面提示的路径找到该文件，复制里面的一串字符到输入框回车即可。</p>\n<p>会出现找不到此文件的情况，原因是 secrets 文件夹未授权当前用户访问。</p>\n<p>解决方法：<a href=\"https://stackoverflow.com/a/38943610\" target=\"_blank\" rel=\"noopener\">https://stackoverflow.com/a/38943610</a></p>\n<h2 id=\"基本配置\"><a href=\"#基本配置\" class=\"headerlink\" title=\"基本配置\"></a>基本配置</h2><p>第一次启动要求你创建一个管理员账号。</p>\n<h2 id=\"插件的安装\"><a href=\"#插件的安装\" class=\"headerlink\" title=\"插件的安装\"></a>插件的安装</h2><p>进入后，会让你选择推荐插件安装还是自定义插件安装，对于小白可以直接点击推荐安装。</p>\n<h2 id=\"Jenkins的环境配置\"><a href=\"#Jenkins的环境配置\" class=\"headerlink\" title=\"Jenkins的环境配置\"></a>Jenkins的环境配置</h2><p>配置 JDK 路径</p>\n<p>Mac 查看 JDK 路径方法：<br><code>打开终端，执行    /usr/libexec/java_home -V</code></p>\n<p><img src=\"/images/2019/09/08.png\" alt=\"image\"></p>\n<h2 id=\"环境变量配置（ANDROID-HOME的配置）\"><a href=\"#环境变量配置（ANDROID-HOME的配置）\" class=\"headerlink\" title=\"环境变量配置（ANDROID_HOME的配置）\"></a>环境变量配置（ANDROID_HOME的配置）</h2><p><img src=\"/images/2019/09/09.png\" alt=\"image\"></p>\n<h2 id=\"创建项目\"><a href=\"#创建项目\" class=\"headerlink\" title=\"创建项目\"></a>创建项目</h2><p>1）输入项目名称，选择自定义构建项目</p>\n<p><img src=\"/images/2019/09/10.png\" alt=\"image\"></p>\n<p>2）配置 Git</p>\n<p><img src=\"/images/2019/09/11.png\" alt=\"image\"></p>\n<p>3）配置对项目有写权限的账户</p>\n<blockquote>\n<p>进入 GitHub –&gt; Settings –&gt; Developer settings –&gt; Personal Access Token –&gt; Generate new token</p>\n</blockquote>\n<p><img src=\"/images/2019/09/12.png\" alt=\"image\"></p>\n<p>复制刚才生成的 token</p>\n<p><img src=\"/images/2019/09/13.png\" alt=\"image\"></p>\n<p>回到 Jenkins 配置</p>\n<p><img src=\"/images/2019/09/14.png\" alt=\"image\"></p>\n<p>选择<code>Secret text</code>，<code>Secret</code> 填入前面在 GitHub 上生成的 Personal access tokens，Description 随便写一些描述信息，如下图：</p>\n<p><img src=\"/images/2019/09/15.png\" alt=\"image\"></p>\n<p>3）Gradle 构建脚本</p>\n<p><img src=\"/images/2019/09/16.png\" alt=\"image\"></p>\n<p>4）构建完成存档的文件</p>\n<p><img src=\"/images/2019/09/17.png\" alt=\"image\"></p>\n<h2 id=\"构建\"><a href=\"#构建\" class=\"headerlink\" title=\"构建\"></a>构建</h2><p>1）开始</p>\n<p><img src=\"/images/2019/09/18.png\" alt=\"image\"></p>\n<p>2）查看控制台输出日志</p>\n<p><img src=\"/images/2019/09/19.png\" alt=\"image\"></p>\n<p><img src=\"/images/2019/09/20.png\" alt=\"image\"></p>\n<p>3）主页面显示的安装包</p>\n<p><img src=\"/images/2019/09/21.png\" alt=\"image\"></p>\n<h2 id=\"向-GitHub-提交代码时触发自动构建\"><a href=\"#向-GitHub-提交代码时触发自动构建\" class=\"headerlink\" title=\"向 GitHub 提交代码时触发自动构建\"></a>向 GitHub 提交代码时触发自动构建</h2><p>需要在 GitHub 对应项目上配置 Webhooks。</p>\n<blockquote>\n<p>GitHub 项目 –&gt; Settings –&gt; Webhooks –&gt; Add webhooks</p>\n</blockquote>\n<p>如下图：填入 <code>Payload URL</code></p>\n<p><img src=\"/images/2019/09/22.png\" alt=\"image\"></p>\n<p><strong>解释：</strong> Webhook 是通知 Jenkins 时的请求地址，用来填写到 GitHub 上，这样 GitHub 就能通过该地址通知到 Jenkins；<br>假设 Jenkins 所在服务器的地址是：192.168.0.1，端口为8080，项目是 github-webhook，那么 Webhook 地址就是 <a href=\"http://192.168.0.1:8080/github-webhook。\" target=\"_blank\" rel=\"noopener\">http://192.168.0.1:8080/github-webhook。</a></p>\n<p><code>再次提醒，上述地址必须是外网也能访问的，否则GitHub无法访问到Jenkins。</code></p>\n<h2 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h2><p>至此配置已经完成，将 GitHub 上的项目克隆下来，修改某个文件提交，测试看 Jenkins 是否能自动构建。</p>\n<p><strong>Good Luck!</strong></p>\n<h2 id=\"推荐阅读\"><a href=\"#推荐阅读\" class=\"headerlink\" title=\"推荐阅读\"></a>推荐阅读</h2><ul>\n<li><a href=\"https://gojun.me/2019/09/23/jenkins-frp/\" target=\"_blank\" rel=\"noopener\">如何利用 frp 实现 Mac 的内网穿透</a></li>\n</ul>\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><ol>\n<li><a href=\"https://juejin.im/post/5b6a542b5188251a9e171bf2\" target=\"_blank\" rel=\"noopener\">这应该是最全的 Jenkins Android 自动打包构建教程</a></li>\n<li><a href=\"https://blog.csdn.net/ATangSir/article/details/71699403\" target=\"_blank\" rel=\"noopener\">MAC 上搭建Jenkins实现 Android 自动打包</a></li>\n<li><a href=\"https://blog.csdn.net/boling_cavalry/article/details/78943061\" target=\"_blank\" rel=\"noopener\">实战：向 GitHub 提交代码时触发 Jenkins 自动构建</a></li>\n<li><a href=\"https://blog.csdn.net/zengd0/article/details/79522253\" target=\"_blank\" rel=\"noopener\">搭建 frp 实现内网穿透</a></li>\n<li><a href=\"https://alphagao.com/2018/05/05/config-native-package-node-for-jenkins-server/\" target=\"_blank\" rel=\"noopener\">利用 frp 为 jenkins 配置内网打包节点</a></li>\n</ol>\n"},{"title":"如何利用 frp 实现 Mac 的内网穿透","date":"2019-09-23T13:34:48.000Z","_content":"\n这里服务端我用的是阿里云的轻量应用服务器，系统配置的 Ubuntu18.04；客户端是自己开发的 Mac 电脑。\n\n下面记录的是如何利用 frp 来实现本地的 web 端口可以使用外网来访问。\n\n## 服务端\n\n1. 下载并移动文件；\n```\nwget https://github.com/fatedier/frp/releases/download/v0.29.0/frp_0.29.0_linux_amd64.tar.gz\n# 如果系统未安装 wget，可以先安装 wget\nyum -y install wget\n\n# 解压 frp 包\ntar -zxvf frp_0.29.0_linux_amd64.tar.gz\n# 重新命名文件夹为 frp\nmv frp_0.29.0_linux_amd64 frp\n```\n2. 给运行文件赋予权限，并修改配置文件\n```\ncd frp\nchmod +x frps\n# 编辑服务器配置文件\nvim frps.ini\n```\n\n3. 以下为 frps.ini 配置\n```\n[common]\nbind_port = 7000\nauto_token=12345678\nvhost_http_port = 8080\nvhost_https_port = 443\n\ndashboard_port = 7500\n# dashboard 用户名密码，默认都为 admin\ndashboard_user = admin\ndashboard_pwd = admin\n```\n\n###  使用supervisor设置开机自启, 安装 supervisor\n\n```\napt-cache search supervisor\napt-get install supervisor\n```\n\n**安装 Supervisor 报错**\n\n```\nReading package lists... Done\nBuilding dependency tree       \nReading state information... Done\nE: Unable to locate package supervisor\n```\n查询资料后，发现是是apt需要更新\n```\nsudo apt-get update\n```\n\n8. 创建并编辑 frp.conf 设置开机自启\n```\ncd /etc/supervisor/conf.d/\ntouch frp.conf\nvim frp.conf\n\n# 以下为 frp.conf 配置\n[program:frp]\ncommand = /root/frp/frps -c /root/frp/frps.ini \nautostart = true\nautorestart = true\nstartsecs=0\n\n# systemctl 查看开机启动项\nsystemctl list-unit-files | grep supervisor\n```\n\n9. 访问 服务端ip:7500，查看服务端是否配置成功\n\n配置成功是可以看到\n\n如果访问不成功，阿里云服务器后台检查防火墙配置，需要添加刚才两个端口到规则里面\n\n![image](/images/2019/09/06.png)\n\n## 客户端\n\n客户端和服务端的版本号要一致，另外 Mac 下载的是 darwin_amd64 这个格式，[下载地址](https://github.com/fatedier/frp/releases/download/v0.29.0/frp_0.29.0_darwin_amd64.tar.gz)。\n\n1. 下载文件回来后通过命令解压并移动文件；\n```\n# 解压并移动文件夹\ntar zxvf frp_0.29.0_darwin_amd64.tar.gz\n# 在 /usr/local/bin 目录下创建一个 frpc 文件夹\nmkdir /usr/local/bin/frpc\n# 将刚才解压的文件内容移动\nmv frp_0.27.0_darwin_amd64/* /usr/local/bin/frpc\n# 删除压缩包\nrm -rf frp_0.29.0_darwin_amd64\n```\n\n2. 给运行文件权限，并编辑配置文件；\n```\ncd /usr/local/bin/frpc\n# 赋予权限\nchmod +x frpc\n# 修改配置文件\nvim frpc.ini\n```\n\n3. 下面为 frpc.ini 配置。\n```\n[common]\n# 这里修改为 frp 服务端的 ip 地址\nserver_addr = x.x.x.x\n# 与服务端绑定的进行通信的端口，跟服务端配置的端口一致\nserver_port = 7000\nauto_token = 123456\n\n[jenkins]\ntype = http\n# 本地映射的端口，比如开了个tomcat apache，端口为8080\nlocal_port = 8080\n# 域名必须要有，并解析到你的服务器地址\n# 记得域名要解析到服务器地址，否则会穿透失败\ncustom_domains = test.com\n```\n\n### 配置 frpc.plist 实现开机自启\n\n1. 创建开机自启文件并编辑；\n```\ntouch ~/Library/LaunchAgents/frpc.plist\nvim ~/Library/LaunchAgents/frpc.plist\n```\n2. 以下为 frpc.plist 配置；\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE plist PUBLIC -//Apple Computer//DTD PLIST 1.0//EN\nhttp://www.apple.com/DTDs/PropertyList-1.0.dtd >\n<plist version=\"1.0\">\n<dict>\n    <key>Label</key>\n    <string>frpc</string>\n    <key>ProgramArguments</key>\n    <array>\n         <string>/usr/local/bin/frpc/frpc</string>\n         <string>-c</string>\n         <string>/usr/local/bin/frpc/frpc.ini</string>\n    </array>\n    <key>KeepAlive</key>\n    <true/>\n    <key>RunAtLoad</key>\n    <true/>\n</dict>\n</plist>\n```\n\n3. 加载生效。\n```\n# 赋权限\nsudo chown root ~/Library/LaunchAgents/frpc.plist\n# 启动\nsudo launchctl load -w ~/Library/LaunchAgents/frpc.plist\n```\n\n## 测试\n验证是否穿透成功，在浏览器输入上文配置的域名，比如 test.com:8080 ，如果能访问即配置成功。\n\n## 参考资料\n\n* [搭建frp实现内网穿透](https://blog.csdn.net/zengd0/article/details/79522253)\n* [Mac 下使用 FRP 实现内网穿透](https://streamelody.github.io/2019/05/mac-frp-tutorial/)\n* [阿里DNS：DNS迁移到阿里云，这一篇就够了](https://zhuanlan.zhihu.com/p/42574259)\n* [阿里云 域名解析](https://dns.console.aliyun.com/#/dns/domainList)","source":"_posts/jenkins-frp.md","raw":"---\ntitle: 如何利用 frp 实现 Mac 的内网穿透\ndate: 2019-09-23 21:34:48\ntags: [Jenkins]\n---\n\n这里服务端我用的是阿里云的轻量应用服务器，系统配置的 Ubuntu18.04；客户端是自己开发的 Mac 电脑。\n\n下面记录的是如何利用 frp 来实现本地的 web 端口可以使用外网来访问。\n\n## 服务端\n\n1. 下载并移动文件；\n```\nwget https://github.com/fatedier/frp/releases/download/v0.29.0/frp_0.29.0_linux_amd64.tar.gz\n# 如果系统未安装 wget，可以先安装 wget\nyum -y install wget\n\n# 解压 frp 包\ntar -zxvf frp_0.29.0_linux_amd64.tar.gz\n# 重新命名文件夹为 frp\nmv frp_0.29.0_linux_amd64 frp\n```\n2. 给运行文件赋予权限，并修改配置文件\n```\ncd frp\nchmod +x frps\n# 编辑服务器配置文件\nvim frps.ini\n```\n\n3. 以下为 frps.ini 配置\n```\n[common]\nbind_port = 7000\nauto_token=12345678\nvhost_http_port = 8080\nvhost_https_port = 443\n\ndashboard_port = 7500\n# dashboard 用户名密码，默认都为 admin\ndashboard_user = admin\ndashboard_pwd = admin\n```\n\n###  使用supervisor设置开机自启, 安装 supervisor\n\n```\napt-cache search supervisor\napt-get install supervisor\n```\n\n**安装 Supervisor 报错**\n\n```\nReading package lists... Done\nBuilding dependency tree       \nReading state information... Done\nE: Unable to locate package supervisor\n```\n查询资料后，发现是是apt需要更新\n```\nsudo apt-get update\n```\n\n8. 创建并编辑 frp.conf 设置开机自启\n```\ncd /etc/supervisor/conf.d/\ntouch frp.conf\nvim frp.conf\n\n# 以下为 frp.conf 配置\n[program:frp]\ncommand = /root/frp/frps -c /root/frp/frps.ini \nautostart = true\nautorestart = true\nstartsecs=0\n\n# systemctl 查看开机启动项\nsystemctl list-unit-files | grep supervisor\n```\n\n9. 访问 服务端ip:7500，查看服务端是否配置成功\n\n配置成功是可以看到\n\n如果访问不成功，阿里云服务器后台检查防火墙配置，需要添加刚才两个端口到规则里面\n\n![image](/images/2019/09/06.png)\n\n## 客户端\n\n客户端和服务端的版本号要一致，另外 Mac 下载的是 darwin_amd64 这个格式，[下载地址](https://github.com/fatedier/frp/releases/download/v0.29.0/frp_0.29.0_darwin_amd64.tar.gz)。\n\n1. 下载文件回来后通过命令解压并移动文件；\n```\n# 解压并移动文件夹\ntar zxvf frp_0.29.0_darwin_amd64.tar.gz\n# 在 /usr/local/bin 目录下创建一个 frpc 文件夹\nmkdir /usr/local/bin/frpc\n# 将刚才解压的文件内容移动\nmv frp_0.27.0_darwin_amd64/* /usr/local/bin/frpc\n# 删除压缩包\nrm -rf frp_0.29.0_darwin_amd64\n```\n\n2. 给运行文件权限，并编辑配置文件；\n```\ncd /usr/local/bin/frpc\n# 赋予权限\nchmod +x frpc\n# 修改配置文件\nvim frpc.ini\n```\n\n3. 下面为 frpc.ini 配置。\n```\n[common]\n# 这里修改为 frp 服务端的 ip 地址\nserver_addr = x.x.x.x\n# 与服务端绑定的进行通信的端口，跟服务端配置的端口一致\nserver_port = 7000\nauto_token = 123456\n\n[jenkins]\ntype = http\n# 本地映射的端口，比如开了个tomcat apache，端口为8080\nlocal_port = 8080\n# 域名必须要有，并解析到你的服务器地址\n# 记得域名要解析到服务器地址，否则会穿透失败\ncustom_domains = test.com\n```\n\n### 配置 frpc.plist 实现开机自启\n\n1. 创建开机自启文件并编辑；\n```\ntouch ~/Library/LaunchAgents/frpc.plist\nvim ~/Library/LaunchAgents/frpc.plist\n```\n2. 以下为 frpc.plist 配置；\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE plist PUBLIC -//Apple Computer//DTD PLIST 1.0//EN\nhttp://www.apple.com/DTDs/PropertyList-1.0.dtd >\n<plist version=\"1.0\">\n<dict>\n    <key>Label</key>\n    <string>frpc</string>\n    <key>ProgramArguments</key>\n    <array>\n         <string>/usr/local/bin/frpc/frpc</string>\n         <string>-c</string>\n         <string>/usr/local/bin/frpc/frpc.ini</string>\n    </array>\n    <key>KeepAlive</key>\n    <true/>\n    <key>RunAtLoad</key>\n    <true/>\n</dict>\n</plist>\n```\n\n3. 加载生效。\n```\n# 赋权限\nsudo chown root ~/Library/LaunchAgents/frpc.plist\n# 启动\nsudo launchctl load -w ~/Library/LaunchAgents/frpc.plist\n```\n\n## 测试\n验证是否穿透成功，在浏览器输入上文配置的域名，比如 test.com:8080 ，如果能访问即配置成功。\n\n## 参考资料\n\n* [搭建frp实现内网穿透](https://blog.csdn.net/zengd0/article/details/79522253)\n* [Mac 下使用 FRP 实现内网穿透](https://streamelody.github.io/2019/05/mac-frp-tutorial/)\n* [阿里DNS：DNS迁移到阿里云，这一篇就够了](https://zhuanlan.zhihu.com/p/42574259)\n* [阿里云 域名解析](https://dns.console.aliyun.com/#/dns/domainList)","slug":"jenkins-frp","published":1,"updated":"2019-09-24T14:03:56.137Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cks0kficw001mw3yz6w58yil8","content":"<p>这里服务端我用的是阿里云的轻量应用服务器，系统配置的 Ubuntu18.04；客户端是自己开发的 Mac 电脑。</p>\n<p>下面记录的是如何利用 frp 来实现本地的 web 端口可以使用外网来访问。</p>\n<h2 id=\"服务端\"><a href=\"#服务端\" class=\"headerlink\" title=\"服务端\"></a>服务端</h2><ol>\n<li><p>下载并移动文件；</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://github.com/fatedier/frp/releases/download/v0.29.0/frp_0.29.0_linux_amd64.tar.gz</span><br><span class=\"line\"># 如果系统未安装 wget，可以先安装 wget</span><br><span class=\"line\">yum -y install wget</span><br><span class=\"line\"></span><br><span class=\"line\"># 解压 frp 包</span><br><span class=\"line\">tar -zxvf frp_0.29.0_linux_amd64.tar.gz</span><br><span class=\"line\"># 重新命名文件夹为 frp</span><br><span class=\"line\">mv frp_0.29.0_linux_amd64 frp</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>给运行文件赋予权限，并修改配置文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd frp</span><br><span class=\"line\">chmod +x frps</span><br><span class=\"line\"># 编辑服务器配置文件</span><br><span class=\"line\">vim frps.ini</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>以下为 frps.ini 配置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[common]</span><br><span class=\"line\">bind_port = 7000</span><br><span class=\"line\">auto_token=12345678</span><br><span class=\"line\">vhost_http_port = 8080</span><br><span class=\"line\">vhost_https_port = 443</span><br><span class=\"line\"></span><br><span class=\"line\">dashboard_port = 7500</span><br><span class=\"line\"># dashboard 用户名密码，默认都为 admin</span><br><span class=\"line\">dashboard_user = admin</span><br><span class=\"line\">dashboard_pwd = admin</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h3 id=\"使用supervisor设置开机自启-安装-supervisor\"><a href=\"#使用supervisor设置开机自启-安装-supervisor\" class=\"headerlink\" title=\"使用supervisor设置开机自启, 安装 supervisor\"></a>使用supervisor设置开机自启, 安装 supervisor</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt-cache search supervisor</span><br><span class=\"line\">apt-get install supervisor</span><br></pre></td></tr></table></figure>\n\n<p><strong>安装 Supervisor 报错</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Reading package lists... Done</span><br><span class=\"line\">Building dependency tree       </span><br><span class=\"line\">Reading state information... Done</span><br><span class=\"line\">E: Unable to locate package supervisor</span><br></pre></td></tr></table></figure>\n\n<p>查询资料后，发现是是apt需要更新</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get update</span><br></pre></td></tr></table></figure>\n\n<ol start=\"8\">\n<li><p>创建并编辑 frp.conf 设置开机自启</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /etc/supervisor/conf.d/</span><br><span class=\"line\">touch frp.conf</span><br><span class=\"line\">vim frp.conf</span><br><span class=\"line\"></span><br><span class=\"line\"># 以下为 frp.conf 配置</span><br><span class=\"line\">[program:frp]</span><br><span class=\"line\">command = /root/frp/frps -c /root/frp/frps.ini </span><br><span class=\"line\">autostart = true</span><br><span class=\"line\">autorestart = true</span><br><span class=\"line\">startsecs=0</span><br><span class=\"line\"></span><br><span class=\"line\"># systemctl 查看开机启动项</span><br><span class=\"line\">systemctl list-unit-files | grep supervisor</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>访问 服务端ip:7500，查看服务端是否配置成功</p>\n</li>\n</ol>\n<p>配置成功是可以看到</p>\n<p>如果访问不成功，阿里云服务器后台检查防火墙配置，需要添加刚才两个端口到规则里面</p>\n<p><img src=\"/images/2019/09/06.png\" alt=\"image\"></p>\n<h2 id=\"客户端\"><a href=\"#客户端\" class=\"headerlink\" title=\"客户端\"></a>客户端</h2><p>客户端和服务端的版本号要一致，另外 Mac 下载的是 darwin_amd64 这个格式，<a href=\"https://github.com/fatedier/frp/releases/download/v0.29.0/frp_0.29.0_darwin_amd64.tar.gz\" target=\"_blank\" rel=\"noopener\">下载地址</a>。</p>\n<ol>\n<li><p>下载文件回来后通过命令解压并移动文件；</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 解压并移动文件夹</span><br><span class=\"line\">tar zxvf frp_0.29.0_darwin_amd64.tar.gz</span><br><span class=\"line\"># 在 /usr/local/bin 目录下创建一个 frpc 文件夹</span><br><span class=\"line\">mkdir /usr/local/bin/frpc</span><br><span class=\"line\"># 将刚才解压的文件内容移动</span><br><span class=\"line\">mv frp_0.27.0_darwin_amd64/* /usr/local/bin/frpc</span><br><span class=\"line\"># 删除压缩包</span><br><span class=\"line\">rm -rf frp_0.29.0_darwin_amd64</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>给运行文件权限，并编辑配置文件；</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /usr/local/bin/frpc</span><br><span class=\"line\"># 赋予权限</span><br><span class=\"line\">chmod +x frpc</span><br><span class=\"line\"># 修改配置文件</span><br><span class=\"line\">vim frpc.ini</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>下面为 frpc.ini 配置。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[common]</span><br><span class=\"line\"># 这里修改为 frp 服务端的 ip 地址</span><br><span class=\"line\">server_addr = x.x.x.x</span><br><span class=\"line\"># 与服务端绑定的进行通信的端口，跟服务端配置的端口一致</span><br><span class=\"line\">server_port = 7000</span><br><span class=\"line\">auto_token = 123456</span><br><span class=\"line\"></span><br><span class=\"line\">[jenkins]</span><br><span class=\"line\">type = http</span><br><span class=\"line\"># 本地映射的端口，比如开了个tomcat apache，端口为8080</span><br><span class=\"line\">local_port = 8080</span><br><span class=\"line\"># 域名必须要有，并解析到你的服务器地址</span><br><span class=\"line\"># 记得域名要解析到服务器地址，否则会穿透失败</span><br><span class=\"line\">custom_domains = test.com</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h3 id=\"配置-frpc-plist-实现开机自启\"><a href=\"#配置-frpc-plist-实现开机自启\" class=\"headerlink\" title=\"配置 frpc.plist 实现开机自启\"></a>配置 frpc.plist 实现开机自启</h3><ol>\n<li><p>创建开机自启文件并编辑；</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">touch ~/Library/LaunchAgents/frpc.plist</span><br><span class=\"line\">vim ~/Library/LaunchAgents/frpc.plist</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>以下为 frpc.plist 配置；</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class=\"line\">&lt;!DOCTYPE plist PUBLIC -//Apple Computer//DTD PLIST 1.0//EN</span><br><span class=\"line\">http://www.apple.com/DTDs/PropertyList-1.0.dtd &gt;</span><br><span class=\"line\">&lt;plist version=&quot;1.0&quot;&gt;</span><br><span class=\"line\">&lt;dict&gt;</span><br><span class=\"line\">    &lt;key&gt;Label&lt;/key&gt;</span><br><span class=\"line\">    &lt;string&gt;frpc&lt;/string&gt;</span><br><span class=\"line\">    &lt;key&gt;ProgramArguments&lt;/key&gt;</span><br><span class=\"line\">    &lt;array&gt;</span><br><span class=\"line\">         &lt;string&gt;/usr/local/bin/frpc/frpc&lt;/string&gt;</span><br><span class=\"line\">         &lt;string&gt;-c&lt;/string&gt;</span><br><span class=\"line\">         &lt;string&gt;/usr/local/bin/frpc/frpc.ini&lt;/string&gt;</span><br><span class=\"line\">    &lt;/array&gt;</span><br><span class=\"line\">    &lt;key&gt;KeepAlive&lt;/key&gt;</span><br><span class=\"line\">    &lt;true/&gt;</span><br><span class=\"line\">    &lt;key&gt;RunAtLoad&lt;/key&gt;</span><br><span class=\"line\">    &lt;true/&gt;</span><br><span class=\"line\">&lt;/dict&gt;</span><br><span class=\"line\">&lt;/plist&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>加载生效。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 赋权限</span><br><span class=\"line\">sudo chown root ~/Library/LaunchAgents/frpc.plist</span><br><span class=\"line\"># 启动</span><br><span class=\"line\">sudo launchctl load -w ~/Library/LaunchAgents/frpc.plist</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h2 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h2><p>验证是否穿透成功，在浏览器输入上文配置的域名，比如 test.com:8080 ，如果能访问即配置成功。</p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li><a href=\"https://blog.csdn.net/zengd0/article/details/79522253\" target=\"_blank\" rel=\"noopener\">搭建frp实现内网穿透</a></li>\n<li><a href=\"https://streamelody.github.io/2019/05/mac-frp-tutorial/\" target=\"_blank\" rel=\"noopener\">Mac 下使用 FRP 实现内网穿透</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/42574259\" target=\"_blank\" rel=\"noopener\">阿里DNS：DNS迁移到阿里云，这一篇就够了</a></li>\n<li><a href=\"https://dns.console.aliyun.com/#/dns/domainList\" target=\"_blank\" rel=\"noopener\">阿里云 域名解析</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>这里服务端我用的是阿里云的轻量应用服务器，系统配置的 Ubuntu18.04；客户端是自己开发的 Mac 电脑。</p>\n<p>下面记录的是如何利用 frp 来实现本地的 web 端口可以使用外网来访问。</p>\n<h2 id=\"服务端\"><a href=\"#服务端\" class=\"headerlink\" title=\"服务端\"></a>服务端</h2><ol>\n<li><p>下载并移动文件；</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://github.com/fatedier/frp/releases/download/v0.29.0/frp_0.29.0_linux_amd64.tar.gz</span><br><span class=\"line\"># 如果系统未安装 wget，可以先安装 wget</span><br><span class=\"line\">yum -y install wget</span><br><span class=\"line\"></span><br><span class=\"line\"># 解压 frp 包</span><br><span class=\"line\">tar -zxvf frp_0.29.0_linux_amd64.tar.gz</span><br><span class=\"line\"># 重新命名文件夹为 frp</span><br><span class=\"line\">mv frp_0.29.0_linux_amd64 frp</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>给运行文件赋予权限，并修改配置文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd frp</span><br><span class=\"line\">chmod +x frps</span><br><span class=\"line\"># 编辑服务器配置文件</span><br><span class=\"line\">vim frps.ini</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>以下为 frps.ini 配置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[common]</span><br><span class=\"line\">bind_port = 7000</span><br><span class=\"line\">auto_token=12345678</span><br><span class=\"line\">vhost_http_port = 8080</span><br><span class=\"line\">vhost_https_port = 443</span><br><span class=\"line\"></span><br><span class=\"line\">dashboard_port = 7500</span><br><span class=\"line\"># dashboard 用户名密码，默认都为 admin</span><br><span class=\"line\">dashboard_user = admin</span><br><span class=\"line\">dashboard_pwd = admin</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h3 id=\"使用supervisor设置开机自启-安装-supervisor\"><a href=\"#使用supervisor设置开机自启-安装-supervisor\" class=\"headerlink\" title=\"使用supervisor设置开机自启, 安装 supervisor\"></a>使用supervisor设置开机自启, 安装 supervisor</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt-cache search supervisor</span><br><span class=\"line\">apt-get install supervisor</span><br></pre></td></tr></table></figure>\n\n<p><strong>安装 Supervisor 报错</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Reading package lists... Done</span><br><span class=\"line\">Building dependency tree       </span><br><span class=\"line\">Reading state information... Done</span><br><span class=\"line\">E: Unable to locate package supervisor</span><br></pre></td></tr></table></figure>\n\n<p>查询资料后，发现是是apt需要更新</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get update</span><br></pre></td></tr></table></figure>\n\n<ol start=\"8\">\n<li><p>创建并编辑 frp.conf 设置开机自启</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /etc/supervisor/conf.d/</span><br><span class=\"line\">touch frp.conf</span><br><span class=\"line\">vim frp.conf</span><br><span class=\"line\"></span><br><span class=\"line\"># 以下为 frp.conf 配置</span><br><span class=\"line\">[program:frp]</span><br><span class=\"line\">command = /root/frp/frps -c /root/frp/frps.ini </span><br><span class=\"line\">autostart = true</span><br><span class=\"line\">autorestart = true</span><br><span class=\"line\">startsecs=0</span><br><span class=\"line\"></span><br><span class=\"line\"># systemctl 查看开机启动项</span><br><span class=\"line\">systemctl list-unit-files | grep supervisor</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>访问 服务端ip:7500，查看服务端是否配置成功</p>\n</li>\n</ol>\n<p>配置成功是可以看到</p>\n<p>如果访问不成功，阿里云服务器后台检查防火墙配置，需要添加刚才两个端口到规则里面</p>\n<p><img src=\"/images/2019/09/06.png\" alt=\"image\"></p>\n<h2 id=\"客户端\"><a href=\"#客户端\" class=\"headerlink\" title=\"客户端\"></a>客户端</h2><p>客户端和服务端的版本号要一致，另外 Mac 下载的是 darwin_amd64 这个格式，<a href=\"https://github.com/fatedier/frp/releases/download/v0.29.0/frp_0.29.0_darwin_amd64.tar.gz\" target=\"_blank\" rel=\"noopener\">下载地址</a>。</p>\n<ol>\n<li><p>下载文件回来后通过命令解压并移动文件；</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 解压并移动文件夹</span><br><span class=\"line\">tar zxvf frp_0.29.0_darwin_amd64.tar.gz</span><br><span class=\"line\"># 在 /usr/local/bin 目录下创建一个 frpc 文件夹</span><br><span class=\"line\">mkdir /usr/local/bin/frpc</span><br><span class=\"line\"># 将刚才解压的文件内容移动</span><br><span class=\"line\">mv frp_0.27.0_darwin_amd64/* /usr/local/bin/frpc</span><br><span class=\"line\"># 删除压缩包</span><br><span class=\"line\">rm -rf frp_0.29.0_darwin_amd64</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>给运行文件权限，并编辑配置文件；</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /usr/local/bin/frpc</span><br><span class=\"line\"># 赋予权限</span><br><span class=\"line\">chmod +x frpc</span><br><span class=\"line\"># 修改配置文件</span><br><span class=\"line\">vim frpc.ini</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>下面为 frpc.ini 配置。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[common]</span><br><span class=\"line\"># 这里修改为 frp 服务端的 ip 地址</span><br><span class=\"line\">server_addr = x.x.x.x</span><br><span class=\"line\"># 与服务端绑定的进行通信的端口，跟服务端配置的端口一致</span><br><span class=\"line\">server_port = 7000</span><br><span class=\"line\">auto_token = 123456</span><br><span class=\"line\"></span><br><span class=\"line\">[jenkins]</span><br><span class=\"line\">type = http</span><br><span class=\"line\"># 本地映射的端口，比如开了个tomcat apache，端口为8080</span><br><span class=\"line\">local_port = 8080</span><br><span class=\"line\"># 域名必须要有，并解析到你的服务器地址</span><br><span class=\"line\"># 记得域名要解析到服务器地址，否则会穿透失败</span><br><span class=\"line\">custom_domains = test.com</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h3 id=\"配置-frpc-plist-实现开机自启\"><a href=\"#配置-frpc-plist-实现开机自启\" class=\"headerlink\" title=\"配置 frpc.plist 实现开机自启\"></a>配置 frpc.plist 实现开机自启</h3><ol>\n<li><p>创建开机自启文件并编辑；</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">touch ~/Library/LaunchAgents/frpc.plist</span><br><span class=\"line\">vim ~/Library/LaunchAgents/frpc.plist</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>以下为 frpc.plist 配置；</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class=\"line\">&lt;!DOCTYPE plist PUBLIC -//Apple Computer//DTD PLIST 1.0//EN</span><br><span class=\"line\">http://www.apple.com/DTDs/PropertyList-1.0.dtd &gt;</span><br><span class=\"line\">&lt;plist version=&quot;1.0&quot;&gt;</span><br><span class=\"line\">&lt;dict&gt;</span><br><span class=\"line\">    &lt;key&gt;Label&lt;/key&gt;</span><br><span class=\"line\">    &lt;string&gt;frpc&lt;/string&gt;</span><br><span class=\"line\">    &lt;key&gt;ProgramArguments&lt;/key&gt;</span><br><span class=\"line\">    &lt;array&gt;</span><br><span class=\"line\">         &lt;string&gt;/usr/local/bin/frpc/frpc&lt;/string&gt;</span><br><span class=\"line\">         &lt;string&gt;-c&lt;/string&gt;</span><br><span class=\"line\">         &lt;string&gt;/usr/local/bin/frpc/frpc.ini&lt;/string&gt;</span><br><span class=\"line\">    &lt;/array&gt;</span><br><span class=\"line\">    &lt;key&gt;KeepAlive&lt;/key&gt;</span><br><span class=\"line\">    &lt;true/&gt;</span><br><span class=\"line\">    &lt;key&gt;RunAtLoad&lt;/key&gt;</span><br><span class=\"line\">    &lt;true/&gt;</span><br><span class=\"line\">&lt;/dict&gt;</span><br><span class=\"line\">&lt;/plist&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>加载生效。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 赋权限</span><br><span class=\"line\">sudo chown root ~/Library/LaunchAgents/frpc.plist</span><br><span class=\"line\"># 启动</span><br><span class=\"line\">sudo launchctl load -w ~/Library/LaunchAgents/frpc.plist</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h2 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h2><p>验证是否穿透成功，在浏览器输入上文配置的域名，比如 test.com:8080 ，如果能访问即配置成功。</p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li><a href=\"https://blog.csdn.net/zengd0/article/details/79522253\" target=\"_blank\" rel=\"noopener\">搭建frp实现内网穿透</a></li>\n<li><a href=\"https://streamelody.github.io/2019/05/mac-frp-tutorial/\" target=\"_blank\" rel=\"noopener\">Mac 下使用 FRP 实现内网穿透</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/42574259\" target=\"_blank\" rel=\"noopener\">阿里DNS：DNS迁移到阿里云，这一篇就够了</a></li>\n<li><a href=\"https://dns.console.aliyun.com/#/dns/domainList\" target=\"_blank\" rel=\"noopener\">阿里云 域名解析</a></li>\n</ul>\n"},{"title":"Mac 使用 Crontab 定时工具","date":"2018-03-24T14:29:52.000Z","_content":"\n## 相关命令\n\n1. `sudo /usr/sbin/cron start` (启动)\n2. `sudo /usr/sbin/cron restart` (重启)\n3. `sudo /usr/sbin/cron stop` (停止)\n4. `sudo launchctl list | grep cron` (查看是否启动)\n5. `man crontab` (查看crontab命令的用法)\n6. `man 5 crontab` (查看crontab定时任务的格式)\n7. `sudo crontab -e` (进入编辑器，添加或修改定时任务)\n8. `sudo crontab -l` (查看已经添加的定时任务)\n\n## 添加定时任务\n\n``55 23 * * * python3 /Users/hugo/Development/GooglePlayReview/app_reviews.py``\n\n```\n$ sudo crontab -e\n# 此时会进入 vi 编辑器！注意到，每项工作都是一行。\n# 基本格式：* * * * * command \n0 12 * * * mail dmtsai -s \"at 12:00\" < /home/dmtsai/.bashrc\n#分 时 日 月 周 |<==============指令串========================>|\n$ sudo crontab -l\n# 查看已经添加的定时任务\n```\n\n前面五个参数(星号)代表的意义：\n\n意义 | 分钟 | 小时 | 日 | 月 | 星期\n-----|-----|------|------|------|----\n数字范文 | 0~59 | 0~23 | 1~31 | 1~12 | 0~7（0:周日)\n\n## Crontab 时区与系统不一致\n```\ncp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime \n\n```\n\n## 参考链接\n\n[OSX系统添加定时任务](https://honglu.me/2014/09/20/OSX%E7%B3%BB%E7%BB%9F%E6%B7%BB%E5%8A%A0%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/)\n[Mac中的定时任务利器：launchctl](https://www.jianshu.com/p/4addd9b455f2)\n[Mac 开启 crontab 定时任务调试](https://blog.csdn.net/biyongyao/article/details/77791238)\n\n","source":"_posts/mac-crontab.md","raw":"---\ntitle: Mac 使用 Crontab 定时工具\ndate: 2018-03-24 22:29:52\ntags: 工具\ncategories: 工具\n---\n\n## 相关命令\n\n1. `sudo /usr/sbin/cron start` (启动)\n2. `sudo /usr/sbin/cron restart` (重启)\n3. `sudo /usr/sbin/cron stop` (停止)\n4. `sudo launchctl list | grep cron` (查看是否启动)\n5. `man crontab` (查看crontab命令的用法)\n6. `man 5 crontab` (查看crontab定时任务的格式)\n7. `sudo crontab -e` (进入编辑器，添加或修改定时任务)\n8. `sudo crontab -l` (查看已经添加的定时任务)\n\n## 添加定时任务\n\n``55 23 * * * python3 /Users/hugo/Development/GooglePlayReview/app_reviews.py``\n\n```\n$ sudo crontab -e\n# 此时会进入 vi 编辑器！注意到，每项工作都是一行。\n# 基本格式：* * * * * command \n0 12 * * * mail dmtsai -s \"at 12:00\" < /home/dmtsai/.bashrc\n#分 时 日 月 周 |<==============指令串========================>|\n$ sudo crontab -l\n# 查看已经添加的定时任务\n```\n\n前面五个参数(星号)代表的意义：\n\n意义 | 分钟 | 小时 | 日 | 月 | 星期\n-----|-----|------|------|------|----\n数字范文 | 0~59 | 0~23 | 1~31 | 1~12 | 0~7（0:周日)\n\n## Crontab 时区与系统不一致\n```\ncp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime \n\n```\n\n## 参考链接\n\n[OSX系统添加定时任务](https://honglu.me/2014/09/20/OSX%E7%B3%BB%E7%BB%9F%E6%B7%BB%E5%8A%A0%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/)\n[Mac中的定时任务利器：launchctl](https://www.jianshu.com/p/4addd9b455f2)\n[Mac 开启 crontab 定时任务调试](https://blog.csdn.net/biyongyao/article/details/77791238)\n\n","slug":"mac-crontab","published":1,"updated":"2019-06-24T14:54:24.107Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cks0kficx001pw3yzi7njbo6m","content":"<h2 id=\"相关命令\"><a href=\"#相关命令\" class=\"headerlink\" title=\"相关命令\"></a>相关命令</h2><ol>\n<li><code>sudo /usr/sbin/cron start</code> (启动)</li>\n<li><code>sudo /usr/sbin/cron restart</code> (重启)</li>\n<li><code>sudo /usr/sbin/cron stop</code> (停止)</li>\n<li><code>sudo launchctl list | grep cron</code> (查看是否启动)</li>\n<li><code>man crontab</code> (查看crontab命令的用法)</li>\n<li><code>man 5 crontab</code> (查看crontab定时任务的格式)</li>\n<li><code>sudo crontab -e</code> (进入编辑器，添加或修改定时任务)</li>\n<li><code>sudo crontab -l</code> (查看已经添加的定时任务)</li>\n</ol>\n<h2 id=\"添加定时任务\"><a href=\"#添加定时任务\" class=\"headerlink\" title=\"添加定时任务\"></a>添加定时任务</h2><p><code>55 23 * * * python3 /Users/hugo/Development/GooglePlayReview/app_reviews.py</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo crontab -e</span><br><span class=\"line\"># 此时会进入 vi 编辑器！注意到，每项工作都是一行。</span><br><span class=\"line\"># 基本格式：* * * * * command </span><br><span class=\"line\">0 12 * * * mail dmtsai -s &quot;at 12:00&quot; &lt; /home/dmtsai/.bashrc</span><br><span class=\"line\">#分 时 日 月 周 |&lt;==============指令串========================&gt;|</span><br><span class=\"line\">$ sudo crontab -l</span><br><span class=\"line\"># 查看已经添加的定时任务</span><br></pre></td></tr></table></figure>\n\n<p>前面五个参数(星号)代表的意义：</p>\n<table>\n<thead>\n<tr>\n<th>意义</th>\n<th>分钟</th>\n<th>小时</th>\n<th>日</th>\n<th>月</th>\n<th>星期</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>数字范文</td>\n<td>0~59</td>\n<td>0~23</td>\n<td>1~31</td>\n<td>1~12</td>\n<td>0~7（0:周日)</td>\n</tr>\n</tbody></table>\n<h2 id=\"Crontab-时区与系统不一致\"><a href=\"#Crontab-时区与系统不一致\" class=\"headerlink\" title=\"Crontab 时区与系统不一致\"></a>Crontab 时区与系统不一致</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><p><a href=\"https://honglu.me/2014/09/20/OSX%E7%B3%BB%E7%BB%9F%E6%B7%BB%E5%8A%A0%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/\" target=\"_blank\" rel=\"noopener\">OSX系统添加定时任务</a><br><a href=\"https://www.jianshu.com/p/4addd9b455f2\" target=\"_blank\" rel=\"noopener\">Mac中的定时任务利器：launchctl</a><br><a href=\"https://blog.csdn.net/biyongyao/article/details/77791238\" target=\"_blank\" rel=\"noopener\">Mac 开启 crontab 定时任务调试</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"相关命令\"><a href=\"#相关命令\" class=\"headerlink\" title=\"相关命令\"></a>相关命令</h2><ol>\n<li><code>sudo /usr/sbin/cron start</code> (启动)</li>\n<li><code>sudo /usr/sbin/cron restart</code> (重启)</li>\n<li><code>sudo /usr/sbin/cron stop</code> (停止)</li>\n<li><code>sudo launchctl list | grep cron</code> (查看是否启动)</li>\n<li><code>man crontab</code> (查看crontab命令的用法)</li>\n<li><code>man 5 crontab</code> (查看crontab定时任务的格式)</li>\n<li><code>sudo crontab -e</code> (进入编辑器，添加或修改定时任务)</li>\n<li><code>sudo crontab -l</code> (查看已经添加的定时任务)</li>\n</ol>\n<h2 id=\"添加定时任务\"><a href=\"#添加定时任务\" class=\"headerlink\" title=\"添加定时任务\"></a>添加定时任务</h2><p><code>55 23 * * * python3 /Users/hugo/Development/GooglePlayReview/app_reviews.py</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo crontab -e</span><br><span class=\"line\"># 此时会进入 vi 编辑器！注意到，每项工作都是一行。</span><br><span class=\"line\"># 基本格式：* * * * * command </span><br><span class=\"line\">0 12 * * * mail dmtsai -s &quot;at 12:00&quot; &lt; /home/dmtsai/.bashrc</span><br><span class=\"line\">#分 时 日 月 周 |&lt;==============指令串========================&gt;|</span><br><span class=\"line\">$ sudo crontab -l</span><br><span class=\"line\"># 查看已经添加的定时任务</span><br></pre></td></tr></table></figure>\n\n<p>前面五个参数(星号)代表的意义：</p>\n<table>\n<thead>\n<tr>\n<th>意义</th>\n<th>分钟</th>\n<th>小时</th>\n<th>日</th>\n<th>月</th>\n<th>星期</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>数字范文</td>\n<td>0~59</td>\n<td>0~23</td>\n<td>1~31</td>\n<td>1~12</td>\n<td>0~7（0:周日)</td>\n</tr>\n</tbody></table>\n<h2 id=\"Crontab-时区与系统不一致\"><a href=\"#Crontab-时区与系统不一致\" class=\"headerlink\" title=\"Crontab 时区与系统不一致\"></a>Crontab 时区与系统不一致</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><p><a href=\"https://honglu.me/2014/09/20/OSX%E7%B3%BB%E7%BB%9F%E6%B7%BB%E5%8A%A0%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/\" target=\"_blank\" rel=\"noopener\">OSX系统添加定时任务</a><br><a href=\"https://www.jianshu.com/p/4addd9b455f2\" target=\"_blank\" rel=\"noopener\">Mac中的定时任务利器：launchctl</a><br><a href=\"https://blog.csdn.net/biyongyao/article/details/77791238\" target=\"_blank\" rel=\"noopener\">Mac 开启 crontab 定时任务调试</a></p>\n"},{"title":"Mac 如何让终端使用代理","date":"2020-05-10T15:23:29.000Z","_content":"\n### 前提\n\niTerm2 终端使用的是 zsh 命令，翻墙代理工具使用 Surge2。\n\n### 步骤\n\n\n1. 在 surge2 复制终端代理命令\n\n![image](/images/2020/05/mac-terminal-proxy-01.png)\n\n得到：\n```\nexport https_proxy=http://127.0.0.1:1080;export http_proxy=http://127.0.0.1:1080;export all_proxy=socks5://127.0.0.1:1081\n```\n\n2. 编辑 .zshrc 文件\n```\nvim ~/.zshrc\n```\n\n3. 在文件最后添加以下信息\n\n```\n# proxy list\nalias proxy='export https_proxy=http://127.0.0.1:1080;export http_proxy=http://127.0.0.1:1080;export all_proxy=socks5://127.0.0.1:1081'\nalias unproxy='unset all_proxy'\n```\n\n4. 保存退出，应用文件修改内容\n\n```\nsource ~/.zshrc\n```\n\n5. 开启使用代理模式\n\n```\nproxy\n```\n\n6. 确定终端是否走代理\n\n```\ncurl cip.cc\n```\n\n6. 关闭使用代理模式\n\n```\nunproxy\n```\n","source":"_posts/mac-terminal-proxy.md","raw":"---\ntitle: Mac 如何让终端使用代理\ndate: 2020-05-10 23:23:29\ntags: [工具,终端,代理,翻墙,VPN]\ncategories: VPN\n---\n\n### 前提\n\niTerm2 终端使用的是 zsh 命令，翻墙代理工具使用 Surge2。\n\n### 步骤\n\n\n1. 在 surge2 复制终端代理命令\n\n![image](/images/2020/05/mac-terminal-proxy-01.png)\n\n得到：\n```\nexport https_proxy=http://127.0.0.1:1080;export http_proxy=http://127.0.0.1:1080;export all_proxy=socks5://127.0.0.1:1081\n```\n\n2. 编辑 .zshrc 文件\n```\nvim ~/.zshrc\n```\n\n3. 在文件最后添加以下信息\n\n```\n# proxy list\nalias proxy='export https_proxy=http://127.0.0.1:1080;export http_proxy=http://127.0.0.1:1080;export all_proxy=socks5://127.0.0.1:1081'\nalias unproxy='unset all_proxy'\n```\n\n4. 保存退出，应用文件修改内容\n\n```\nsource ~/.zshrc\n```\n\n5. 开启使用代理模式\n\n```\nproxy\n```\n\n6. 确定终端是否走代理\n\n```\ncurl cip.cc\n```\n\n6. 关闭使用代理模式\n\n```\nunproxy\n```\n","slug":"mac-terminal-proxy","published":1,"updated":"2020-11-27T15:32:46.346Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cks0kficz001tw3yz9nycofwl","content":"<h3 id=\"前提\"><a href=\"#前提\" class=\"headerlink\" title=\"前提\"></a>前提</h3><p>iTerm2 终端使用的是 zsh 命令，翻墙代理工具使用 Surge2。</p>\n<h3 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h3><ol>\n<li>在 surge2 复制终端代理命令</li>\n</ol>\n<p><img src=\"/images/2020/05/mac-terminal-proxy-01.png\" alt=\"image\"></p>\n<p>得到：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export https_proxy=http://127.0.0.1:1080;export http_proxy=http://127.0.0.1:1080;export all_proxy=socks5://127.0.0.1:1081</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li><p>编辑 .zshrc 文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim ~/.zshrc</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在文件最后添加以下信息</p>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># proxy list</span><br><span class=\"line\">alias proxy=&apos;export https_proxy=http://127.0.0.1:1080;export http_proxy=http://127.0.0.1:1080;export all_proxy=socks5://127.0.0.1:1081&apos;</span><br><span class=\"line\">alias unproxy=&apos;unset all_proxy&apos;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>保存退出，应用文件修改内容</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source ~/.zshrc</span><br></pre></td></tr></table></figure>\n\n<ol start=\"5\">\n<li>开启使用代理模式</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">proxy</span><br></pre></td></tr></table></figure>\n\n<ol start=\"6\">\n<li>确定终端是否走代理</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl cip.cc</span><br></pre></td></tr></table></figure>\n\n<ol start=\"6\">\n<li>关闭使用代理模式</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">unproxy</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"前提\"><a href=\"#前提\" class=\"headerlink\" title=\"前提\"></a>前提</h3><p>iTerm2 终端使用的是 zsh 命令，翻墙代理工具使用 Surge2。</p>\n<h3 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h3><ol>\n<li>在 surge2 复制终端代理命令</li>\n</ol>\n<p><img src=\"/images/2020/05/mac-terminal-proxy-01.png\" alt=\"image\"></p>\n<p>得到：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export https_proxy=http://127.0.0.1:1080;export http_proxy=http://127.0.0.1:1080;export all_proxy=socks5://127.0.0.1:1081</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li><p>编辑 .zshrc 文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim ~/.zshrc</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在文件最后添加以下信息</p>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># proxy list</span><br><span class=\"line\">alias proxy=&apos;export https_proxy=http://127.0.0.1:1080;export http_proxy=http://127.0.0.1:1080;export all_proxy=socks5://127.0.0.1:1081&apos;</span><br><span class=\"line\">alias unproxy=&apos;unset all_proxy&apos;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>保存退出，应用文件修改内容</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source ~/.zshrc</span><br></pre></td></tr></table></figure>\n\n<ol start=\"5\">\n<li>开启使用代理模式</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">proxy</span><br></pre></td></tr></table></figure>\n\n<ol start=\"6\">\n<li>确定终端是否走代理</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl cip.cc</span><br></pre></td></tr></table></figure>\n\n<ol start=\"6\">\n<li>关闭使用代理模式</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">unproxy</span><br></pre></td></tr></table></figure>\n\n"},{"title":"使用 Python3 对在 Play 商店应用的评论爬取调研","date":"2018-03-01T16:06:26.000Z","_content":"\n## 背景/需求\n\n## 背景/需求\n\n方便团队方便查看每天收到来自 Play 商店用户的评论，及时从用户的反馈中发现问题，故写个脚本每天定时爬取评论数据，并且进行统计，爬取到的数据存进数据，后面提供接口给前端开发页面进行展示。\n\n两个数据表：\n1. 评论明细表（评论时间，评论内容，设备信息等）\n2. 评论汇总统计(每天有多少1星，多少2星等)\n\n## 调研\n\n### 方式一\n\n使用官方 Api 接口进行抓取，经查看文档，文档提到接口请求得到的数据不是实时的，获取到的数据不是最新，延迟了两天数据，没法拿到最新一天的评论因此放弃该方式。\n\n相关链接：  \nhttps://developers.google.com/android-publisher/api-ref/reviews/list  \nhttps://stackoverflow.com/questions/11348025/api-to-get-android-google-play-reviewsgetting-device-name-and-app-version\n\n### 方式二\n\n网上查找下有没有 demo，在 GitHub 上面找到一个例子。\n\n相关链接：https://github.com/amrrs/Google-Play-Store-Review-Extractor\n\n查看源码不符合需求。\n\n### 方式三\n\n试图从google应用商店入手，发现商店上面的评论并不是实时的，而且貌似是会根据访问的 ip 是什么来返回评论数据，并且提供的筛选功能不能满足我们的需求。\n\n### 方式四\n\n从应用后台入手，只有后台的评论数据才是实时的，并具备满足我们要求的筛选，以及统计数据。可以使用 Python 中的无头浏览器进行爬取。\n\n\n## 最后\n\n使用``方式四``完成需求\n\n大概步骤：\n\n1. 设置代理\n2. 模拟登陆 Google 发布应用后台\n3. 进入评价模块\n4. 开始抓取评论数据\n5. 解析评论数据\n6. 数据进库\n\n","source":"_posts/play-reviews-research.md","raw":"---\ntitle: 使用 Python3 对在 Play 商店应用的评论爬取调研\ndate: 2018-03-02 00:06:26\ntags: [爬虫, Python]\ncategories: Python\n---\n\n## 背景/需求\n\n## 背景/需求\n\n方便团队方便查看每天收到来自 Play 商店用户的评论，及时从用户的反馈中发现问题，故写个脚本每天定时爬取评论数据，并且进行统计，爬取到的数据存进数据，后面提供接口给前端开发页面进行展示。\n\n两个数据表：\n1. 评论明细表（评论时间，评论内容，设备信息等）\n2. 评论汇总统计(每天有多少1星，多少2星等)\n\n## 调研\n\n### 方式一\n\n使用官方 Api 接口进行抓取，经查看文档，文档提到接口请求得到的数据不是实时的，获取到的数据不是最新，延迟了两天数据，没法拿到最新一天的评论因此放弃该方式。\n\n相关链接：  \nhttps://developers.google.com/android-publisher/api-ref/reviews/list  \nhttps://stackoverflow.com/questions/11348025/api-to-get-android-google-play-reviewsgetting-device-name-and-app-version\n\n### 方式二\n\n网上查找下有没有 demo，在 GitHub 上面找到一个例子。\n\n相关链接：https://github.com/amrrs/Google-Play-Store-Review-Extractor\n\n查看源码不符合需求。\n\n### 方式三\n\n试图从google应用商店入手，发现商店上面的评论并不是实时的，而且貌似是会根据访问的 ip 是什么来返回评论数据，并且提供的筛选功能不能满足我们的需求。\n\n### 方式四\n\n从应用后台入手，只有后台的评论数据才是实时的，并具备满足我们要求的筛选，以及统计数据。可以使用 Python 中的无头浏览器进行爬取。\n\n\n## 最后\n\n使用``方式四``完成需求\n\n大概步骤：\n\n1. 设置代理\n2. 模拟登陆 Google 发布应用后台\n3. 进入评价模块\n4. 开始抓取评论数据\n5. 解析评论数据\n6. 数据进库\n\n","slug":"play-reviews-research","published":1,"updated":"2019-06-26T16:11:12.044Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cks0kfid0001ww3yz3m732j1e","content":"<h2 id=\"背景-需求\"><a href=\"#背景-需求\" class=\"headerlink\" title=\"背景/需求\"></a>背景/需求</h2><h2 id=\"背景-需求-1\"><a href=\"#背景-需求-1\" class=\"headerlink\" title=\"背景/需求\"></a>背景/需求</h2><p>方便团队方便查看每天收到来自 Play 商店用户的评论，及时从用户的反馈中发现问题，故写个脚本每天定时爬取评论数据，并且进行统计，爬取到的数据存进数据，后面提供接口给前端开发页面进行展示。</p>\n<p>两个数据表：</p>\n<ol>\n<li>评论明细表（评论时间，评论内容，设备信息等）</li>\n<li>评论汇总统计(每天有多少1星，多少2星等)</li>\n</ol>\n<h2 id=\"调研\"><a href=\"#调研\" class=\"headerlink\" title=\"调研\"></a>调研</h2><h3 id=\"方式一\"><a href=\"#方式一\" class=\"headerlink\" title=\"方式一\"></a>方式一</h3><p>使用官方 Api 接口进行抓取，经查看文档，文档提到接口请求得到的数据不是实时的，获取到的数据不是最新，延迟了两天数据，没法拿到最新一天的评论因此放弃该方式。</p>\n<p>相关链接：<br><a href=\"https://developers.google.com/android-publisher/api-ref/reviews/list\" target=\"_blank\" rel=\"noopener\">https://developers.google.com/android-publisher/api-ref/reviews/list</a><br><a href=\"https://stackoverflow.com/questions/11348025/api-to-get-android-google-play-reviewsgetting-device-name-and-app-version\" target=\"_blank\" rel=\"noopener\">https://stackoverflow.com/questions/11348025/api-to-get-android-google-play-reviewsgetting-device-name-and-app-version</a></p>\n<h3 id=\"方式二\"><a href=\"#方式二\" class=\"headerlink\" title=\"方式二\"></a>方式二</h3><p>网上查找下有没有 demo，在 GitHub 上面找到一个例子。</p>\n<p>相关链接：<a href=\"https://github.com/amrrs/Google-Play-Store-Review-Extractor\" target=\"_blank\" rel=\"noopener\">https://github.com/amrrs/Google-Play-Store-Review-Extractor</a></p>\n<p>查看源码不符合需求。</p>\n<h3 id=\"方式三\"><a href=\"#方式三\" class=\"headerlink\" title=\"方式三\"></a>方式三</h3><p>试图从google应用商店入手，发现商店上面的评论并不是实时的，而且貌似是会根据访问的 ip 是什么来返回评论数据，并且提供的筛选功能不能满足我们的需求。</p>\n<h3 id=\"方式四\"><a href=\"#方式四\" class=\"headerlink\" title=\"方式四\"></a>方式四</h3><p>从应用后台入手，只有后台的评论数据才是实时的，并具备满足我们要求的筛选，以及统计数据。可以使用 Python 中的无头浏览器进行爬取。</p>\n<h2 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h2><p>使用<code>方式四</code>完成需求</p>\n<p>大概步骤：</p>\n<ol>\n<li>设置代理</li>\n<li>模拟登陆 Google 发布应用后台</li>\n<li>进入评价模块</li>\n<li>开始抓取评论数据</li>\n<li>解析评论数据</li>\n<li>数据进库</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"背景-需求\"><a href=\"#背景-需求\" class=\"headerlink\" title=\"背景/需求\"></a>背景/需求</h2><h2 id=\"背景-需求-1\"><a href=\"#背景-需求-1\" class=\"headerlink\" title=\"背景/需求\"></a>背景/需求</h2><p>方便团队方便查看每天收到来自 Play 商店用户的评论，及时从用户的反馈中发现问题，故写个脚本每天定时爬取评论数据，并且进行统计，爬取到的数据存进数据，后面提供接口给前端开发页面进行展示。</p>\n<p>两个数据表：</p>\n<ol>\n<li>评论明细表（评论时间，评论内容，设备信息等）</li>\n<li>评论汇总统计(每天有多少1星，多少2星等)</li>\n</ol>\n<h2 id=\"调研\"><a href=\"#调研\" class=\"headerlink\" title=\"调研\"></a>调研</h2><h3 id=\"方式一\"><a href=\"#方式一\" class=\"headerlink\" title=\"方式一\"></a>方式一</h3><p>使用官方 Api 接口进行抓取，经查看文档，文档提到接口请求得到的数据不是实时的，获取到的数据不是最新，延迟了两天数据，没法拿到最新一天的评论因此放弃该方式。</p>\n<p>相关链接：<br><a href=\"https://developers.google.com/android-publisher/api-ref/reviews/list\" target=\"_blank\" rel=\"noopener\">https://developers.google.com/android-publisher/api-ref/reviews/list</a><br><a href=\"https://stackoverflow.com/questions/11348025/api-to-get-android-google-play-reviewsgetting-device-name-and-app-version\" target=\"_blank\" rel=\"noopener\">https://stackoverflow.com/questions/11348025/api-to-get-android-google-play-reviewsgetting-device-name-and-app-version</a></p>\n<h3 id=\"方式二\"><a href=\"#方式二\" class=\"headerlink\" title=\"方式二\"></a>方式二</h3><p>网上查找下有没有 demo，在 GitHub 上面找到一个例子。</p>\n<p>相关链接：<a href=\"https://github.com/amrrs/Google-Play-Store-Review-Extractor\" target=\"_blank\" rel=\"noopener\">https://github.com/amrrs/Google-Play-Store-Review-Extractor</a></p>\n<p>查看源码不符合需求。</p>\n<h3 id=\"方式三\"><a href=\"#方式三\" class=\"headerlink\" title=\"方式三\"></a>方式三</h3><p>试图从google应用商店入手，发现商店上面的评论并不是实时的，而且貌似是会根据访问的 ip 是什么来返回评论数据，并且提供的筛选功能不能满足我们的需求。</p>\n<h3 id=\"方式四\"><a href=\"#方式四\" class=\"headerlink\" title=\"方式四\"></a>方式四</h3><p>从应用后台入手，只有后台的评论数据才是实时的，并具备满足我们要求的筛选，以及统计数据。可以使用 Python 中的无头浏览器进行爬取。</p>\n<h2 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h2><p>使用<code>方式四</code>完成需求</p>\n<p>大概步骤：</p>\n<ol>\n<li>设置代理</li>\n<li>模拟登陆 Google 发布应用后台</li>\n<li>进入评价模块</li>\n<li>开始抓取评论数据</li>\n<li>解析评论数据</li>\n<li>数据进库</li>\n</ol>\n"},{"title":"使用 Python3 爬取 Play 商店后台评论笔记记录","date":"2018-03-13T15:27:22.000Z","_content":"\n### Python selenium 三种等待方式\n\n学习链接：https://huilansame.github.io/huilansame.github.io/archivers/sleep-implicitlywait-wait\n\n项目使用以下方式\n```\n# -*- coding: utf-8 -*-\nfrom selenium import webdriver\nfrom selenium.webdriver.support.wait import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nfrom selenium.webdriver.common.by import By\n\ndriver = webdriver.Firefox()\ndriver.implicitly_wait(10)  # 隐性等待和显性等待可以同时用，但要注意：等待的最长时间取两者之中的大者\ndriver.get('https://huilansame.github.io')\nlocator = (By.LINK_TEXT, 'CSDN')\n\ntry:\n    WebDriverWait(driver, 20, 0.5).until(EC.presence_of_element_located(locator))\n    print driver.find_element_by_link_text('CSDN').get_attribute('href')\nfinally:\n    driver.close()\n    \n```\n\n### Python 遍历 list\n学习链接：https://blog.csdn.net/baidu_24545901/article/details/78729309\n\n采用的方式：\n```\ntemp = [{'h': 'u'}, {'h': 'a'}, {'h': 'u'}]\n    for i, val in enumerate(temp):\n        print(val['h'])\n```\n\n### Python3 词典数组操作\n\n学习链接：https://blog.csdn.net/dance117/article/details/80304238\n\n**定义一个空的词典数组**\n```\nreview_data = {}\n```\n**增加**\n```\nreview_data['review_content'] = 'very good'\nreview_data['review_rating'] = 5\n\nprint(review_data)\n\n{'review_content':'very good', 'review_rating': 5}\n```\n\n**删除**\n```\nreview_data['review_content'] = 'very good'\n# 指定删除\ndel review_data['review_content']\n# 全部删除\nreview_data.clear()\n# 删除指定 key，且返回删除的key的值\nreview_data.pop('review_content')\n```\n\n**修改**\n```\n# 给指定的key重新赋值修改\nreview_data['name'] = 'jun'\n\n# 使用 update() 方法\n# 无重复key，相当于新插入\nreview_data = {'name': 'jun'}\nreview_data.update({'rating': 5})\nprint(review_data)  ---->   {'name': 'jun', 'rating': 5}\n\n# 重复key，会覆盖旧的值\nreview_data = {'name': 'jun'}\nreview_data.update({'name': 'jun'})\n\nprint(review_data)  ---->   {'name': 'jun'}\n```\n\n**查询**\n```\nreview_data = {'name': 'jun'}\nreivew_data['name']\n```\n\n**两个字典合并**\n```\ndic1 = {'name': 'jun'}\ndic2 = {'age': '18'}\n\ndic1.update(dic2)\nprint(dic1)  ----> {'name': 'jun', 'age': '18'}\n```\n\n\n### 表格处理\n\n官方文档：https://docs.python.org/3/library/csv.html  \n参考链接：https://python3-cookbook.readthedocs.io/zh_CN/latest/c06/p01_read_write_csv_data.html\n\n**读取表格数据**\n```\nwith open('/Users/apple/Desktop/review.csv', newline='') as c:\n    reader = csv.reader(c)\n    for r in reader:\n        print(r)\n```\n\n**写入数据**\n\n```\n# encoding='utf-8-sig' 防止写入中文乱码\nwith open('/Users/apple/Desktop/review.csv', 'w', newline='', encoding='utf-8-sig') as c:\n    headers = ['Symbol', 'Price', 'Date', 'Time', 'Change', 'Volume']\n    rows = [{'Symbol': 'AA', 'Price': 39.48, 'Date': '6/11/2007',\n             'Time': '9:36am', 'Change': -0.18, 'Volume': 181800},\n            {'Symbol': 'AIG', 'Price': 71.38, 'Date': '6/11/2007',\n             'Time': '9:36am', 'Change': -0.15, 'Volume': 195500},\n            {'Symbol': 'AXP', 'Price': 62.58, 'Date': '6/11/2007',\n             'Time': '9:36am', 'Change': -0.46, 'Volume': 935000},\n            ]\n    c_w = csv.DictWriter(c, headers)\n    c_w.writeheader()\n    c_w.writerows(rows)\n```\n","source":"_posts/python-learn.md","raw":"---\ntitle: 使用 Python3 爬取 Play 商店后台评论笔记记录\ndate: 2018-03-13 23:27:22\ntags: [Python,爬虫]\ncategories: Python\n---\n\n### Python selenium 三种等待方式\n\n学习链接：https://huilansame.github.io/huilansame.github.io/archivers/sleep-implicitlywait-wait\n\n项目使用以下方式\n```\n# -*- coding: utf-8 -*-\nfrom selenium import webdriver\nfrom selenium.webdriver.support.wait import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nfrom selenium.webdriver.common.by import By\n\ndriver = webdriver.Firefox()\ndriver.implicitly_wait(10)  # 隐性等待和显性等待可以同时用，但要注意：等待的最长时间取两者之中的大者\ndriver.get('https://huilansame.github.io')\nlocator = (By.LINK_TEXT, 'CSDN')\n\ntry:\n    WebDriverWait(driver, 20, 0.5).until(EC.presence_of_element_located(locator))\n    print driver.find_element_by_link_text('CSDN').get_attribute('href')\nfinally:\n    driver.close()\n    \n```\n\n### Python 遍历 list\n学习链接：https://blog.csdn.net/baidu_24545901/article/details/78729309\n\n采用的方式：\n```\ntemp = [{'h': 'u'}, {'h': 'a'}, {'h': 'u'}]\n    for i, val in enumerate(temp):\n        print(val['h'])\n```\n\n### Python3 词典数组操作\n\n学习链接：https://blog.csdn.net/dance117/article/details/80304238\n\n**定义一个空的词典数组**\n```\nreview_data = {}\n```\n**增加**\n```\nreview_data['review_content'] = 'very good'\nreview_data['review_rating'] = 5\n\nprint(review_data)\n\n{'review_content':'very good', 'review_rating': 5}\n```\n\n**删除**\n```\nreview_data['review_content'] = 'very good'\n# 指定删除\ndel review_data['review_content']\n# 全部删除\nreview_data.clear()\n# 删除指定 key，且返回删除的key的值\nreview_data.pop('review_content')\n```\n\n**修改**\n```\n# 给指定的key重新赋值修改\nreview_data['name'] = 'jun'\n\n# 使用 update() 方法\n# 无重复key，相当于新插入\nreview_data = {'name': 'jun'}\nreview_data.update({'rating': 5})\nprint(review_data)  ---->   {'name': 'jun', 'rating': 5}\n\n# 重复key，会覆盖旧的值\nreview_data = {'name': 'jun'}\nreview_data.update({'name': 'jun'})\n\nprint(review_data)  ---->   {'name': 'jun'}\n```\n\n**查询**\n```\nreview_data = {'name': 'jun'}\nreivew_data['name']\n```\n\n**两个字典合并**\n```\ndic1 = {'name': 'jun'}\ndic2 = {'age': '18'}\n\ndic1.update(dic2)\nprint(dic1)  ----> {'name': 'jun', 'age': '18'}\n```\n\n\n### 表格处理\n\n官方文档：https://docs.python.org/3/library/csv.html  \n参考链接：https://python3-cookbook.readthedocs.io/zh_CN/latest/c06/p01_read_write_csv_data.html\n\n**读取表格数据**\n```\nwith open('/Users/apple/Desktop/review.csv', newline='') as c:\n    reader = csv.reader(c)\n    for r in reader:\n        print(r)\n```\n\n**写入数据**\n\n```\n# encoding='utf-8-sig' 防止写入中文乱码\nwith open('/Users/apple/Desktop/review.csv', 'w', newline='', encoding='utf-8-sig') as c:\n    headers = ['Symbol', 'Price', 'Date', 'Time', 'Change', 'Volume']\n    rows = [{'Symbol': 'AA', 'Price': 39.48, 'Date': '6/11/2007',\n             'Time': '9:36am', 'Change': -0.18, 'Volume': 181800},\n            {'Symbol': 'AIG', 'Price': 71.38, 'Date': '6/11/2007',\n             'Time': '9:36am', 'Change': -0.15, 'Volume': 195500},\n            {'Symbol': 'AXP', 'Price': 62.58, 'Date': '6/11/2007',\n             'Time': '9:36am', 'Change': -0.46, 'Volume': 935000},\n            ]\n    c_w = csv.DictWriter(c, headers)\n    c_w.writeheader()\n    c_w.writerows(rows)\n```\n","slug":"python-learn","published":1,"updated":"2019-07-02T16:09:14.768Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cks0kfid1001yw3yzhe4a0h88","content":"<h3 id=\"Python-selenium-三种等待方式\"><a href=\"#Python-selenium-三种等待方式\" class=\"headerlink\" title=\"Python selenium 三种等待方式\"></a>Python selenium 三种等待方式</h3><p>学习链接：<a href=\"https://huilansame.github.io/huilansame.github.io/archivers/sleep-implicitlywait-wait\" target=\"_blank\" rel=\"noopener\">https://huilansame.github.io/huilansame.github.io/archivers/sleep-implicitlywait-wait</a></p>\n<p>项目使用以下方式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># -*- coding: utf-8 -*-</span><br><span class=\"line\">from selenium import webdriver</span><br><span class=\"line\">from selenium.webdriver.support.wait import WebDriverWait</span><br><span class=\"line\">from selenium.webdriver.support import expected_conditions as EC</span><br><span class=\"line\">from selenium.webdriver.common.by import By</span><br><span class=\"line\"></span><br><span class=\"line\">driver = webdriver.Firefox()</span><br><span class=\"line\">driver.implicitly_wait(10)  # 隐性等待和显性等待可以同时用，但要注意：等待的最长时间取两者之中的大者</span><br><span class=\"line\">driver.get(&apos;https://huilansame.github.io&apos;)</span><br><span class=\"line\">locator = (By.LINK_TEXT, &apos;CSDN&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">try:</span><br><span class=\"line\">    WebDriverWait(driver, 20, 0.5).until(EC.presence_of_element_located(locator))</span><br><span class=\"line\">    print driver.find_element_by_link_text(&apos;CSDN&apos;).get_attribute(&apos;href&apos;)</span><br><span class=\"line\">finally:</span><br><span class=\"line\">    driver.close()</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Python-遍历-list\"><a href=\"#Python-遍历-list\" class=\"headerlink\" title=\"Python 遍历 list\"></a>Python 遍历 list</h3><p>学习链接：<a href=\"https://blog.csdn.net/baidu_24545901/article/details/78729309\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/baidu_24545901/article/details/78729309</a></p>\n<p>采用的方式：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">temp = [&#123;&apos;h&apos;: &apos;u&apos;&#125;, &#123;&apos;h&apos;: &apos;a&apos;&#125;, &#123;&apos;h&apos;: &apos;u&apos;&#125;]</span><br><span class=\"line\">    for i, val in enumerate(temp):</span><br><span class=\"line\">        print(val[&apos;h&apos;])</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Python3-词典数组操作\"><a href=\"#Python3-词典数组操作\" class=\"headerlink\" title=\"Python3 词典数组操作\"></a>Python3 词典数组操作</h3><p>学习链接：<a href=\"https://blog.csdn.net/dance117/article/details/80304238\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/dance117/article/details/80304238</a></p>\n<p><strong>定义一个空的词典数组</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">review_data = &#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>增加</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">review_data[&apos;review_content&apos;] = &apos;very good&apos;</span><br><span class=\"line\">review_data[&apos;review_rating&apos;] = 5</span><br><span class=\"line\"></span><br><span class=\"line\">print(review_data)</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;&apos;review_content&apos;:&apos;very good&apos;, &apos;review_rating&apos;: 5&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>删除</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">review_data[&apos;review_content&apos;] = &apos;very good&apos;</span><br><span class=\"line\"># 指定删除</span><br><span class=\"line\">del review_data[&apos;review_content&apos;]</span><br><span class=\"line\"># 全部删除</span><br><span class=\"line\">review_data.clear()</span><br><span class=\"line\"># 删除指定 key，且返回删除的key的值</span><br><span class=\"line\">review_data.pop(&apos;review_content&apos;)</span><br></pre></td></tr></table></figure>\n\n<p><strong>修改</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 给指定的key重新赋值修改</span><br><span class=\"line\">review_data[&apos;name&apos;] = &apos;jun&apos;</span><br><span class=\"line\"></span><br><span class=\"line\"># 使用 update() 方法</span><br><span class=\"line\"># 无重复key，相当于新插入</span><br><span class=\"line\">review_data = &#123;&apos;name&apos;: &apos;jun&apos;&#125;</span><br><span class=\"line\">review_data.update(&#123;&apos;rating&apos;: 5&#125;)</span><br><span class=\"line\">print(review_data)  ----&gt;   &#123;&apos;name&apos;: &apos;jun&apos;, &apos;rating&apos;: 5&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"># 重复key，会覆盖旧的值</span><br><span class=\"line\">review_data = &#123;&apos;name&apos;: &apos;jun&apos;&#125;</span><br><span class=\"line\">review_data.update(&#123;&apos;name&apos;: &apos;jun&apos;&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">print(review_data)  ----&gt;   &#123;&apos;name&apos;: &apos;jun&apos;&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>查询</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">review_data = &#123;&apos;name&apos;: &apos;jun&apos;&#125;</span><br><span class=\"line\">reivew_data[&apos;name&apos;]</span><br></pre></td></tr></table></figure>\n\n<p><strong>两个字典合并</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dic1 = &#123;&apos;name&apos;: &apos;jun&apos;&#125;</span><br><span class=\"line\">dic2 = &#123;&apos;age&apos;: &apos;18&apos;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">dic1.update(dic2)</span><br><span class=\"line\">print(dic1)  ----&gt; &#123;&apos;name&apos;: &apos;jun&apos;, &apos;age&apos;: &apos;18&apos;&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"表格处理\"><a href=\"#表格处理\" class=\"headerlink\" title=\"表格处理\"></a>表格处理</h3><p>官方文档：<a href=\"https://docs.python.org/3/library/csv.html\" target=\"_blank\" rel=\"noopener\">https://docs.python.org/3/library/csv.html</a><br>参考链接：<a href=\"https://python3-cookbook.readthedocs.io/zh_CN/latest/c06/p01_read_write_csv_data.html\" target=\"_blank\" rel=\"noopener\">https://python3-cookbook.readthedocs.io/zh_CN/latest/c06/p01_read_write_csv_data.html</a></p>\n<p><strong>读取表格数据</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">with open(&apos;/Users/apple/Desktop/review.csv&apos;, newline=&apos;&apos;) as c:</span><br><span class=\"line\">    reader = csv.reader(c)</span><br><span class=\"line\">    for r in reader:</span><br><span class=\"line\">        print(r)</span><br></pre></td></tr></table></figure>\n\n<p><strong>写入数据</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># encoding=&apos;utf-8-sig&apos; 防止写入中文乱码</span><br><span class=\"line\">with open(&apos;/Users/apple/Desktop/review.csv&apos;, &apos;w&apos;, newline=&apos;&apos;, encoding=&apos;utf-8-sig&apos;) as c:</span><br><span class=\"line\">    headers = [&apos;Symbol&apos;, &apos;Price&apos;, &apos;Date&apos;, &apos;Time&apos;, &apos;Change&apos;, &apos;Volume&apos;]</span><br><span class=\"line\">    rows = [&#123;&apos;Symbol&apos;: &apos;AA&apos;, &apos;Price&apos;: 39.48, &apos;Date&apos;: &apos;6/11/2007&apos;,</span><br><span class=\"line\">             &apos;Time&apos;: &apos;9:36am&apos;, &apos;Change&apos;: -0.18, &apos;Volume&apos;: 181800&#125;,</span><br><span class=\"line\">            &#123;&apos;Symbol&apos;: &apos;AIG&apos;, &apos;Price&apos;: 71.38, &apos;Date&apos;: &apos;6/11/2007&apos;,</span><br><span class=\"line\">             &apos;Time&apos;: &apos;9:36am&apos;, &apos;Change&apos;: -0.15, &apos;Volume&apos;: 195500&#125;,</span><br><span class=\"line\">            &#123;&apos;Symbol&apos;: &apos;AXP&apos;, &apos;Price&apos;: 62.58, &apos;Date&apos;: &apos;6/11/2007&apos;,</span><br><span class=\"line\">             &apos;Time&apos;: &apos;9:36am&apos;, &apos;Change&apos;: -0.46, &apos;Volume&apos;: 935000&#125;,</span><br><span class=\"line\">            ]</span><br><span class=\"line\">    c_w = csv.DictWriter(c, headers)</span><br><span class=\"line\">    c_w.writeheader()</span><br><span class=\"line\">    c_w.writerows(rows)</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"Python-selenium-三种等待方式\"><a href=\"#Python-selenium-三种等待方式\" class=\"headerlink\" title=\"Python selenium 三种等待方式\"></a>Python selenium 三种等待方式</h3><p>学习链接：<a href=\"https://huilansame.github.io/huilansame.github.io/archivers/sleep-implicitlywait-wait\" target=\"_blank\" rel=\"noopener\">https://huilansame.github.io/huilansame.github.io/archivers/sleep-implicitlywait-wait</a></p>\n<p>项目使用以下方式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># -*- coding: utf-8 -*-</span><br><span class=\"line\">from selenium import webdriver</span><br><span class=\"line\">from selenium.webdriver.support.wait import WebDriverWait</span><br><span class=\"line\">from selenium.webdriver.support import expected_conditions as EC</span><br><span class=\"line\">from selenium.webdriver.common.by import By</span><br><span class=\"line\"></span><br><span class=\"line\">driver = webdriver.Firefox()</span><br><span class=\"line\">driver.implicitly_wait(10)  # 隐性等待和显性等待可以同时用，但要注意：等待的最长时间取两者之中的大者</span><br><span class=\"line\">driver.get(&apos;https://huilansame.github.io&apos;)</span><br><span class=\"line\">locator = (By.LINK_TEXT, &apos;CSDN&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">try:</span><br><span class=\"line\">    WebDriverWait(driver, 20, 0.5).until(EC.presence_of_element_located(locator))</span><br><span class=\"line\">    print driver.find_element_by_link_text(&apos;CSDN&apos;).get_attribute(&apos;href&apos;)</span><br><span class=\"line\">finally:</span><br><span class=\"line\">    driver.close()</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Python-遍历-list\"><a href=\"#Python-遍历-list\" class=\"headerlink\" title=\"Python 遍历 list\"></a>Python 遍历 list</h3><p>学习链接：<a href=\"https://blog.csdn.net/baidu_24545901/article/details/78729309\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/baidu_24545901/article/details/78729309</a></p>\n<p>采用的方式：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">temp = [&#123;&apos;h&apos;: &apos;u&apos;&#125;, &#123;&apos;h&apos;: &apos;a&apos;&#125;, &#123;&apos;h&apos;: &apos;u&apos;&#125;]</span><br><span class=\"line\">    for i, val in enumerate(temp):</span><br><span class=\"line\">        print(val[&apos;h&apos;])</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Python3-词典数组操作\"><a href=\"#Python3-词典数组操作\" class=\"headerlink\" title=\"Python3 词典数组操作\"></a>Python3 词典数组操作</h3><p>学习链接：<a href=\"https://blog.csdn.net/dance117/article/details/80304238\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/dance117/article/details/80304238</a></p>\n<p><strong>定义一个空的词典数组</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">review_data = &#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>增加</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">review_data[&apos;review_content&apos;] = &apos;very good&apos;</span><br><span class=\"line\">review_data[&apos;review_rating&apos;] = 5</span><br><span class=\"line\"></span><br><span class=\"line\">print(review_data)</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;&apos;review_content&apos;:&apos;very good&apos;, &apos;review_rating&apos;: 5&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>删除</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">review_data[&apos;review_content&apos;] = &apos;very good&apos;</span><br><span class=\"line\"># 指定删除</span><br><span class=\"line\">del review_data[&apos;review_content&apos;]</span><br><span class=\"line\"># 全部删除</span><br><span class=\"line\">review_data.clear()</span><br><span class=\"line\"># 删除指定 key，且返回删除的key的值</span><br><span class=\"line\">review_data.pop(&apos;review_content&apos;)</span><br></pre></td></tr></table></figure>\n\n<p><strong>修改</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 给指定的key重新赋值修改</span><br><span class=\"line\">review_data[&apos;name&apos;] = &apos;jun&apos;</span><br><span class=\"line\"></span><br><span class=\"line\"># 使用 update() 方法</span><br><span class=\"line\"># 无重复key，相当于新插入</span><br><span class=\"line\">review_data = &#123;&apos;name&apos;: &apos;jun&apos;&#125;</span><br><span class=\"line\">review_data.update(&#123;&apos;rating&apos;: 5&#125;)</span><br><span class=\"line\">print(review_data)  ----&gt;   &#123;&apos;name&apos;: &apos;jun&apos;, &apos;rating&apos;: 5&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"># 重复key，会覆盖旧的值</span><br><span class=\"line\">review_data = &#123;&apos;name&apos;: &apos;jun&apos;&#125;</span><br><span class=\"line\">review_data.update(&#123;&apos;name&apos;: &apos;jun&apos;&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">print(review_data)  ----&gt;   &#123;&apos;name&apos;: &apos;jun&apos;&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>查询</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">review_data = &#123;&apos;name&apos;: &apos;jun&apos;&#125;</span><br><span class=\"line\">reivew_data[&apos;name&apos;]</span><br></pre></td></tr></table></figure>\n\n<p><strong>两个字典合并</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dic1 = &#123;&apos;name&apos;: &apos;jun&apos;&#125;</span><br><span class=\"line\">dic2 = &#123;&apos;age&apos;: &apos;18&apos;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">dic1.update(dic2)</span><br><span class=\"line\">print(dic1)  ----&gt; &#123;&apos;name&apos;: &apos;jun&apos;, &apos;age&apos;: &apos;18&apos;&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"表格处理\"><a href=\"#表格处理\" class=\"headerlink\" title=\"表格处理\"></a>表格处理</h3><p>官方文档：<a href=\"https://docs.python.org/3/library/csv.html\" target=\"_blank\" rel=\"noopener\">https://docs.python.org/3/library/csv.html</a><br>参考链接：<a href=\"https://python3-cookbook.readthedocs.io/zh_CN/latest/c06/p01_read_write_csv_data.html\" target=\"_blank\" rel=\"noopener\">https://python3-cookbook.readthedocs.io/zh_CN/latest/c06/p01_read_write_csv_data.html</a></p>\n<p><strong>读取表格数据</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">with open(&apos;/Users/apple/Desktop/review.csv&apos;, newline=&apos;&apos;) as c:</span><br><span class=\"line\">    reader = csv.reader(c)</span><br><span class=\"line\">    for r in reader:</span><br><span class=\"line\">        print(r)</span><br></pre></td></tr></table></figure>\n\n<p><strong>写入数据</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># encoding=&apos;utf-8-sig&apos; 防止写入中文乱码</span><br><span class=\"line\">with open(&apos;/Users/apple/Desktop/review.csv&apos;, &apos;w&apos;, newline=&apos;&apos;, encoding=&apos;utf-8-sig&apos;) as c:</span><br><span class=\"line\">    headers = [&apos;Symbol&apos;, &apos;Price&apos;, &apos;Date&apos;, &apos;Time&apos;, &apos;Change&apos;, &apos;Volume&apos;]</span><br><span class=\"line\">    rows = [&#123;&apos;Symbol&apos;: &apos;AA&apos;, &apos;Price&apos;: 39.48, &apos;Date&apos;: &apos;6/11/2007&apos;,</span><br><span class=\"line\">             &apos;Time&apos;: &apos;9:36am&apos;, &apos;Change&apos;: -0.18, &apos;Volume&apos;: 181800&#125;,</span><br><span class=\"line\">            &#123;&apos;Symbol&apos;: &apos;AIG&apos;, &apos;Price&apos;: 71.38, &apos;Date&apos;: &apos;6/11/2007&apos;,</span><br><span class=\"line\">             &apos;Time&apos;: &apos;9:36am&apos;, &apos;Change&apos;: -0.15, &apos;Volume&apos;: 195500&#125;,</span><br><span class=\"line\">            &#123;&apos;Symbol&apos;: &apos;AXP&apos;, &apos;Price&apos;: 62.58, &apos;Date&apos;: &apos;6/11/2007&apos;,</span><br><span class=\"line\">             &apos;Time&apos;: &apos;9:36am&apos;, &apos;Change&apos;: -0.46, &apos;Volume&apos;: 935000&#125;,</span><br><span class=\"line\">            ]</span><br><span class=\"line\">    c_w = csv.DictWriter(c, headers)</span><br><span class=\"line\">    c_w.writeheader()</span><br><span class=\"line\">    c_w.writerows(rows)</span><br></pre></td></tr></table></figure>\n\n"},{"title":"带你玩转 Surge 网络调试神器","date":"2017-12-11T16:25:13.000Z","_content":"\n### 简单了解\n\nSurge 是基于 iOS 9 新增的“网络扩展”（Network Extension）API[3] 开发的一款网络调试工具。作为首个借用此软件可使用 Shadowsocks 的 iOS 9 应用，中国大陆网友将其广泛运用于突破网络审查。\n\nSurge 可做很多事情，比如阻挡广告、网络调试、流量跟踪、代理上网等等。\n\n### 安装\n\nMac 版下载 [地址](https://nssurge.com/)（Windows 暂不支持），下载完成后解压文件夹得到 Surge 程序，将其拖放到应用程序中打开。\n\n启动 Surge 后勾选下拉菜单中的 **Set as System Proxy** 即可自动向系统网络设置添加必要的参数，因为需要修改系统网络设置，首次勾选时需要输入管理员密码进行确认，去掉 Set as System Proxy 的勾选，会清除网络设置中的代理相关设置。\n\n打开「系统偏好设置 — 网络 - Wi-Fi高级」设置 HTTP 和 HTTPS 代理： 127.0.0.1:6152 ，以及 SOCKS 代理中设置为 127.0.0.1:6153，\n并添加忽略这些主机与域的代理设置（Bypass Proxy）：127.0.0.1, 192.168.0.0/16, 10.0.0.0/8, 172.16.0.0/12, localhost, *.local\n\n![](/images/2017/12/02-1.png)\n\n### 配置\n\nSurge 默认配置文件的路径在 /Users/Freelander/Documents/Surge 下 Default.conf，文件夹还提供简单中文配置例子，里面有很多注释教你如何配置。\n\n配置文件基础最终我选择了在一份 [开源配置文件](https://raw.githubusercontent.com/lhie1/Surge/master/Surge.conf) 基础上进行修改。已上传到 [GitHub](https://github.com/Freelander/Blog/blob/master/201708/code/MySurge.conf)。\n\n将其内容复制到上面所说的路径 Default.conf 文件中，然后保存点击下拉菜单中的 Reload Profile from File，此时配置文件中的配置就生效了。\n\n首先来看如何配置 ss 代理\n\n```\n[Proxy]\n 🇺🇸US-l = custom,${ss-server host},${ss-server port},${ss encrypt type},${ss-password},tls=true\n 🇺🇸US-m = custom,${ss-server host},${ss-server port},${ss encrypt type},${ss-password},tls=true\n 🇯🇵JP  = custom,${ss-server host},${ss-server port},${ss encrypt type},${ss-password},tls=true\n 🇸🇬SG  = custom,${ss-server host},${ss-server port},${ss encrypt type},${ss-password},tls=true\n 🇩🇪DE  = custom,${ss-server host},${ss-server port},${ss encrypt type},${ss-password},tls=true\n   \n[Proxy Group]\nProxy = select,🇺🇸US-l,🇺🇸US-m,🇯🇵 JP,🇸🇬SG,🇩🇪DE\n```\n[Proxy]是具体的代理配置，它下面就是 5 个 ss 服务器节点, 这里只是 5 个国家例子，根据你拥有的 ss 账号数来决定，拥有几个账号就留下其中几个对应国旗配置就好。表面上看就是 5 个键值对(键可以自定义)，键中加上国旗可以很直观的区分不同国家的 ss 节点，值中的变量分别表示：\nss-server host: ss 主机，ip 或域名\nss-server port: ss 主机端口\nss encrypt type: 加密方式\nss-password: ss 密码\ncustom 不能改，是一个约定类型(ss 协议)。\n\n保存上面配置，点击下拉菜单中的 Reload Profile from File，配置生效，就会出现下图\n\n![](/images/2017/12/02-2.png)\n\n接着打开浏览器输入 https://www.youtube.com/ 回车\n你会发现外面的世界如此精彩\n\n### 共享上网\n\n在局域网内，其他设备无须再安装任何软件，即可与我一起到外面世界遨游。其他设备只需要简单的在 wifi 设置中添加一个 HTTP 代理即可\n\n图片来源 [地址](https://medium.com/@scomper/%E5%B1%80%E5%9F%9F%E7%BD%91%E5%85%B6%E4%BB%96%E8%AE%BE%E5%A4%87%E5%85%B1%E4%BA%AB%E4%B8%8A%E7%BD%91-dd29e18853da)\n\n![](/images/2017/12/02-3.png)\n\n### 同时使用 Surge + Charles 分析网络\n\n打开 Charles 的 External Proxy Settings 设置 Charles 的外部代理为 Surge 的端口，即与上面系统网络设置的代理一致\n\n![](/images/2017/12/02-4.png)\n\n### 语法\n\n```\n// 基于域名判断并屏蔽（REJECT）请求  \nDOMAIN,pingma.qq.com,REJECT  \n// 基于域名后缀判断屏蔽（REJECT）请求  \nDOMAIN-SUFFIX,flurry.com,REJECT  \n// 基于关键词后缀判断走代理（Proxy），强制不尊重系统代理的请求走\nPacket-Tunnel-Provider DOMAIN-KEYWORD,google,Proxy,force-remote-dns  \n// 基于域名后缀判断请求走直连（DIRECT）  \nDOMAIN-SUFFIX,126.net,DIRECT  \n// Telegram.app 指定“no-resolve”Surge 忽略这个规则与域的请求。  \nIP-CIDR,91.108.56.0/22,Proxy,no-resolve  \n// 判断是否是局域网，如果是，走直连  \nIP-CIDR,192.168.0.0/16,DIRECT  \n// 判断服务器所在地，如果是国内，走直连  \nGEOIP,CN,DIRECT  \n// 其他的全部走代理  \nFINAL,Proxy  \n// 其他的全部不走代理  \nFINAL,DIRECT  \n```\n\n### 注意坑\n\n写完 [Rule] 后面需要加\n```\n[Rule] \n\n....\n\nGEOIP,CN,DIRECT\nFINAL,Proxy\n```\n\n### 参考链接\n* [Surge 原理与实现](https://medium.com/@Blankwonder/surge-%E5%8E%9F%E7%90%86%E4%B8%8E%E5%AE%9E%E7%8E%B0-8aa3304fb3bb)\n* [Surge 新手使用指南](https://medium.com/@scomper/surge-%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6-a1533c10e80b)\n* [Surge 官方配置教程](https://manual.nssurge.com/overview/configuration.html)\n* [Surge for Mac 2 初体验与教程](http://cloudstone.xin/2016/10/31/Mac-Surge-2-%E5%88%9D%E4%BD%93%E9%AA%8C/)\n* [Surge config](https://github.com/lhie1/Surge)\n* [Surge for Mac 简明指南](https://medium.com/@scomper/surge-for-mac-%E7%AE%80%E6%98%8E%E6%8C%87%E5%8D%97-f6f357b8f09c)\n* [局域网其他设备共享上网](https://medium.com/@scomper/%E5%B1%80%E5%9F%9F%E7%BD%91%E5%85%B6%E4%BB%96%E8%AE%BE%E5%A4%87%E5%85%B1%E4%BA%AB%E4%B8%8A%E7%BD%91-dd29e18853da)\n* [解决Surge for Mac+Charles同时分析网络请求的办法 ](https://github.com/wujunchuan/wujunchuan.github.io/issues/1)","source":"_posts/surge.md","raw":"---\ntitle: 带你玩转 Surge 网络调试神器\ndate: 2017-12-12 00:25:13\ntags: [翻墙,Surge,VPN]\ncategories: VPN\n---\n\n### 简单了解\n\nSurge 是基于 iOS 9 新增的“网络扩展”（Network Extension）API[3] 开发的一款网络调试工具。作为首个借用此软件可使用 Shadowsocks 的 iOS 9 应用，中国大陆网友将其广泛运用于突破网络审查。\n\nSurge 可做很多事情，比如阻挡广告、网络调试、流量跟踪、代理上网等等。\n\n### 安装\n\nMac 版下载 [地址](https://nssurge.com/)（Windows 暂不支持），下载完成后解压文件夹得到 Surge 程序，将其拖放到应用程序中打开。\n\n启动 Surge 后勾选下拉菜单中的 **Set as System Proxy** 即可自动向系统网络设置添加必要的参数，因为需要修改系统网络设置，首次勾选时需要输入管理员密码进行确认，去掉 Set as System Proxy 的勾选，会清除网络设置中的代理相关设置。\n\n打开「系统偏好设置 — 网络 - Wi-Fi高级」设置 HTTP 和 HTTPS 代理： 127.0.0.1:6152 ，以及 SOCKS 代理中设置为 127.0.0.1:6153，\n并添加忽略这些主机与域的代理设置（Bypass Proxy）：127.0.0.1, 192.168.0.0/16, 10.0.0.0/8, 172.16.0.0/12, localhost, *.local\n\n![](/images/2017/12/02-1.png)\n\n### 配置\n\nSurge 默认配置文件的路径在 /Users/Freelander/Documents/Surge 下 Default.conf，文件夹还提供简单中文配置例子，里面有很多注释教你如何配置。\n\n配置文件基础最终我选择了在一份 [开源配置文件](https://raw.githubusercontent.com/lhie1/Surge/master/Surge.conf) 基础上进行修改。已上传到 [GitHub](https://github.com/Freelander/Blog/blob/master/201708/code/MySurge.conf)。\n\n将其内容复制到上面所说的路径 Default.conf 文件中，然后保存点击下拉菜单中的 Reload Profile from File，此时配置文件中的配置就生效了。\n\n首先来看如何配置 ss 代理\n\n```\n[Proxy]\n 🇺🇸US-l = custom,${ss-server host},${ss-server port},${ss encrypt type},${ss-password},tls=true\n 🇺🇸US-m = custom,${ss-server host},${ss-server port},${ss encrypt type},${ss-password},tls=true\n 🇯🇵JP  = custom,${ss-server host},${ss-server port},${ss encrypt type},${ss-password},tls=true\n 🇸🇬SG  = custom,${ss-server host},${ss-server port},${ss encrypt type},${ss-password},tls=true\n 🇩🇪DE  = custom,${ss-server host},${ss-server port},${ss encrypt type},${ss-password},tls=true\n   \n[Proxy Group]\nProxy = select,🇺🇸US-l,🇺🇸US-m,🇯🇵 JP,🇸🇬SG,🇩🇪DE\n```\n[Proxy]是具体的代理配置，它下面就是 5 个 ss 服务器节点, 这里只是 5 个国家例子，根据你拥有的 ss 账号数来决定，拥有几个账号就留下其中几个对应国旗配置就好。表面上看就是 5 个键值对(键可以自定义)，键中加上国旗可以很直观的区分不同国家的 ss 节点，值中的变量分别表示：\nss-server host: ss 主机，ip 或域名\nss-server port: ss 主机端口\nss encrypt type: 加密方式\nss-password: ss 密码\ncustom 不能改，是一个约定类型(ss 协议)。\n\n保存上面配置，点击下拉菜单中的 Reload Profile from File，配置生效，就会出现下图\n\n![](/images/2017/12/02-2.png)\n\n接着打开浏览器输入 https://www.youtube.com/ 回车\n你会发现外面的世界如此精彩\n\n### 共享上网\n\n在局域网内，其他设备无须再安装任何软件，即可与我一起到外面世界遨游。其他设备只需要简单的在 wifi 设置中添加一个 HTTP 代理即可\n\n图片来源 [地址](https://medium.com/@scomper/%E5%B1%80%E5%9F%9F%E7%BD%91%E5%85%B6%E4%BB%96%E8%AE%BE%E5%A4%87%E5%85%B1%E4%BA%AB%E4%B8%8A%E7%BD%91-dd29e18853da)\n\n![](/images/2017/12/02-3.png)\n\n### 同时使用 Surge + Charles 分析网络\n\n打开 Charles 的 External Proxy Settings 设置 Charles 的外部代理为 Surge 的端口，即与上面系统网络设置的代理一致\n\n![](/images/2017/12/02-4.png)\n\n### 语法\n\n```\n// 基于域名判断并屏蔽（REJECT）请求  \nDOMAIN,pingma.qq.com,REJECT  \n// 基于域名后缀判断屏蔽（REJECT）请求  \nDOMAIN-SUFFIX,flurry.com,REJECT  \n// 基于关键词后缀判断走代理（Proxy），强制不尊重系统代理的请求走\nPacket-Tunnel-Provider DOMAIN-KEYWORD,google,Proxy,force-remote-dns  \n// 基于域名后缀判断请求走直连（DIRECT）  \nDOMAIN-SUFFIX,126.net,DIRECT  \n// Telegram.app 指定“no-resolve”Surge 忽略这个规则与域的请求。  \nIP-CIDR,91.108.56.0/22,Proxy,no-resolve  \n// 判断是否是局域网，如果是，走直连  \nIP-CIDR,192.168.0.0/16,DIRECT  \n// 判断服务器所在地，如果是国内，走直连  \nGEOIP,CN,DIRECT  \n// 其他的全部走代理  \nFINAL,Proxy  \n// 其他的全部不走代理  \nFINAL,DIRECT  \n```\n\n### 注意坑\n\n写完 [Rule] 后面需要加\n```\n[Rule] \n\n....\n\nGEOIP,CN,DIRECT\nFINAL,Proxy\n```\n\n### 参考链接\n* [Surge 原理与实现](https://medium.com/@Blankwonder/surge-%E5%8E%9F%E7%90%86%E4%B8%8E%E5%AE%9E%E7%8E%B0-8aa3304fb3bb)\n* [Surge 新手使用指南](https://medium.com/@scomper/surge-%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6-a1533c10e80b)\n* [Surge 官方配置教程](https://manual.nssurge.com/overview/configuration.html)\n* [Surge for Mac 2 初体验与教程](http://cloudstone.xin/2016/10/31/Mac-Surge-2-%E5%88%9D%E4%BD%93%E9%AA%8C/)\n* [Surge config](https://github.com/lhie1/Surge)\n* [Surge for Mac 简明指南](https://medium.com/@scomper/surge-for-mac-%E7%AE%80%E6%98%8E%E6%8C%87%E5%8D%97-f6f357b8f09c)\n* [局域网其他设备共享上网](https://medium.com/@scomper/%E5%B1%80%E5%9F%9F%E7%BD%91%E5%85%B6%E4%BB%96%E8%AE%BE%E5%A4%87%E5%85%B1%E4%BA%AB%E4%B8%8A%E7%BD%91-dd29e18853da)\n* [解决Surge for Mac+Charles同时分析网络请求的办法 ](https://github.com/wujunchuan/wujunchuan.github.io/issues/1)","slug":"surge","published":1,"updated":"2019-06-12T16:54:50.605Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cks0kfid30021w3yzhuukvu73","content":"<h3 id=\"简单了解\"><a href=\"#简单了解\" class=\"headerlink\" title=\"简单了解\"></a>简单了解</h3><p>Surge 是基于 iOS 9 新增的“网络扩展”（Network Extension）API[3] 开发的一款网络调试工具。作为首个借用此软件可使用 Shadowsocks 的 iOS 9 应用，中国大陆网友将其广泛运用于突破网络审查。</p>\n<p>Surge 可做很多事情，比如阻挡广告、网络调试、流量跟踪、代理上网等等。</p>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>Mac 版下载 <a href=\"https://nssurge.com/\" target=\"_blank\" rel=\"noopener\">地址</a>（Windows 暂不支持），下载完成后解压文件夹得到 Surge 程序，将其拖放到应用程序中打开。</p>\n<p>启动 Surge 后勾选下拉菜单中的 <strong>Set as System Proxy</strong> 即可自动向系统网络设置添加必要的参数，因为需要修改系统网络设置，首次勾选时需要输入管理员密码进行确认，去掉 Set as System Proxy 的勾选，会清除网络设置中的代理相关设置。</p>\n<p>打开「系统偏好设置 — 网络 - Wi-Fi高级」设置 HTTP 和 HTTPS 代理： 127.0.0.1:6152 ，以及 SOCKS 代理中设置为 127.0.0.1:6153，<br>并添加忽略这些主机与域的代理设置（Bypass Proxy）：127.0.0.1, 192.168.0.0/16, 10.0.0.0/8, 172.16.0.0/12, localhost, *.local</p>\n<p><img src=\"/images/2017/12/02-1.png\" alt></p>\n<h3 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h3><p>Surge 默认配置文件的路径在 /Users/Freelander/Documents/Surge 下 Default.conf，文件夹还提供简单中文配置例子，里面有很多注释教你如何配置。</p>\n<p>配置文件基础最终我选择了在一份 <a href=\"https://raw.githubusercontent.com/lhie1/Surge/master/Surge.conf\" target=\"_blank\" rel=\"noopener\">开源配置文件</a> 基础上进行修改。已上传到 <a href=\"https://github.com/Freelander/Blog/blob/master/201708/code/MySurge.conf\" target=\"_blank\" rel=\"noopener\">GitHub</a>。</p>\n<p>将其内容复制到上面所说的路径 Default.conf 文件中，然后保存点击下拉菜单中的 Reload Profile from File，此时配置文件中的配置就生效了。</p>\n<p>首先来看如何配置 ss 代理</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[Proxy]</span><br><span class=\"line\"> 🇺🇸US-l = custom,$&#123;ss-server host&#125;,$&#123;ss-server port&#125;,$&#123;ss encrypt type&#125;,$&#123;ss-password&#125;,tls=true</span><br><span class=\"line\"> 🇺🇸US-m = custom,$&#123;ss-server host&#125;,$&#123;ss-server port&#125;,$&#123;ss encrypt type&#125;,$&#123;ss-password&#125;,tls=true</span><br><span class=\"line\"> 🇯🇵JP  = custom,$&#123;ss-server host&#125;,$&#123;ss-server port&#125;,$&#123;ss encrypt type&#125;,$&#123;ss-password&#125;,tls=true</span><br><span class=\"line\"> 🇸🇬SG  = custom,$&#123;ss-server host&#125;,$&#123;ss-server port&#125;,$&#123;ss encrypt type&#125;,$&#123;ss-password&#125;,tls=true</span><br><span class=\"line\"> 🇩🇪DE  = custom,$&#123;ss-server host&#125;,$&#123;ss-server port&#125;,$&#123;ss encrypt type&#125;,$&#123;ss-password&#125;,tls=true</span><br><span class=\"line\">   </span><br><span class=\"line\">[Proxy Group]</span><br><span class=\"line\">Proxy = select,🇺🇸US-l,🇺🇸US-m,🇯🇵 JP,🇸🇬SG,🇩🇪DE</span><br></pre></td></tr></table></figure>\n\n<p>[Proxy]是具体的代理配置，它下面就是 5 个 ss 服务器节点, 这里只是 5 个国家例子，根据你拥有的 ss 账号数来决定，拥有几个账号就留下其中几个对应国旗配置就好。表面上看就是 5 个键值对(键可以自定义)，键中加上国旗可以很直观的区分不同国家的 ss 节点，值中的变量分别表示：<br>ss-server host: ss 主机，ip 或域名<br>ss-server port: ss 主机端口<br>ss encrypt type: 加密方式<br>ss-password: ss 密码<br>custom 不能改，是一个约定类型(ss 协议)。</p>\n<p>保存上面配置，点击下拉菜单中的 Reload Profile from File，配置生效，就会出现下图</p>\n<p><img src=\"/images/2017/12/02-2.png\" alt></p>\n<p>接着打开浏览器输入 <a href=\"https://www.youtube.com/\" target=\"_blank\" rel=\"noopener\">https://www.youtube.com/</a> 回车<br>你会发现外面的世界如此精彩</p>\n<h3 id=\"共享上网\"><a href=\"#共享上网\" class=\"headerlink\" title=\"共享上网\"></a>共享上网</h3><p>在局域网内，其他设备无须再安装任何软件，即可与我一起到外面世界遨游。其他设备只需要简单的在 wifi 设置中添加一个 HTTP 代理即可</p>\n<p>图片来源 <a href=\"https://medium.com/@scomper/%E5%B1%80%E5%9F%9F%E7%BD%91%E5%85%B6%E4%BB%96%E8%AE%BE%E5%A4%87%E5%85%B1%E4%BA%AB%E4%B8%8A%E7%BD%91-dd29e18853da\" target=\"_blank\" rel=\"noopener\">地址</a></p>\n<p><img src=\"/images/2017/12/02-3.png\" alt></p>\n<h3 id=\"同时使用-Surge-Charles-分析网络\"><a href=\"#同时使用-Surge-Charles-分析网络\" class=\"headerlink\" title=\"同时使用 Surge + Charles 分析网络\"></a>同时使用 Surge + Charles 分析网络</h3><p>打开 Charles 的 External Proxy Settings 设置 Charles 的外部代理为 Surge 的端口，即与上面系统网络设置的代理一致</p>\n<p><img src=\"/images/2017/12/02-4.png\" alt></p>\n<h3 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 基于域名判断并屏蔽（REJECT）请求  </span><br><span class=\"line\">DOMAIN,pingma.qq.com,REJECT  </span><br><span class=\"line\">// 基于域名后缀判断屏蔽（REJECT）请求  </span><br><span class=\"line\">DOMAIN-SUFFIX,flurry.com,REJECT  </span><br><span class=\"line\">// 基于关键词后缀判断走代理（Proxy），强制不尊重系统代理的请求走</span><br><span class=\"line\">Packet-Tunnel-Provider DOMAIN-KEYWORD,google,Proxy,force-remote-dns  </span><br><span class=\"line\">// 基于域名后缀判断请求走直连（DIRECT）  </span><br><span class=\"line\">DOMAIN-SUFFIX,126.net,DIRECT  </span><br><span class=\"line\">// Telegram.app 指定“no-resolve”Surge 忽略这个规则与域的请求。  </span><br><span class=\"line\">IP-CIDR,91.108.56.0/22,Proxy,no-resolve  </span><br><span class=\"line\">// 判断是否是局域网，如果是，走直连  </span><br><span class=\"line\">IP-CIDR,192.168.0.0/16,DIRECT  </span><br><span class=\"line\">// 判断服务器所在地，如果是国内，走直连  </span><br><span class=\"line\">GEOIP,CN,DIRECT  </span><br><span class=\"line\">// 其他的全部走代理  </span><br><span class=\"line\">FINAL,Proxy  </span><br><span class=\"line\">// 其他的全部不走代理  </span><br><span class=\"line\">FINAL,DIRECT</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"注意坑\"><a href=\"#注意坑\" class=\"headerlink\" title=\"注意坑\"></a>注意坑</h3><p>写完 [Rule] 后面需要加</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[Rule] </span><br><span class=\"line\"></span><br><span class=\"line\">....</span><br><span class=\"line\"></span><br><span class=\"line\">GEOIP,CN,DIRECT</span><br><span class=\"line\">FINAL,Proxy</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h3><ul>\n<li><a href=\"https://medium.com/@Blankwonder/surge-%E5%8E%9F%E7%90%86%E4%B8%8E%E5%AE%9E%E7%8E%B0-8aa3304fb3bb\" target=\"_blank\" rel=\"noopener\">Surge 原理与实现</a></li>\n<li><a href=\"https://medium.com/@scomper/surge-%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6-a1533c10e80b\" target=\"_blank\" rel=\"noopener\">Surge 新手使用指南</a></li>\n<li><a href=\"https://manual.nssurge.com/overview/configuration.html\" target=\"_blank\" rel=\"noopener\">Surge 官方配置教程</a></li>\n<li><a href=\"http://cloudstone.xin/2016/10/31/Mac-Surge-2-%E5%88%9D%E4%BD%93%E9%AA%8C/\" target=\"_blank\" rel=\"noopener\">Surge for Mac 2 初体验与教程</a></li>\n<li><a href=\"https://github.com/lhie1/Surge\" target=\"_blank\" rel=\"noopener\">Surge config</a></li>\n<li><a href=\"https://medium.com/@scomper/surge-for-mac-%E7%AE%80%E6%98%8E%E6%8C%87%E5%8D%97-f6f357b8f09c\" target=\"_blank\" rel=\"noopener\">Surge for Mac 简明指南</a></li>\n<li><a href=\"https://medium.com/@scomper/%E5%B1%80%E5%9F%9F%E7%BD%91%E5%85%B6%E4%BB%96%E8%AE%BE%E5%A4%87%E5%85%B1%E4%BA%AB%E4%B8%8A%E7%BD%91-dd29e18853da\" target=\"_blank\" rel=\"noopener\">局域网其他设备共享上网</a></li>\n<li><a href=\"https://github.com/wujunchuan/wujunchuan.github.io/issues/1\" target=\"_blank\" rel=\"noopener\">解决Surge for Mac+Charles同时分析网络请求的办法 </a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"简单了解\"><a href=\"#简单了解\" class=\"headerlink\" title=\"简单了解\"></a>简单了解</h3><p>Surge 是基于 iOS 9 新增的“网络扩展”（Network Extension）API[3] 开发的一款网络调试工具。作为首个借用此软件可使用 Shadowsocks 的 iOS 9 应用，中国大陆网友将其广泛运用于突破网络审查。</p>\n<p>Surge 可做很多事情，比如阻挡广告、网络调试、流量跟踪、代理上网等等。</p>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>Mac 版下载 <a href=\"https://nssurge.com/\" target=\"_blank\" rel=\"noopener\">地址</a>（Windows 暂不支持），下载完成后解压文件夹得到 Surge 程序，将其拖放到应用程序中打开。</p>\n<p>启动 Surge 后勾选下拉菜单中的 <strong>Set as System Proxy</strong> 即可自动向系统网络设置添加必要的参数，因为需要修改系统网络设置，首次勾选时需要输入管理员密码进行确认，去掉 Set as System Proxy 的勾选，会清除网络设置中的代理相关设置。</p>\n<p>打开「系统偏好设置 — 网络 - Wi-Fi高级」设置 HTTP 和 HTTPS 代理： 127.0.0.1:6152 ，以及 SOCKS 代理中设置为 127.0.0.1:6153，<br>并添加忽略这些主机与域的代理设置（Bypass Proxy）：127.0.0.1, 192.168.0.0/16, 10.0.0.0/8, 172.16.0.0/12, localhost, *.local</p>\n<p><img src=\"/images/2017/12/02-1.png\" alt></p>\n<h3 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h3><p>Surge 默认配置文件的路径在 /Users/Freelander/Documents/Surge 下 Default.conf，文件夹还提供简单中文配置例子，里面有很多注释教你如何配置。</p>\n<p>配置文件基础最终我选择了在一份 <a href=\"https://raw.githubusercontent.com/lhie1/Surge/master/Surge.conf\" target=\"_blank\" rel=\"noopener\">开源配置文件</a> 基础上进行修改。已上传到 <a href=\"https://github.com/Freelander/Blog/blob/master/201708/code/MySurge.conf\" target=\"_blank\" rel=\"noopener\">GitHub</a>。</p>\n<p>将其内容复制到上面所说的路径 Default.conf 文件中，然后保存点击下拉菜单中的 Reload Profile from File，此时配置文件中的配置就生效了。</p>\n<p>首先来看如何配置 ss 代理</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[Proxy]</span><br><span class=\"line\"> 🇺🇸US-l = custom,$&#123;ss-server host&#125;,$&#123;ss-server port&#125;,$&#123;ss encrypt type&#125;,$&#123;ss-password&#125;,tls=true</span><br><span class=\"line\"> 🇺🇸US-m = custom,$&#123;ss-server host&#125;,$&#123;ss-server port&#125;,$&#123;ss encrypt type&#125;,$&#123;ss-password&#125;,tls=true</span><br><span class=\"line\"> 🇯🇵JP  = custom,$&#123;ss-server host&#125;,$&#123;ss-server port&#125;,$&#123;ss encrypt type&#125;,$&#123;ss-password&#125;,tls=true</span><br><span class=\"line\"> 🇸🇬SG  = custom,$&#123;ss-server host&#125;,$&#123;ss-server port&#125;,$&#123;ss encrypt type&#125;,$&#123;ss-password&#125;,tls=true</span><br><span class=\"line\"> 🇩🇪DE  = custom,$&#123;ss-server host&#125;,$&#123;ss-server port&#125;,$&#123;ss encrypt type&#125;,$&#123;ss-password&#125;,tls=true</span><br><span class=\"line\">   </span><br><span class=\"line\">[Proxy Group]</span><br><span class=\"line\">Proxy = select,🇺🇸US-l,🇺🇸US-m,🇯🇵 JP,🇸🇬SG,🇩🇪DE</span><br></pre></td></tr></table></figure>\n\n<p>[Proxy]是具体的代理配置，它下面就是 5 个 ss 服务器节点, 这里只是 5 个国家例子，根据你拥有的 ss 账号数来决定，拥有几个账号就留下其中几个对应国旗配置就好。表面上看就是 5 个键值对(键可以自定义)，键中加上国旗可以很直观的区分不同国家的 ss 节点，值中的变量分别表示：<br>ss-server host: ss 主机，ip 或域名<br>ss-server port: ss 主机端口<br>ss encrypt type: 加密方式<br>ss-password: ss 密码<br>custom 不能改，是一个约定类型(ss 协议)。</p>\n<p>保存上面配置，点击下拉菜单中的 Reload Profile from File，配置生效，就会出现下图</p>\n<p><img src=\"/images/2017/12/02-2.png\" alt></p>\n<p>接着打开浏览器输入 <a href=\"https://www.youtube.com/\" target=\"_blank\" rel=\"noopener\">https://www.youtube.com/</a> 回车<br>你会发现外面的世界如此精彩</p>\n<h3 id=\"共享上网\"><a href=\"#共享上网\" class=\"headerlink\" title=\"共享上网\"></a>共享上网</h3><p>在局域网内，其他设备无须再安装任何软件，即可与我一起到外面世界遨游。其他设备只需要简单的在 wifi 设置中添加一个 HTTP 代理即可</p>\n<p>图片来源 <a href=\"https://medium.com/@scomper/%E5%B1%80%E5%9F%9F%E7%BD%91%E5%85%B6%E4%BB%96%E8%AE%BE%E5%A4%87%E5%85%B1%E4%BA%AB%E4%B8%8A%E7%BD%91-dd29e18853da\" target=\"_blank\" rel=\"noopener\">地址</a></p>\n<p><img src=\"/images/2017/12/02-3.png\" alt></p>\n<h3 id=\"同时使用-Surge-Charles-分析网络\"><a href=\"#同时使用-Surge-Charles-分析网络\" class=\"headerlink\" title=\"同时使用 Surge + Charles 分析网络\"></a>同时使用 Surge + Charles 分析网络</h3><p>打开 Charles 的 External Proxy Settings 设置 Charles 的外部代理为 Surge 的端口，即与上面系统网络设置的代理一致</p>\n<p><img src=\"/images/2017/12/02-4.png\" alt></p>\n<h3 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 基于域名判断并屏蔽（REJECT）请求  </span><br><span class=\"line\">DOMAIN,pingma.qq.com,REJECT  </span><br><span class=\"line\">// 基于域名后缀判断屏蔽（REJECT）请求  </span><br><span class=\"line\">DOMAIN-SUFFIX,flurry.com,REJECT  </span><br><span class=\"line\">// 基于关键词后缀判断走代理（Proxy），强制不尊重系统代理的请求走</span><br><span class=\"line\">Packet-Tunnel-Provider DOMAIN-KEYWORD,google,Proxy,force-remote-dns  </span><br><span class=\"line\">// 基于域名后缀判断请求走直连（DIRECT）  </span><br><span class=\"line\">DOMAIN-SUFFIX,126.net,DIRECT  </span><br><span class=\"line\">// Telegram.app 指定“no-resolve”Surge 忽略这个规则与域的请求。  </span><br><span class=\"line\">IP-CIDR,91.108.56.0/22,Proxy,no-resolve  </span><br><span class=\"line\">// 判断是否是局域网，如果是，走直连  </span><br><span class=\"line\">IP-CIDR,192.168.0.0/16,DIRECT  </span><br><span class=\"line\">// 判断服务器所在地，如果是国内，走直连  </span><br><span class=\"line\">GEOIP,CN,DIRECT  </span><br><span class=\"line\">// 其他的全部走代理  </span><br><span class=\"line\">FINAL,Proxy  </span><br><span class=\"line\">// 其他的全部不走代理  </span><br><span class=\"line\">FINAL,DIRECT</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"注意坑\"><a href=\"#注意坑\" class=\"headerlink\" title=\"注意坑\"></a>注意坑</h3><p>写完 [Rule] 后面需要加</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[Rule] </span><br><span class=\"line\"></span><br><span class=\"line\">....</span><br><span class=\"line\"></span><br><span class=\"line\">GEOIP,CN,DIRECT</span><br><span class=\"line\">FINAL,Proxy</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h3><ul>\n<li><a href=\"https://medium.com/@Blankwonder/surge-%E5%8E%9F%E7%90%86%E4%B8%8E%E5%AE%9E%E7%8E%B0-8aa3304fb3bb\" target=\"_blank\" rel=\"noopener\">Surge 原理与实现</a></li>\n<li><a href=\"https://medium.com/@scomper/surge-%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6-a1533c10e80b\" target=\"_blank\" rel=\"noopener\">Surge 新手使用指南</a></li>\n<li><a href=\"https://manual.nssurge.com/overview/configuration.html\" target=\"_blank\" rel=\"noopener\">Surge 官方配置教程</a></li>\n<li><a href=\"http://cloudstone.xin/2016/10/31/Mac-Surge-2-%E5%88%9D%E4%BD%93%E9%AA%8C/\" target=\"_blank\" rel=\"noopener\">Surge for Mac 2 初体验与教程</a></li>\n<li><a href=\"https://github.com/lhie1/Surge\" target=\"_blank\" rel=\"noopener\">Surge config</a></li>\n<li><a href=\"https://medium.com/@scomper/surge-for-mac-%E7%AE%80%E6%98%8E%E6%8C%87%E5%8D%97-f6f357b8f09c\" target=\"_blank\" rel=\"noopener\">Surge for Mac 简明指南</a></li>\n<li><a href=\"https://medium.com/@scomper/%E5%B1%80%E5%9F%9F%E7%BD%91%E5%85%B6%E4%BB%96%E8%AE%BE%E5%A4%87%E5%85%B1%E4%BA%AB%E4%B8%8A%E7%BD%91-dd29e18853da\" target=\"_blank\" rel=\"noopener\">局域网其他设备共享上网</a></li>\n<li><a href=\"https://github.com/wujunchuan/wujunchuan.github.io/issues/1\" target=\"_blank\" rel=\"noopener\">解决Surge for Mac+Charles同时分析网络请求的办法 </a></li>\n</ul>\n"},{"title":"Xcode 常用的快捷键","date":"2019-07-31T15:54:29.000Z","_content":"\n## 常用\n\n功能 | 快捷键\n---|---\n快速打开某个文件 | ``command + shift + O``\n快速跳转到某一行 | ``command + L``\n上移一行 | ``option + command + ]``\n下移一行 | ``option + command + [``\n.h文件与.m文件之间的快速切换 | ``control + command + ↑ 或 ↓``\n返回至上一次光标位置 | ``control + command + ← 或 →``\n收起/展开方法代码块 | ``option + command + ← 或 → ``\n快速切换左边导航区域 | ``command + (1 到 8都可以)``\n光标上移一行或下移一行 | ``control + N 或 P``\n在导航器中定位打开的文件 | ``command + shift + J``\n快速保存所有文件 | ``command + option + s``\n\n## 应用程序编译和清理\n\n功能 | 快捷键\n---|---\n运行 App | ``Command + R``\n清除工程 | `` Command + Shift + K``\n构建应用程序 | ``Command + B``\n停止运行 | ``Command + .``\n断点调试 | `` F6 单步调试、F7 跳入、F8 继续``\n\n## 文档和帮助\n\n功能 | 快捷键\n---|---\n文档和参考 | ``Command + Shift + 0 (Zero)``","source":"_posts/xcode-hot-key.md","raw":"---\ntitle: Xcode 常用的快捷键\ndate: 2019-07-31 23:54:29\ntags: [iOS,Xcode]\ncategories: iOS\n---\n\n## 常用\n\n功能 | 快捷键\n---|---\n快速打开某个文件 | ``command + shift + O``\n快速跳转到某一行 | ``command + L``\n上移一行 | ``option + command + ]``\n下移一行 | ``option + command + [``\n.h文件与.m文件之间的快速切换 | ``control + command + ↑ 或 ↓``\n返回至上一次光标位置 | ``control + command + ← 或 →``\n收起/展开方法代码块 | ``option + command + ← 或 → ``\n快速切换左边导航区域 | ``command + (1 到 8都可以)``\n光标上移一行或下移一行 | ``control + N 或 P``\n在导航器中定位打开的文件 | ``command + shift + J``\n快速保存所有文件 | ``command + option + s``\n\n## 应用程序编译和清理\n\n功能 | 快捷键\n---|---\n运行 App | ``Command + R``\n清除工程 | `` Command + Shift + K``\n构建应用程序 | ``Command + B``\n停止运行 | ``Command + .``\n断点调试 | `` F6 单步调试、F7 跳入、F8 继续``\n\n## 文档和帮助\n\n功能 | 快捷键\n---|---\n文档和参考 | ``Command + Shift + 0 (Zero)``","slug":"xcode-hot-key","published":1,"updated":"2019-07-31T15:56:27.074Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cks0kfid50024w3yz0z3lrsbw","content":"<h2 id=\"常用\"><a href=\"#常用\" class=\"headerlink\" title=\"常用\"></a>常用</h2><table>\n<thead>\n<tr>\n<th>功能</th>\n<th>快捷键</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>快速打开某个文件</td>\n<td><code>command + shift + O</code></td>\n</tr>\n<tr>\n<td>快速跳转到某一行</td>\n<td><code>command + L</code></td>\n</tr>\n<tr>\n<td>上移一行</td>\n<td><code>option + command + ]</code></td>\n</tr>\n<tr>\n<td>下移一行</td>\n<td><code>option + command + [</code></td>\n</tr>\n<tr>\n<td>.h文件与.m文件之间的快速切换</td>\n<td><code>control + command + ↑ 或 ↓</code></td>\n</tr>\n<tr>\n<td>返回至上一次光标位置</td>\n<td><code>control + command + ← 或 →</code></td>\n</tr>\n<tr>\n<td>收起/展开方法代码块</td>\n<td><code>option + command + ← 或 →</code></td>\n</tr>\n<tr>\n<td>快速切换左边导航区域</td>\n<td><code>command + (1 到 8都可以)</code></td>\n</tr>\n<tr>\n<td>光标上移一行或下移一行</td>\n<td><code>control + N 或 P</code></td>\n</tr>\n<tr>\n<td>在导航器中定位打开的文件</td>\n<td><code>command + shift + J</code></td>\n</tr>\n<tr>\n<td>快速保存所有文件</td>\n<td><code>command + option + s</code></td>\n</tr>\n</tbody></table>\n<h2 id=\"应用程序编译和清理\"><a href=\"#应用程序编译和清理\" class=\"headerlink\" title=\"应用程序编译和清理\"></a>应用程序编译和清理</h2><table>\n<thead>\n<tr>\n<th>功能</th>\n<th>快捷键</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>运行 App</td>\n<td><code>Command + R</code></td>\n</tr>\n<tr>\n<td>清除工程</td>\n<td><code>Command + Shift + K</code></td>\n</tr>\n<tr>\n<td>构建应用程序</td>\n<td><code>Command + B</code></td>\n</tr>\n<tr>\n<td>停止运行</td>\n<td><code>Command + .</code></td>\n</tr>\n<tr>\n<td>断点调试</td>\n<td><code>F6 单步调试、F7 跳入、F8 继续</code></td>\n</tr>\n</tbody></table>\n<h2 id=\"文档和帮助\"><a href=\"#文档和帮助\" class=\"headerlink\" title=\"文档和帮助\"></a>文档和帮助</h2><table>\n<thead>\n<tr>\n<th>功能</th>\n<th>快捷键</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>文档和参考</td>\n<td><code>Command + Shift + 0 (Zero)</code></td>\n</tr>\n</tbody></table>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"常用\"><a href=\"#常用\" class=\"headerlink\" title=\"常用\"></a>常用</h2><table>\n<thead>\n<tr>\n<th>功能</th>\n<th>快捷键</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>快速打开某个文件</td>\n<td><code>command + shift + O</code></td>\n</tr>\n<tr>\n<td>快速跳转到某一行</td>\n<td><code>command + L</code></td>\n</tr>\n<tr>\n<td>上移一行</td>\n<td><code>option + command + ]</code></td>\n</tr>\n<tr>\n<td>下移一行</td>\n<td><code>option + command + [</code></td>\n</tr>\n<tr>\n<td>.h文件与.m文件之间的快速切换</td>\n<td><code>control + command + ↑ 或 ↓</code></td>\n</tr>\n<tr>\n<td>返回至上一次光标位置</td>\n<td><code>control + command + ← 或 →</code></td>\n</tr>\n<tr>\n<td>收起/展开方法代码块</td>\n<td><code>option + command + ← 或 →</code></td>\n</tr>\n<tr>\n<td>快速切换左边导航区域</td>\n<td><code>command + (1 到 8都可以)</code></td>\n</tr>\n<tr>\n<td>光标上移一行或下移一行</td>\n<td><code>control + N 或 P</code></td>\n</tr>\n<tr>\n<td>在导航器中定位打开的文件</td>\n<td><code>command + shift + J</code></td>\n</tr>\n<tr>\n<td>快速保存所有文件</td>\n<td><code>command + option + s</code></td>\n</tr>\n</tbody></table>\n<h2 id=\"应用程序编译和清理\"><a href=\"#应用程序编译和清理\" class=\"headerlink\" title=\"应用程序编译和清理\"></a>应用程序编译和清理</h2><table>\n<thead>\n<tr>\n<th>功能</th>\n<th>快捷键</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>运行 App</td>\n<td><code>Command + R</code></td>\n</tr>\n<tr>\n<td>清除工程</td>\n<td><code>Command + Shift + K</code></td>\n</tr>\n<tr>\n<td>构建应用程序</td>\n<td><code>Command + B</code></td>\n</tr>\n<tr>\n<td>停止运行</td>\n<td><code>Command + .</code></td>\n</tr>\n<tr>\n<td>断点调试</td>\n<td><code>F6 单步调试、F7 跳入、F8 继续</code></td>\n</tr>\n</tbody></table>\n<h2 id=\"文档和帮助\"><a href=\"#文档和帮助\" class=\"headerlink\" title=\"文档和帮助\"></a>文档和帮助</h2><table>\n<thead>\n<tr>\n<th>功能</th>\n<th>快捷键</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>文档和参考</td>\n<td><code>Command + Shift + 0 (Zero)</code></td>\n</tr>\n</tbody></table>\n"},{"title":"如何为小米手机安装 Charles 证书","date":"2017-03-25T14:25:16.000Z","_content":"\n\n1. 使用第三方浏览器下载 ``.pem`` 格式的文件 \n2. 将这个文件放入小米的 ``DownLoad`` 文件夹下 \n3. 将 ``.pem`` 文件修改为 ``.crt`` 格式 \n4. 设置---更多设置---系统安全---从存储设备安装--选择文件，选定该文件 \n\n亲测，小米 6 Android 8.0，红米note2 Android 5.0.2 可以","source":"_posts/xiaomi-charles-crt.md","raw":"---\ntitle: 如何为小米手机安装 Charles 证书\ndate: 2017-03-25 22:25:16\ntags:\ncategories: 随笔\n---\n\n\n1. 使用第三方浏览器下载 ``.pem`` 格式的文件 \n2. 将这个文件放入小米的 ``DownLoad`` 文件夹下 \n3. 将 ``.pem`` 文件修改为 ``.crt`` 格式 \n4. 设置---更多设置---系统安全---从存储设备安装--选择文件，选定该文件 \n\n亲测，小米 6 Android 8.0，红米note2 Android 5.0.2 可以","slug":"xiaomi-charles-crt","published":1,"updated":"2019-06-22T14:34:31.926Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cks0kfid70029w3yzwq5yrilm","content":"<ol>\n<li>使用第三方浏览器下载 <code>.pem</code> 格式的文件 </li>\n<li>将这个文件放入小米的 <code>DownLoad</code> 文件夹下 </li>\n<li>将 <code>.pem</code> 文件修改为 <code>.crt</code> 格式 </li>\n<li>设置—更多设置—系统安全—从存储设备安装–选择文件，选定该文件 </li>\n</ol>\n<p>亲测，小米 6 Android 8.0，红米note2 Android 5.0.2 可以</p>\n","site":{"data":{}},"excerpt":"","more":"<ol>\n<li>使用第三方浏览器下载 <code>.pem</code> 格式的文件 </li>\n<li>将这个文件放入小米的 <code>DownLoad</code> 文件夹下 </li>\n<li>将 <code>.pem</code> 文件修改为 <code>.crt</code> 格式 </li>\n<li>设置—更多设置—系统安全—从存储设备安装–选择文件，选定该文件 </li>\n</ol>\n<p>亲测，小米 6 Android 8.0，红米note2 Android 5.0.2 可以</p>\n"},{"title":"小米手机 Application Installation Failed","date":"2018-01-13T14:34:56.000Z","_content":"\n今天在开发中遇到了一个比较奇葩的问题，手机连接上电脑并且已经在 Android Studio 运行窗口看到设备，但是 App 就是一直安装不到 小米6 手机上, 也不能通过 adb 命令安装。\n\n![](/images/2018/01/01.png)\n\n然后疯狂查找了一波资料，顺便在这里做了下解决过程的记录。\n\n### 解决步骤：\n\n1. 确认打开开发者选项模式（设置->关于手机->MIUI版本,连续点击MIUI版本）\n2. 开启开发者选项以及 USB 调试\n3. 再运行项目看下是否可以\n\n**如果还是不行**\n\n4. 关闭 “开启MIUI优化”（设置->更多设置->开发者选项->启动MIUI优化）\n5. 重启手机，再次运行项目看看\n\n**如果还是不行**\n\n回到 Android Studio 开发工具\n\n6. 在 File > Settings > Build,Execution,Deployment > Instant Run >取消选择 (Enable Instant Run to hot swap code)\n7. 再次运行项目看看\n\n**如果还是不行**\n\n8. 尝试 Clen Project >> Rebuild Project >> 再尝试下运行项目\n\n> 还是不行，兄dei 那就换手机吧\n> 还有一种情况是手机的存储太低了，导致无法安装 app\n\n### 参考链接\n\n1. https://blog.csdn.net/forwardyzk/article/details/68489711\n2. https://stackoverflow.com/questions/42687607/application-installation-failed-in-android-studio\n\n","source":"_posts/xiaomi-install-failed.md","raw":"---\ntitle: 小米手机 Application Installation Failed\ndate: 2018-01-13 22:34:56\ntags: \ncategories: 随笔\n---\n\n今天在开发中遇到了一个比较奇葩的问题，手机连接上电脑并且已经在 Android Studio 运行窗口看到设备，但是 App 就是一直安装不到 小米6 手机上, 也不能通过 adb 命令安装。\n\n![](/images/2018/01/01.png)\n\n然后疯狂查找了一波资料，顺便在这里做了下解决过程的记录。\n\n### 解决步骤：\n\n1. 确认打开开发者选项模式（设置->关于手机->MIUI版本,连续点击MIUI版本）\n2. 开启开发者选项以及 USB 调试\n3. 再运行项目看下是否可以\n\n**如果还是不行**\n\n4. 关闭 “开启MIUI优化”（设置->更多设置->开发者选项->启动MIUI优化）\n5. 重启手机，再次运行项目看看\n\n**如果还是不行**\n\n回到 Android Studio 开发工具\n\n6. 在 File > Settings > Build,Execution,Deployment > Instant Run >取消选择 (Enable Instant Run to hot swap code)\n7. 再次运行项目看看\n\n**如果还是不行**\n\n8. 尝试 Clen Project >> Rebuild Project >> 再尝试下运行项目\n\n> 还是不行，兄dei 那就换手机吧\n> 还有一种情况是手机的存储太低了，导致无法安装 app\n\n### 参考链接\n\n1. https://blog.csdn.net/forwardyzk/article/details/68489711\n2. https://stackoverflow.com/questions/42687607/application-installation-failed-in-android-studio\n\n","slug":"xiaomi-install-failed","published":1,"updated":"2019-06-22T14:34:40.326Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cks0kfid9002bw3yzynkeomvh","content":"<p>今天在开发中遇到了一个比较奇葩的问题，手机连接上电脑并且已经在 Android Studio 运行窗口看到设备，但是 App 就是一直安装不到 小米6 手机上, 也不能通过 adb 命令安装。</p>\n<p><img src=\"/images/2018/01/01.png\" alt></p>\n<p>然后疯狂查找了一波资料，顺便在这里做了下解决过程的记录。</p>\n<h3 id=\"解决步骤：\"><a href=\"#解决步骤：\" class=\"headerlink\" title=\"解决步骤：\"></a>解决步骤：</h3><ol>\n<li>确认打开开发者选项模式（设置-&gt;关于手机-&gt;MIUI版本,连续点击MIUI版本）</li>\n<li>开启开发者选项以及 USB 调试</li>\n<li>再运行项目看下是否可以</li>\n</ol>\n<p><strong>如果还是不行</strong></p>\n<ol start=\"4\">\n<li>关闭 “开启MIUI优化”（设置-&gt;更多设置-&gt;开发者选项-&gt;启动MIUI优化）</li>\n<li>重启手机，再次运行项目看看</li>\n</ol>\n<p><strong>如果还是不行</strong></p>\n<p>回到 Android Studio 开发工具</p>\n<ol start=\"6\">\n<li>在 File &gt; Settings &gt; Build,Execution,Deployment &gt; Instant Run &gt;取消选择 (Enable Instant Run to hot swap code)</li>\n<li>再次运行项目看看</li>\n</ol>\n<p><strong>如果还是不行</strong></p>\n<ol start=\"8\">\n<li>尝试 Clen Project &gt;&gt; Rebuild Project &gt;&gt; 再尝试下运行项目</li>\n</ol>\n<blockquote>\n<p>还是不行，兄dei 那就换手机吧<br>还有一种情况是手机的存储太低了，导致无法安装 app</p>\n</blockquote>\n<h3 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h3><ol>\n<li><a href=\"https://blog.csdn.net/forwardyzk/article/details/68489711\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/forwardyzk/article/details/68489711</a></li>\n<li><a href=\"https://stackoverflow.com/questions/42687607/application-installation-failed-in-android-studio\" target=\"_blank\" rel=\"noopener\">https://stackoverflow.com/questions/42687607/application-installation-failed-in-android-studio</a></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p>今天在开发中遇到了一个比较奇葩的问题，手机连接上电脑并且已经在 Android Studio 运行窗口看到设备，但是 App 就是一直安装不到 小米6 手机上, 也不能通过 adb 命令安装。</p>\n<p><img src=\"/images/2018/01/01.png\" alt></p>\n<p>然后疯狂查找了一波资料，顺便在这里做了下解决过程的记录。</p>\n<h3 id=\"解决步骤：\"><a href=\"#解决步骤：\" class=\"headerlink\" title=\"解决步骤：\"></a>解决步骤：</h3><ol>\n<li>确认打开开发者选项模式（设置-&gt;关于手机-&gt;MIUI版本,连续点击MIUI版本）</li>\n<li>开启开发者选项以及 USB 调试</li>\n<li>再运行项目看下是否可以</li>\n</ol>\n<p><strong>如果还是不行</strong></p>\n<ol start=\"4\">\n<li>关闭 “开启MIUI优化”（设置-&gt;更多设置-&gt;开发者选项-&gt;启动MIUI优化）</li>\n<li>重启手机，再次运行项目看看</li>\n</ol>\n<p><strong>如果还是不行</strong></p>\n<p>回到 Android Studio 开发工具</p>\n<ol start=\"6\">\n<li>在 File &gt; Settings &gt; Build,Execution,Deployment &gt; Instant Run &gt;取消选择 (Enable Instant Run to hot swap code)</li>\n<li>再次运行项目看看</li>\n</ol>\n<p><strong>如果还是不行</strong></p>\n<ol start=\"8\">\n<li>尝试 Clen Project &gt;&gt; Rebuild Project &gt;&gt; 再尝试下运行项目</li>\n</ol>\n<blockquote>\n<p>还是不行，兄dei 那就换手机吧<br>还有一种情况是手机的存储太低了，导致无法安装 app</p>\n</blockquote>\n<h3 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h3><ol>\n<li><a href=\"https://blog.csdn.net/forwardyzk/article/details/68489711\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/forwardyzk/article/details/68489711</a></li>\n<li><a href=\"https://stackoverflow.com/questions/42687607/application-installation-failed-in-android-studio\" target=\"_blank\" rel=\"noopener\">https://stackoverflow.com/questions/42687607/application-installation-failed-in-android-studio</a></li>\n</ol>\n"},{"title":"Android 中东阿拉伯语适配，看这一篇够了","date":"2017-06-05T16:07:52.000Z","_content":"\n### RTL 语言由来\n\nRTL 是 Right-to-left(从右向左) 的缩写。其意为人们书写阅读习惯是从右向左，朝左继续的，常见的 RTL 语言有阿拉伯语，希伯来语等。\n\n看一下对比：\n\nLTR | RTL\n----|----\n![](/images/2017/06/01-2.jpg) | ![](/images/2017/06/01-3.jpg)\n\n那么对于这种从右到左的习惯，在 Android 布局中有没有支持呢？\n\n答案是有的：从 Android 4.2 即 SDK 17 开始，提供了全面的本地布局支持，允许镜像布局，可以同时支持 RTL 和 LTR。\n\n接下来我将介绍如何一步一步适配阿拉伯语。\n\n### 属性\n\nname | desc | chinese\n---- | ---- | ---\nandroid:layoutDirection | attribute for setting the direction of a component's layout | 设置组件的布局排列方向\nandroid:textDirection | attribute for setting the direction of a component's text | 设置组件的文字排列方向\nandroid:textAlignment | attribute for setting the alignment of a component's text | 设置文字的对齐方式\ngetLayoutDirectionFromLocale() | method for getting the Locale-specified direction | 获取指定地区的惯用布局方式\n\n### 前提条件\n\n在 AndroidManifest.xml 文件中 application 节点添加支持从右到左布局方式代码\n\n```\n <application\n        ...\n        android:supportsRtl=\"true\" >\n        ...\n</application>\n```\n\n### 切换语言\n\n相关链接：[change-language-programmatically-in-android](https://stackoverflow.com/questions/2900023/change-language-programmatically-in-android)  \n对应国家语言代码: [what-is-the-list-of-supported-languages-locales-on-android](https://stackoverflow.com/questions/7973023/what-is-the-list-of-supported-languages-locales-on-android)  \n下面切换语言方式 updateConfiguration 方法在 Api 25 已经过时, 新的切换方式实例 [地址](https://github.com/DroidKaigi/conference-app-2017/pull/315/files)\n```\nString languageToLoad  = \"ar\"; // your language\nResources res = getResources(); \nDisplayMetrics dm = res.getDisplayMetrics();\nLocale locale = new Locale(languageToLoad); \nLocale.setDefault(locale);\nConfiguration config = new Configuration();\nconfig.locale = locale;\nres.updateConfiguration(conf, dm); \n```\n\n### AS 一键适配\n\nAS 支持一键适配 RTL，主要是在原来 Layout 中设置 Left 和 Right 属性的补充添加 Start 和 End 属性（你们在写布局的时候是不是很少用到 paddingStart、marginStart？接下来你们写布局的时候可不能再偷懒了，该加的还是得加上)\n\nStart 属性在 LTR 中对应 Left，在 RTL 中对应 Right，在API 17开始支持，为了兼容低版本，需要同时有 Left 和 Start。从市场来看，Android 4.2 系统以下的手机用户已经不多了，我的建议是可以不兼容，具体还得你们看自家产品在 4.2 系统以下用户数。\n\n> Refactor > Add RTL Support Where Possible...\n\n<img src=\"/images/2017/06/01-1.png\" width=\"516px\" height=\"379px\">\n\n### 利用第三方插件\n\n名称 | 描述\n------ | ------\n[gradle-android-rtl](https://github.com/znyang/gradle-android-rtl) | 自动修复布局文件中未添加RTL支持的标签 \n\n与 AS 插件的比较：\n\n- 性能更好。在处理大批量文件修改时，用AS工具会出现卡顿\n- 支持padding标签的补齐\n\n### 使用全局样式\n\n#### EditText\n\n发现 EditText 控件基本都需要设置下面两个属性  \n相关链接：[set-a-consistent-style-to-all-edittext-for-e-g](https://stackoverflow.com/questions/10903647/set-a-consistent-style-to-all-edittext-for-e-g\n)\n\n```\nandroid:textAlignment=\"viewStart\"\nandroid:gravity=\"start\"\n```\n那我们就可以在 style.xml 样式中全部 EditText 都设置\n\n```\n<style name=\"AppTheme\" parent=\"Theme.AppCompat.Light.NoActionBar\">\n       ...\n       <item name=\"editTextStyle\">@style/EditTextStyle.Alignment</item>\n       ...\n</style>\n\n<style name=\"EditTextStyle.Alignment\" parent=\"@android:style/Widget.EditText\">\n        <item name=\"android:textAlignment\">viewStart</item>\n        <item name=\"android:gravity\">start</item>\n        <item name=\"android:textDirection\">locale</item>\n</style>\n```\n\n#### TextView\n\n全局给所有 TextView 添加一个 RTL 属性  \n相关链接:[setting-global-styles-for-views-in-android](https://stackoverflow.com/questions/3078081/setting-global-styles-for-views-in-android)\n\n```\n<style name=\"AppTheme\" parent=\"Theme.AppCompat.Light.NoActionBar\">\n       ...\n       <item name=\"android:textViewStyle\">@style/TextViewStyle.TextDirection</item>\n       ...\n</style>\n\n<style name=\"TextViewStyle.TextDirection\" parent=\"android:Widget.TextView\">\n        <item name=\"android:textDirection\">locale</item>\n</style>\n```\n\n### 判断是否是 RTL 布局\n\n```\nTextUtilsCompat.getLayoutDirectionFromLocale(Locale.getDefault()) == LayoutDirection.RTL\n```\n\n### 对集合进行倒序处理\n\n在某些场合下, 这个方法很有用\n```\nCollections.reverse(List<?> list);\n```\n\n### 代码动态设置控件 setMargins\n\n```\nFrameLayout.LayoutParams params = new FrameLayout.LayoutParams(\n                ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT);\nparams.setMargins(10, 0, 10, 0);\nparams.setMarginEnd(10);\n```\n\n### ViewPager\n\n相关链接: [tabs-swipe-direction-in-right-to-left-android-app](https://stackoverflow.com/questions/37196714/tabs-swipe-direction-in-right-to-left-android-app)\n\n> Android 官方控件大多支持 RTL，ViewPager 除外，GitHub 上面有人对 ViewPager 进行修改支持 RTL, [地址](https://github.com/diego-gomez-olvera/RtlViewPager)\n\n### WebView\n\n在 Android7.0 以上系统，阿语环境下，第一次打开存在 WebView 页面，会导致页面其他控件镜像失败。\n\n重现的步骤：先将 App 切换成 阿语 --> 完全退出 App --> 打开 App --> 点击一个 web 活动页 --> 页面 toolbar 返回按钮会看到镜像失败\n\n解决方法：``在存在 WebView 的 Activity 切换语言之前加多行代码 new WebView(this).destroy()。``\n\n参考链接：[android-webview-language-changes-abruptly-on-android-7-0-and-above](https://stackoverflow.com/questions/40398528/android-webview-language-changes-abruptly-on-android-7-0-and-above)\n\n### 适配总结\n\n1. 横向布局 LinearLayout ，可以使用 FrameLayout，控件需要靠左或靠右可以使用 layout_gravity 设置对应属性\n2. 切换阿拉伯语时，网格布局 item 之间的距离会出现增大问题，处理方法是：网格分割线 ItemDecoration 需要加入语言来判断，调换原来设置左右的边距即可\n3. 禁止掉之前的侧滑返回，以免出现冲突\n4. 一些方向图标，重新做一个相对方向的放到 mipmap-ldrtl-xxxhdpi 包下\n5. 动画翻转, 放在 anim-ldrtl 将对应的动画进行反向处理\n6. 布局里如果设置了 paddingLeft、drawableLeft 等等这些属性更改为一个支持 RTL 的属性 paddingStart、drawableStart；但是有些地方可以不加的，例如：购物车上的数量徽章，加了之后感觉怪怪的，所以还是不加了\n7. 利用在 AS 右边的预览布局工具中的语言切换工具，切换成阿拉伯语，能实时看到布局的效果图\n8. EditText 添加 android:layoutDirection=\"locale\" ，如果外面有 TextInputLayout 的需给它设置 android:textDirection=\"locale\" ，如果输入类型时密码时还需添加一个属性 android:textAlignment=\"viewStart\"\n9. TextView 需要加上 android:textAlignment=\"viewStart 或 viewEnd\" 以及 android:textDirection=\"locale\"\n10. RecyclerView 网络布局的可以考虑使用 StaggeredGridLayoutManager ，如果数量太多的网格布局，不太建议使用，可能会出现滑动混乱\n11. 阿拉伯语目录下的 String.xml 文件, 出现占位符 d% 需要注意改为 %d, 但又并不是所有都改成这样, 目前我发现当代码中使用了 Toast 和 SpannableString 属性的就需要更改为 %d\n\n### 建议计划\n\n1. 从基础类开始入手，判断是否是阿拉伯语，如果是需要将界面设置为从右到左的显示方式\n2. 分模块进行适配\n3. 复杂的模块，可以放到 layout-ldrtl 包下，单独做一个布局来适配阿拉伯语，例如详情页\n\n### 参考资料\n\n1. https://android-developers.googleblog.com/2013/03/native-rtl-support-in-android-42.html\n2. https://medium.com/@zhangqichuan/rtl-support-in-android-898e11f31561\n3. https://mobikul.com/just-few-steps-to-make-your-app-rtl-supportable/\n4. https://blog.robustastudio.com/featured/android-rtl-support/\n5. http://blog.csdn.net/figo0423/article/details/50241363\n6. http://blog.csdn.net/wxx614817/article/details/50586388\n7. http://jiajixin.cn/2016/10/08/android_adapt_rtl/\n8. http://www.apkbus.com/blog-327085-57866.html\n9. http://droidyue.com/blog/2014/07/07/support-rtl-in-android/index.html\n10. http://chuansong.me/n/920084451521","source":"_posts/android-rtl.md","raw":"---\ntitle: Android 中东阿拉伯语适配，看这一篇够了\ndate: 2017-06-06 00:07:52\ntags: [Android]\ncategories: Android\n---\n\n### RTL 语言由来\n\nRTL 是 Right-to-left(从右向左) 的缩写。其意为人们书写阅读习惯是从右向左，朝左继续的，常见的 RTL 语言有阿拉伯语，希伯来语等。\n\n看一下对比：\n\nLTR | RTL\n----|----\n![](/images/2017/06/01-2.jpg) | ![](/images/2017/06/01-3.jpg)\n\n那么对于这种从右到左的习惯，在 Android 布局中有没有支持呢？\n\n答案是有的：从 Android 4.2 即 SDK 17 开始，提供了全面的本地布局支持，允许镜像布局，可以同时支持 RTL 和 LTR。\n\n接下来我将介绍如何一步一步适配阿拉伯语。\n\n### 属性\n\nname | desc | chinese\n---- | ---- | ---\nandroid:layoutDirection | attribute for setting the direction of a component's layout | 设置组件的布局排列方向\nandroid:textDirection | attribute for setting the direction of a component's text | 设置组件的文字排列方向\nandroid:textAlignment | attribute for setting the alignment of a component's text | 设置文字的对齐方式\ngetLayoutDirectionFromLocale() | method for getting the Locale-specified direction | 获取指定地区的惯用布局方式\n\n### 前提条件\n\n在 AndroidManifest.xml 文件中 application 节点添加支持从右到左布局方式代码\n\n```\n <application\n        ...\n        android:supportsRtl=\"true\" >\n        ...\n</application>\n```\n\n### 切换语言\n\n相关链接：[change-language-programmatically-in-android](https://stackoverflow.com/questions/2900023/change-language-programmatically-in-android)  \n对应国家语言代码: [what-is-the-list-of-supported-languages-locales-on-android](https://stackoverflow.com/questions/7973023/what-is-the-list-of-supported-languages-locales-on-android)  \n下面切换语言方式 updateConfiguration 方法在 Api 25 已经过时, 新的切换方式实例 [地址](https://github.com/DroidKaigi/conference-app-2017/pull/315/files)\n```\nString languageToLoad  = \"ar\"; // your language\nResources res = getResources(); \nDisplayMetrics dm = res.getDisplayMetrics();\nLocale locale = new Locale(languageToLoad); \nLocale.setDefault(locale);\nConfiguration config = new Configuration();\nconfig.locale = locale;\nres.updateConfiguration(conf, dm); \n```\n\n### AS 一键适配\n\nAS 支持一键适配 RTL，主要是在原来 Layout 中设置 Left 和 Right 属性的补充添加 Start 和 End 属性（你们在写布局的时候是不是很少用到 paddingStart、marginStart？接下来你们写布局的时候可不能再偷懒了，该加的还是得加上)\n\nStart 属性在 LTR 中对应 Left，在 RTL 中对应 Right，在API 17开始支持，为了兼容低版本，需要同时有 Left 和 Start。从市场来看，Android 4.2 系统以下的手机用户已经不多了，我的建议是可以不兼容，具体还得你们看自家产品在 4.2 系统以下用户数。\n\n> Refactor > Add RTL Support Where Possible...\n\n<img src=\"/images/2017/06/01-1.png\" width=\"516px\" height=\"379px\">\n\n### 利用第三方插件\n\n名称 | 描述\n------ | ------\n[gradle-android-rtl](https://github.com/znyang/gradle-android-rtl) | 自动修复布局文件中未添加RTL支持的标签 \n\n与 AS 插件的比较：\n\n- 性能更好。在处理大批量文件修改时，用AS工具会出现卡顿\n- 支持padding标签的补齐\n\n### 使用全局样式\n\n#### EditText\n\n发现 EditText 控件基本都需要设置下面两个属性  \n相关链接：[set-a-consistent-style-to-all-edittext-for-e-g](https://stackoverflow.com/questions/10903647/set-a-consistent-style-to-all-edittext-for-e-g\n)\n\n```\nandroid:textAlignment=\"viewStart\"\nandroid:gravity=\"start\"\n```\n那我们就可以在 style.xml 样式中全部 EditText 都设置\n\n```\n<style name=\"AppTheme\" parent=\"Theme.AppCompat.Light.NoActionBar\">\n       ...\n       <item name=\"editTextStyle\">@style/EditTextStyle.Alignment</item>\n       ...\n</style>\n\n<style name=\"EditTextStyle.Alignment\" parent=\"@android:style/Widget.EditText\">\n        <item name=\"android:textAlignment\">viewStart</item>\n        <item name=\"android:gravity\">start</item>\n        <item name=\"android:textDirection\">locale</item>\n</style>\n```\n\n#### TextView\n\n全局给所有 TextView 添加一个 RTL 属性  \n相关链接:[setting-global-styles-for-views-in-android](https://stackoverflow.com/questions/3078081/setting-global-styles-for-views-in-android)\n\n```\n<style name=\"AppTheme\" parent=\"Theme.AppCompat.Light.NoActionBar\">\n       ...\n       <item name=\"android:textViewStyle\">@style/TextViewStyle.TextDirection</item>\n       ...\n</style>\n\n<style name=\"TextViewStyle.TextDirection\" parent=\"android:Widget.TextView\">\n        <item name=\"android:textDirection\">locale</item>\n</style>\n```\n\n### 判断是否是 RTL 布局\n\n```\nTextUtilsCompat.getLayoutDirectionFromLocale(Locale.getDefault()) == LayoutDirection.RTL\n```\n\n### 对集合进行倒序处理\n\n在某些场合下, 这个方法很有用\n```\nCollections.reverse(List<?> list);\n```\n\n### 代码动态设置控件 setMargins\n\n```\nFrameLayout.LayoutParams params = new FrameLayout.LayoutParams(\n                ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT);\nparams.setMargins(10, 0, 10, 0);\nparams.setMarginEnd(10);\n```\n\n### ViewPager\n\n相关链接: [tabs-swipe-direction-in-right-to-left-android-app](https://stackoverflow.com/questions/37196714/tabs-swipe-direction-in-right-to-left-android-app)\n\n> Android 官方控件大多支持 RTL，ViewPager 除外，GitHub 上面有人对 ViewPager 进行修改支持 RTL, [地址](https://github.com/diego-gomez-olvera/RtlViewPager)\n\n### WebView\n\n在 Android7.0 以上系统，阿语环境下，第一次打开存在 WebView 页面，会导致页面其他控件镜像失败。\n\n重现的步骤：先将 App 切换成 阿语 --> 完全退出 App --> 打开 App --> 点击一个 web 活动页 --> 页面 toolbar 返回按钮会看到镜像失败\n\n解决方法：``在存在 WebView 的 Activity 切换语言之前加多行代码 new WebView(this).destroy()。``\n\n参考链接：[android-webview-language-changes-abruptly-on-android-7-0-and-above](https://stackoverflow.com/questions/40398528/android-webview-language-changes-abruptly-on-android-7-0-and-above)\n\n### 适配总结\n\n1. 横向布局 LinearLayout ，可以使用 FrameLayout，控件需要靠左或靠右可以使用 layout_gravity 设置对应属性\n2. 切换阿拉伯语时，网格布局 item 之间的距离会出现增大问题，处理方法是：网格分割线 ItemDecoration 需要加入语言来判断，调换原来设置左右的边距即可\n3. 禁止掉之前的侧滑返回，以免出现冲突\n4. 一些方向图标，重新做一个相对方向的放到 mipmap-ldrtl-xxxhdpi 包下\n5. 动画翻转, 放在 anim-ldrtl 将对应的动画进行反向处理\n6. 布局里如果设置了 paddingLeft、drawableLeft 等等这些属性更改为一个支持 RTL 的属性 paddingStart、drawableStart；但是有些地方可以不加的，例如：购物车上的数量徽章，加了之后感觉怪怪的，所以还是不加了\n7. 利用在 AS 右边的预览布局工具中的语言切换工具，切换成阿拉伯语，能实时看到布局的效果图\n8. EditText 添加 android:layoutDirection=\"locale\" ，如果外面有 TextInputLayout 的需给它设置 android:textDirection=\"locale\" ，如果输入类型时密码时还需添加一个属性 android:textAlignment=\"viewStart\"\n9. TextView 需要加上 android:textAlignment=\"viewStart 或 viewEnd\" 以及 android:textDirection=\"locale\"\n10. RecyclerView 网络布局的可以考虑使用 StaggeredGridLayoutManager ，如果数量太多的网格布局，不太建议使用，可能会出现滑动混乱\n11. 阿拉伯语目录下的 String.xml 文件, 出现占位符 d% 需要注意改为 %d, 但又并不是所有都改成这样, 目前我发现当代码中使用了 Toast 和 SpannableString 属性的就需要更改为 %d\n\n### 建议计划\n\n1. 从基础类开始入手，判断是否是阿拉伯语，如果是需要将界面设置为从右到左的显示方式\n2. 分模块进行适配\n3. 复杂的模块，可以放到 layout-ldrtl 包下，单独做一个布局来适配阿拉伯语，例如详情页\n\n### 参考资料\n\n1. https://android-developers.googleblog.com/2013/03/native-rtl-support-in-android-42.html\n2. https://medium.com/@zhangqichuan/rtl-support-in-android-898e11f31561\n3. https://mobikul.com/just-few-steps-to-make-your-app-rtl-supportable/\n4. https://blog.robustastudio.com/featured/android-rtl-support/\n5. http://blog.csdn.net/figo0423/article/details/50241363\n6. http://blog.csdn.net/wxx614817/article/details/50586388\n7. http://jiajixin.cn/2016/10/08/android_adapt_rtl/\n8. http://www.apkbus.com/blog-327085-57866.html\n9. http://droidyue.com/blog/2014/07/07/support-rtl-in-android/index.html\n10. http://chuansong.me/n/920084451521","slug":"android-rtl","published":1,"updated":"2019-09-21T10:19:12.077Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cks0kfiec0041w3yz31kd91fh","content":"<h3 id=\"RTL-语言由来\"><a href=\"#RTL-语言由来\" class=\"headerlink\" title=\"RTL 语言由来\"></a>RTL 语言由来</h3><p>RTL 是 Right-to-left(从右向左) 的缩写。其意为人们书写阅读习惯是从右向左，朝左继续的，常见的 RTL 语言有阿拉伯语，希伯来语等。</p>\n<p>看一下对比：</p>\n<table>\n<thead>\n<tr>\n<th>LTR</th>\n<th>RTL</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><img src=\"/images/2017/06/01-2.jpg\" alt></td>\n<td><img src=\"/images/2017/06/01-3.jpg\" alt></td>\n</tr>\n</tbody></table>\n<p>那么对于这种从右到左的习惯，在 Android 布局中有没有支持呢？</p>\n<p>答案是有的：从 Android 4.2 即 SDK 17 开始，提供了全面的本地布局支持，允许镜像布局，可以同时支持 RTL 和 LTR。</p>\n<p>接下来我将介绍如何一步一步适配阿拉伯语。</p>\n<h3 id=\"属性\"><a href=\"#属性\" class=\"headerlink\" title=\"属性\"></a>属性</h3><table>\n<thead>\n<tr>\n<th>name</th>\n<th>desc</th>\n<th>chinese</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>android:layoutDirection</td>\n<td>attribute for setting the direction of a component’s layout</td>\n<td>设置组件的布局排列方向</td>\n</tr>\n<tr>\n<td>android:textDirection</td>\n<td>attribute for setting the direction of a component’s text</td>\n<td>设置组件的文字排列方向</td>\n</tr>\n<tr>\n<td>android:textAlignment</td>\n<td>attribute for setting the alignment of a component’s text</td>\n<td>设置文字的对齐方式</td>\n</tr>\n<tr>\n<td>getLayoutDirectionFromLocale()</td>\n<td>method for getting the Locale-specified direction</td>\n<td>获取指定地区的惯用布局方式</td>\n</tr>\n</tbody></table>\n<h3 id=\"前提条件\"><a href=\"#前提条件\" class=\"headerlink\" title=\"前提条件\"></a>前提条件</h3><p>在 AndroidManifest.xml 文件中 application 节点添加支持从右到左布局方式代码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> &lt;application</span><br><span class=\"line\">        ...</span><br><span class=\"line\">        android:supportsRtl=&quot;true&quot; &gt;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">&lt;/application&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"切换语言\"><a href=\"#切换语言\" class=\"headerlink\" title=\"切换语言\"></a>切换语言</h3><p>相关链接：<a href=\"https://stackoverflow.com/questions/2900023/change-language-programmatically-in-android\" target=\"_blank\" rel=\"noopener\">change-language-programmatically-in-android</a><br>对应国家语言代码: <a href=\"https://stackoverflow.com/questions/7973023/what-is-the-list-of-supported-languages-locales-on-android\" target=\"_blank\" rel=\"noopener\">what-is-the-list-of-supported-languages-locales-on-android</a><br>下面切换语言方式 updateConfiguration 方法在 Api 25 已经过时, 新的切换方式实例 <a href=\"https://github.com/DroidKaigi/conference-app-2017/pull/315/files\" target=\"_blank\" rel=\"noopener\">地址</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String languageToLoad  = &quot;ar&quot;; // your language</span><br><span class=\"line\">Resources res = getResources(); </span><br><span class=\"line\">DisplayMetrics dm = res.getDisplayMetrics();</span><br><span class=\"line\">Locale locale = new Locale(languageToLoad); </span><br><span class=\"line\">Locale.setDefault(locale);</span><br><span class=\"line\">Configuration config = new Configuration();</span><br><span class=\"line\">config.locale = locale;</span><br><span class=\"line\">res.updateConfiguration(conf, dm);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"AS-一键适配\"><a href=\"#AS-一键适配\" class=\"headerlink\" title=\"AS 一键适配\"></a>AS 一键适配</h3><p>AS 支持一键适配 RTL，主要是在原来 Layout 中设置 Left 和 Right 属性的补充添加 Start 和 End 属性（你们在写布局的时候是不是很少用到 paddingStart、marginStart？接下来你们写布局的时候可不能再偷懒了，该加的还是得加上)</p>\n<p>Start 属性在 LTR 中对应 Left，在 RTL 中对应 Right，在API 17开始支持，为了兼容低版本，需要同时有 Left 和 Start。从市场来看，Android 4.2 系统以下的手机用户已经不多了，我的建议是可以不兼容，具体还得你们看自家产品在 4.2 系统以下用户数。</p>\n<blockquote>\n<p>Refactor &gt; Add RTL Support Where Possible…</p>\n</blockquote>\n<img src=\"/images/2017/06/01-1.png\" width=\"516px\" height=\"379px\">\n\n<h3 id=\"利用第三方插件\"><a href=\"#利用第三方插件\" class=\"headerlink\" title=\"利用第三方插件\"></a>利用第三方插件</h3><table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><a href=\"https://github.com/znyang/gradle-android-rtl\" target=\"_blank\" rel=\"noopener\">gradle-android-rtl</a></td>\n<td>自动修复布局文件中未添加RTL支持的标签</td>\n</tr>\n</tbody></table>\n<p>与 AS 插件的比较：</p>\n<ul>\n<li>性能更好。在处理大批量文件修改时，用AS工具会出现卡顿</li>\n<li>支持padding标签的补齐</li>\n</ul>\n<h3 id=\"使用全局样式\"><a href=\"#使用全局样式\" class=\"headerlink\" title=\"使用全局样式\"></a>使用全局样式</h3><h4 id=\"EditText\"><a href=\"#EditText\" class=\"headerlink\" title=\"EditText\"></a>EditText</h4><p>发现 EditText 控件基本都需要设置下面两个属性<br>相关链接：<a href=\"https://stackoverflow.com/questions/10903647/set-a-consistent-style-to-all-edittext-for-e-g\" target=\"_blank\" rel=\"noopener\">set-a-consistent-style-to-all-edittext-for-e-g</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">android:textAlignment=&quot;viewStart&quot;</span><br><span class=\"line\">android:gravity=&quot;start&quot;</span><br></pre></td></tr></table></figure>\n\n<p>那我们就可以在 style.xml 样式中全部 EditText 都设置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;style name=&quot;AppTheme&quot; parent=&quot;Theme.AppCompat.Light.NoActionBar&quot;&gt;</span><br><span class=\"line\">       ...</span><br><span class=\"line\">       &lt;item name=&quot;editTextStyle&quot;&gt;@style/EditTextStyle.Alignment&lt;/item&gt;</span><br><span class=\"line\">       ...</span><br><span class=\"line\">&lt;/style&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;style name=&quot;EditTextStyle.Alignment&quot; parent=&quot;@android:style/Widget.EditText&quot;&gt;</span><br><span class=\"line\">        &lt;item name=&quot;android:textAlignment&quot;&gt;viewStart&lt;/item&gt;</span><br><span class=\"line\">        &lt;item name=&quot;android:gravity&quot;&gt;start&lt;/item&gt;</span><br><span class=\"line\">        &lt;item name=&quot;android:textDirection&quot;&gt;locale&lt;/item&gt;</span><br><span class=\"line\">&lt;/style&gt;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"TextView\"><a href=\"#TextView\" class=\"headerlink\" title=\"TextView\"></a>TextView</h4><p>全局给所有 TextView 添加一个 RTL 属性<br>相关链接:<a href=\"https://stackoverflow.com/questions/3078081/setting-global-styles-for-views-in-android\" target=\"_blank\" rel=\"noopener\">setting-global-styles-for-views-in-android</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;style name=&quot;AppTheme&quot; parent=&quot;Theme.AppCompat.Light.NoActionBar&quot;&gt;</span><br><span class=\"line\">       ...</span><br><span class=\"line\">       &lt;item name=&quot;android:textViewStyle&quot;&gt;@style/TextViewStyle.TextDirection&lt;/item&gt;</span><br><span class=\"line\">       ...</span><br><span class=\"line\">&lt;/style&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;style name=&quot;TextViewStyle.TextDirection&quot; parent=&quot;android:Widget.TextView&quot;&gt;</span><br><span class=\"line\">        &lt;item name=&quot;android:textDirection&quot;&gt;locale&lt;/item&gt;</span><br><span class=\"line\">&lt;/style&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"判断是否是-RTL-布局\"><a href=\"#判断是否是-RTL-布局\" class=\"headerlink\" title=\"判断是否是 RTL 布局\"></a>判断是否是 RTL 布局</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TextUtilsCompat.getLayoutDirectionFromLocale(Locale.getDefault()) == LayoutDirection.RTL</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"对集合进行倒序处理\"><a href=\"#对集合进行倒序处理\" class=\"headerlink\" title=\"对集合进行倒序处理\"></a>对集合进行倒序处理</h3><p>在某些场合下, 这个方法很有用</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Collections.reverse(List&lt;?&gt; list);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"代码动态设置控件-setMargins\"><a href=\"#代码动态设置控件-setMargins\" class=\"headerlink\" title=\"代码动态设置控件 setMargins\"></a>代码动态设置控件 setMargins</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FrameLayout.LayoutParams params = new FrameLayout.LayoutParams(</span><br><span class=\"line\">                ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT);</span><br><span class=\"line\">params.setMargins(10, 0, 10, 0);</span><br><span class=\"line\">params.setMarginEnd(10);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"ViewPager\"><a href=\"#ViewPager\" class=\"headerlink\" title=\"ViewPager\"></a>ViewPager</h3><p>相关链接: <a href=\"https://stackoverflow.com/questions/37196714/tabs-swipe-direction-in-right-to-left-android-app\" target=\"_blank\" rel=\"noopener\">tabs-swipe-direction-in-right-to-left-android-app</a></p>\n<blockquote>\n<p>Android 官方控件大多支持 RTL，ViewPager 除外，GitHub 上面有人对 ViewPager 进行修改支持 RTL, <a href=\"https://github.com/diego-gomez-olvera/RtlViewPager\" target=\"_blank\" rel=\"noopener\">地址</a></p>\n</blockquote>\n<h3 id=\"WebView\"><a href=\"#WebView\" class=\"headerlink\" title=\"WebView\"></a>WebView</h3><p>在 Android7.0 以上系统，阿语环境下，第一次打开存在 WebView 页面，会导致页面其他控件镜像失败。</p>\n<p>重现的步骤：先将 App 切换成 阿语 –&gt; 完全退出 App –&gt; 打开 App –&gt; 点击一个 web 活动页 –&gt; 页面 toolbar 返回按钮会看到镜像失败</p>\n<p>解决方法：<code>在存在 WebView 的 Activity 切换语言之前加多行代码 new WebView(this).destroy()。</code></p>\n<p>参考链接：<a href=\"https://stackoverflow.com/questions/40398528/android-webview-language-changes-abruptly-on-android-7-0-and-above\" target=\"_blank\" rel=\"noopener\">android-webview-language-changes-abruptly-on-android-7-0-and-above</a></p>\n<h3 id=\"适配总结\"><a href=\"#适配总结\" class=\"headerlink\" title=\"适配总结\"></a>适配总结</h3><ol>\n<li>横向布局 LinearLayout ，可以使用 FrameLayout，控件需要靠左或靠右可以使用 layout_gravity 设置对应属性</li>\n<li>切换阿拉伯语时，网格布局 item 之间的距离会出现增大问题，处理方法是：网格分割线 ItemDecoration 需要加入语言来判断，调换原来设置左右的边距即可</li>\n<li>禁止掉之前的侧滑返回，以免出现冲突</li>\n<li>一些方向图标，重新做一个相对方向的放到 mipmap-ldrtl-xxxhdpi 包下</li>\n<li>动画翻转, 放在 anim-ldrtl 将对应的动画进行反向处理</li>\n<li>布局里如果设置了 paddingLeft、drawableLeft 等等这些属性更改为一个支持 RTL 的属性 paddingStart、drawableStart；但是有些地方可以不加的，例如：购物车上的数量徽章，加了之后感觉怪怪的，所以还是不加了</li>\n<li>利用在 AS 右边的预览布局工具中的语言切换工具，切换成阿拉伯语，能实时看到布局的效果图</li>\n<li>EditText 添加 android:layoutDirection=”locale” ，如果外面有 TextInputLayout 的需给它设置 android:textDirection=”locale” ，如果输入类型时密码时还需添加一个属性 android:textAlignment=”viewStart”</li>\n<li>TextView 需要加上 android:textAlignment=”viewStart 或 viewEnd” 以及 android:textDirection=”locale”</li>\n<li>RecyclerView 网络布局的可以考虑使用 StaggeredGridLayoutManager ，如果数量太多的网格布局，不太建议使用，可能会出现滑动混乱</li>\n<li>阿拉伯语目录下的 String.xml 文件, 出现占位符 d% 需要注意改为 %d, 但又并不是所有都改成这样, 目前我发现当代码中使用了 Toast 和 SpannableString 属性的就需要更改为 %d</li>\n</ol>\n<h3 id=\"建议计划\"><a href=\"#建议计划\" class=\"headerlink\" title=\"建议计划\"></a>建议计划</h3><ol>\n<li>从基础类开始入手，判断是否是阿拉伯语，如果是需要将界面设置为从右到左的显示方式</li>\n<li>分模块进行适配</li>\n<li>复杂的模块，可以放到 layout-ldrtl 包下，单独做一个布局来适配阿拉伯语，例如详情页</li>\n</ol>\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><ol>\n<li><a href=\"https://android-developers.googleblog.com/2013/03/native-rtl-support-in-android-42.html\" target=\"_blank\" rel=\"noopener\">https://android-developers.googleblog.com/2013/03/native-rtl-support-in-android-42.html</a></li>\n<li><a href=\"https://medium.com/@zhangqichuan/rtl-support-in-android-898e11f31561\" target=\"_blank\" rel=\"noopener\">https://medium.com/@zhangqichuan/rtl-support-in-android-898e11f31561</a></li>\n<li><a href=\"https://mobikul.com/just-few-steps-to-make-your-app-rtl-supportable/\" target=\"_blank\" rel=\"noopener\">https://mobikul.com/just-few-steps-to-make-your-app-rtl-supportable/</a></li>\n<li><a href=\"https://blog.robustastudio.com/featured/android-rtl-support/\" target=\"_blank\" rel=\"noopener\">https://blog.robustastudio.com/featured/android-rtl-support/</a></li>\n<li><a href=\"http://blog.csdn.net/figo0423/article/details/50241363\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/figo0423/article/details/50241363</a></li>\n<li><a href=\"http://blog.csdn.net/wxx614817/article/details/50586388\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/wxx614817/article/details/50586388</a></li>\n<li><a href=\"http://jiajixin.cn/2016/10/08/android_adapt_rtl/\" target=\"_blank\" rel=\"noopener\">http://jiajixin.cn/2016/10/08/android_adapt_rtl/</a></li>\n<li><a href=\"http://www.apkbus.com/blog-327085-57866.html\" target=\"_blank\" rel=\"noopener\">http://www.apkbus.com/blog-327085-57866.html</a></li>\n<li><a href=\"http://droidyue.com/blog/2014/07/07/support-rtl-in-android/index.html\" target=\"_blank\" rel=\"noopener\">http://droidyue.com/blog/2014/07/07/support-rtl-in-android/index.html</a></li>\n<li><a href=\"http://chuansong.me/n/920084451521\" target=\"_blank\" rel=\"noopener\">http://chuansong.me/n/920084451521</a></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"RTL-语言由来\"><a href=\"#RTL-语言由来\" class=\"headerlink\" title=\"RTL 语言由来\"></a>RTL 语言由来</h3><p>RTL 是 Right-to-left(从右向左) 的缩写。其意为人们书写阅读习惯是从右向左，朝左继续的，常见的 RTL 语言有阿拉伯语，希伯来语等。</p>\n<p>看一下对比：</p>\n<table>\n<thead>\n<tr>\n<th>LTR</th>\n<th>RTL</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><img src=\"/images/2017/06/01-2.jpg\" alt></td>\n<td><img src=\"/images/2017/06/01-3.jpg\" alt></td>\n</tr>\n</tbody></table>\n<p>那么对于这种从右到左的习惯，在 Android 布局中有没有支持呢？</p>\n<p>答案是有的：从 Android 4.2 即 SDK 17 开始，提供了全面的本地布局支持，允许镜像布局，可以同时支持 RTL 和 LTR。</p>\n<p>接下来我将介绍如何一步一步适配阿拉伯语。</p>\n<h3 id=\"属性\"><a href=\"#属性\" class=\"headerlink\" title=\"属性\"></a>属性</h3><table>\n<thead>\n<tr>\n<th>name</th>\n<th>desc</th>\n<th>chinese</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>android:layoutDirection</td>\n<td>attribute for setting the direction of a component’s layout</td>\n<td>设置组件的布局排列方向</td>\n</tr>\n<tr>\n<td>android:textDirection</td>\n<td>attribute for setting the direction of a component’s text</td>\n<td>设置组件的文字排列方向</td>\n</tr>\n<tr>\n<td>android:textAlignment</td>\n<td>attribute for setting the alignment of a component’s text</td>\n<td>设置文字的对齐方式</td>\n</tr>\n<tr>\n<td>getLayoutDirectionFromLocale()</td>\n<td>method for getting the Locale-specified direction</td>\n<td>获取指定地区的惯用布局方式</td>\n</tr>\n</tbody></table>\n<h3 id=\"前提条件\"><a href=\"#前提条件\" class=\"headerlink\" title=\"前提条件\"></a>前提条件</h3><p>在 AndroidManifest.xml 文件中 application 节点添加支持从右到左布局方式代码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> &lt;application</span><br><span class=\"line\">        ...</span><br><span class=\"line\">        android:supportsRtl=&quot;true&quot; &gt;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">&lt;/application&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"切换语言\"><a href=\"#切换语言\" class=\"headerlink\" title=\"切换语言\"></a>切换语言</h3><p>相关链接：<a href=\"https://stackoverflow.com/questions/2900023/change-language-programmatically-in-android\" target=\"_blank\" rel=\"noopener\">change-language-programmatically-in-android</a><br>对应国家语言代码: <a href=\"https://stackoverflow.com/questions/7973023/what-is-the-list-of-supported-languages-locales-on-android\" target=\"_blank\" rel=\"noopener\">what-is-the-list-of-supported-languages-locales-on-android</a><br>下面切换语言方式 updateConfiguration 方法在 Api 25 已经过时, 新的切换方式实例 <a href=\"https://github.com/DroidKaigi/conference-app-2017/pull/315/files\" target=\"_blank\" rel=\"noopener\">地址</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String languageToLoad  = &quot;ar&quot;; // your language</span><br><span class=\"line\">Resources res = getResources(); </span><br><span class=\"line\">DisplayMetrics dm = res.getDisplayMetrics();</span><br><span class=\"line\">Locale locale = new Locale(languageToLoad); </span><br><span class=\"line\">Locale.setDefault(locale);</span><br><span class=\"line\">Configuration config = new Configuration();</span><br><span class=\"line\">config.locale = locale;</span><br><span class=\"line\">res.updateConfiguration(conf, dm);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"AS-一键适配\"><a href=\"#AS-一键适配\" class=\"headerlink\" title=\"AS 一键适配\"></a>AS 一键适配</h3><p>AS 支持一键适配 RTL，主要是在原来 Layout 中设置 Left 和 Right 属性的补充添加 Start 和 End 属性（你们在写布局的时候是不是很少用到 paddingStart、marginStart？接下来你们写布局的时候可不能再偷懒了，该加的还是得加上)</p>\n<p>Start 属性在 LTR 中对应 Left，在 RTL 中对应 Right，在API 17开始支持，为了兼容低版本，需要同时有 Left 和 Start。从市场来看，Android 4.2 系统以下的手机用户已经不多了，我的建议是可以不兼容，具体还得你们看自家产品在 4.2 系统以下用户数。</p>\n<blockquote>\n<p>Refactor &gt; Add RTL Support Where Possible…</p>\n</blockquote>\n<img src=\"/images/2017/06/01-1.png\" width=\"516px\" height=\"379px\">\n\n<h3 id=\"利用第三方插件\"><a href=\"#利用第三方插件\" class=\"headerlink\" title=\"利用第三方插件\"></a>利用第三方插件</h3><table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><a href=\"https://github.com/znyang/gradle-android-rtl\" target=\"_blank\" rel=\"noopener\">gradle-android-rtl</a></td>\n<td>自动修复布局文件中未添加RTL支持的标签</td>\n</tr>\n</tbody></table>\n<p>与 AS 插件的比较：</p>\n<ul>\n<li>性能更好。在处理大批量文件修改时，用AS工具会出现卡顿</li>\n<li>支持padding标签的补齐</li>\n</ul>\n<h3 id=\"使用全局样式\"><a href=\"#使用全局样式\" class=\"headerlink\" title=\"使用全局样式\"></a>使用全局样式</h3><h4 id=\"EditText\"><a href=\"#EditText\" class=\"headerlink\" title=\"EditText\"></a>EditText</h4><p>发现 EditText 控件基本都需要设置下面两个属性<br>相关链接：<a href=\"https://stackoverflow.com/questions/10903647/set-a-consistent-style-to-all-edittext-for-e-g\" target=\"_blank\" rel=\"noopener\">set-a-consistent-style-to-all-edittext-for-e-g</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">android:textAlignment=&quot;viewStart&quot;</span><br><span class=\"line\">android:gravity=&quot;start&quot;</span><br></pre></td></tr></table></figure>\n\n<p>那我们就可以在 style.xml 样式中全部 EditText 都设置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;style name=&quot;AppTheme&quot; parent=&quot;Theme.AppCompat.Light.NoActionBar&quot;&gt;</span><br><span class=\"line\">       ...</span><br><span class=\"line\">       &lt;item name=&quot;editTextStyle&quot;&gt;@style/EditTextStyle.Alignment&lt;/item&gt;</span><br><span class=\"line\">       ...</span><br><span class=\"line\">&lt;/style&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;style name=&quot;EditTextStyle.Alignment&quot; parent=&quot;@android:style/Widget.EditText&quot;&gt;</span><br><span class=\"line\">        &lt;item name=&quot;android:textAlignment&quot;&gt;viewStart&lt;/item&gt;</span><br><span class=\"line\">        &lt;item name=&quot;android:gravity&quot;&gt;start&lt;/item&gt;</span><br><span class=\"line\">        &lt;item name=&quot;android:textDirection&quot;&gt;locale&lt;/item&gt;</span><br><span class=\"line\">&lt;/style&gt;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"TextView\"><a href=\"#TextView\" class=\"headerlink\" title=\"TextView\"></a>TextView</h4><p>全局给所有 TextView 添加一个 RTL 属性<br>相关链接:<a href=\"https://stackoverflow.com/questions/3078081/setting-global-styles-for-views-in-android\" target=\"_blank\" rel=\"noopener\">setting-global-styles-for-views-in-android</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;style name=&quot;AppTheme&quot; parent=&quot;Theme.AppCompat.Light.NoActionBar&quot;&gt;</span><br><span class=\"line\">       ...</span><br><span class=\"line\">       &lt;item name=&quot;android:textViewStyle&quot;&gt;@style/TextViewStyle.TextDirection&lt;/item&gt;</span><br><span class=\"line\">       ...</span><br><span class=\"line\">&lt;/style&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;style name=&quot;TextViewStyle.TextDirection&quot; parent=&quot;android:Widget.TextView&quot;&gt;</span><br><span class=\"line\">        &lt;item name=&quot;android:textDirection&quot;&gt;locale&lt;/item&gt;</span><br><span class=\"line\">&lt;/style&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"判断是否是-RTL-布局\"><a href=\"#判断是否是-RTL-布局\" class=\"headerlink\" title=\"判断是否是 RTL 布局\"></a>判断是否是 RTL 布局</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TextUtilsCompat.getLayoutDirectionFromLocale(Locale.getDefault()) == LayoutDirection.RTL</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"对集合进行倒序处理\"><a href=\"#对集合进行倒序处理\" class=\"headerlink\" title=\"对集合进行倒序处理\"></a>对集合进行倒序处理</h3><p>在某些场合下, 这个方法很有用</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Collections.reverse(List&lt;?&gt; list);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"代码动态设置控件-setMargins\"><a href=\"#代码动态设置控件-setMargins\" class=\"headerlink\" title=\"代码动态设置控件 setMargins\"></a>代码动态设置控件 setMargins</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FrameLayout.LayoutParams params = new FrameLayout.LayoutParams(</span><br><span class=\"line\">                ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT);</span><br><span class=\"line\">params.setMargins(10, 0, 10, 0);</span><br><span class=\"line\">params.setMarginEnd(10);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"ViewPager\"><a href=\"#ViewPager\" class=\"headerlink\" title=\"ViewPager\"></a>ViewPager</h3><p>相关链接: <a href=\"https://stackoverflow.com/questions/37196714/tabs-swipe-direction-in-right-to-left-android-app\" target=\"_blank\" rel=\"noopener\">tabs-swipe-direction-in-right-to-left-android-app</a></p>\n<blockquote>\n<p>Android 官方控件大多支持 RTL，ViewPager 除外，GitHub 上面有人对 ViewPager 进行修改支持 RTL, <a href=\"https://github.com/diego-gomez-olvera/RtlViewPager\" target=\"_blank\" rel=\"noopener\">地址</a></p>\n</blockquote>\n<h3 id=\"WebView\"><a href=\"#WebView\" class=\"headerlink\" title=\"WebView\"></a>WebView</h3><p>在 Android7.0 以上系统，阿语环境下，第一次打开存在 WebView 页面，会导致页面其他控件镜像失败。</p>\n<p>重现的步骤：先将 App 切换成 阿语 –&gt; 完全退出 App –&gt; 打开 App –&gt; 点击一个 web 活动页 –&gt; 页面 toolbar 返回按钮会看到镜像失败</p>\n<p>解决方法：<code>在存在 WebView 的 Activity 切换语言之前加多行代码 new WebView(this).destroy()。</code></p>\n<p>参考链接：<a href=\"https://stackoverflow.com/questions/40398528/android-webview-language-changes-abruptly-on-android-7-0-and-above\" target=\"_blank\" rel=\"noopener\">android-webview-language-changes-abruptly-on-android-7-0-and-above</a></p>\n<h3 id=\"适配总结\"><a href=\"#适配总结\" class=\"headerlink\" title=\"适配总结\"></a>适配总结</h3><ol>\n<li>横向布局 LinearLayout ，可以使用 FrameLayout，控件需要靠左或靠右可以使用 layout_gravity 设置对应属性</li>\n<li>切换阿拉伯语时，网格布局 item 之间的距离会出现增大问题，处理方法是：网格分割线 ItemDecoration 需要加入语言来判断，调换原来设置左右的边距即可</li>\n<li>禁止掉之前的侧滑返回，以免出现冲突</li>\n<li>一些方向图标，重新做一个相对方向的放到 mipmap-ldrtl-xxxhdpi 包下</li>\n<li>动画翻转, 放在 anim-ldrtl 将对应的动画进行反向处理</li>\n<li>布局里如果设置了 paddingLeft、drawableLeft 等等这些属性更改为一个支持 RTL 的属性 paddingStart、drawableStart；但是有些地方可以不加的，例如：购物车上的数量徽章，加了之后感觉怪怪的，所以还是不加了</li>\n<li>利用在 AS 右边的预览布局工具中的语言切换工具，切换成阿拉伯语，能实时看到布局的效果图</li>\n<li>EditText 添加 android:layoutDirection=”locale” ，如果外面有 TextInputLayout 的需给它设置 android:textDirection=”locale” ，如果输入类型时密码时还需添加一个属性 android:textAlignment=”viewStart”</li>\n<li>TextView 需要加上 android:textAlignment=”viewStart 或 viewEnd” 以及 android:textDirection=”locale”</li>\n<li>RecyclerView 网络布局的可以考虑使用 StaggeredGridLayoutManager ，如果数量太多的网格布局，不太建议使用，可能会出现滑动混乱</li>\n<li>阿拉伯语目录下的 String.xml 文件, 出现占位符 d% 需要注意改为 %d, 但又并不是所有都改成这样, 目前我发现当代码中使用了 Toast 和 SpannableString 属性的就需要更改为 %d</li>\n</ol>\n<h3 id=\"建议计划\"><a href=\"#建议计划\" class=\"headerlink\" title=\"建议计划\"></a>建议计划</h3><ol>\n<li>从基础类开始入手，判断是否是阿拉伯语，如果是需要将界面设置为从右到左的显示方式</li>\n<li>分模块进行适配</li>\n<li>复杂的模块，可以放到 layout-ldrtl 包下，单独做一个布局来适配阿拉伯语，例如详情页</li>\n</ol>\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><ol>\n<li><a href=\"https://android-developers.googleblog.com/2013/03/native-rtl-support-in-android-42.html\" target=\"_blank\" rel=\"noopener\">https://android-developers.googleblog.com/2013/03/native-rtl-support-in-android-42.html</a></li>\n<li><a href=\"https://medium.com/@zhangqichuan/rtl-support-in-android-898e11f31561\" target=\"_blank\" rel=\"noopener\">https://medium.com/@zhangqichuan/rtl-support-in-android-898e11f31561</a></li>\n<li><a href=\"https://mobikul.com/just-few-steps-to-make-your-app-rtl-supportable/\" target=\"_blank\" rel=\"noopener\">https://mobikul.com/just-few-steps-to-make-your-app-rtl-supportable/</a></li>\n<li><a href=\"https://blog.robustastudio.com/featured/android-rtl-support/\" target=\"_blank\" rel=\"noopener\">https://blog.robustastudio.com/featured/android-rtl-support/</a></li>\n<li><a href=\"http://blog.csdn.net/figo0423/article/details/50241363\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/figo0423/article/details/50241363</a></li>\n<li><a href=\"http://blog.csdn.net/wxx614817/article/details/50586388\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/wxx614817/article/details/50586388</a></li>\n<li><a href=\"http://jiajixin.cn/2016/10/08/android_adapt_rtl/\" target=\"_blank\" rel=\"noopener\">http://jiajixin.cn/2016/10/08/android_adapt_rtl/</a></li>\n<li><a href=\"http://www.apkbus.com/blog-327085-57866.html\" target=\"_blank\" rel=\"noopener\">http://www.apkbus.com/blog-327085-57866.html</a></li>\n<li><a href=\"http://droidyue.com/blog/2014/07/07/support-rtl-in-android/index.html\" target=\"_blank\" rel=\"noopener\">http://droidyue.com/blog/2014/07/07/support-rtl-in-android/index.html</a></li>\n<li><a href=\"http://chuansong.me/n/920084451521\" target=\"_blank\" rel=\"noopener\">http://chuansong.me/n/920084451521</a></li>\n</ol>\n"},{"title":"Android 与 Flutter 之间通信","date":"2020-04-02T15:17:58.000Z","_content":"\n### 概述\n\nFlutter 与原生之间的通信机制都是通过 Platform Channel 进行传递，如下图所示：\n\n![image](/images/2020/04/flutter_channel_01.png)\n\n原生 与 Flutter 之间的通信主要有有四种实现方式：\n\n1. 在初始化 Flutter 页面时会传递一个字符串 Route，因此我们就可以通过 Route 从 ``原生`` 向 ``Flutter`` 端传递自己想要的数据；\n2. 通过 MethodChannel 来实现，MethodChannel 支持数据双向传递，有返回值。\n3. ~~通过 EventChannel 来实现，EventChannel 仅支持数据单向传递，无返回值。~~\n4. ~~通过 BasicMessageChannel 来实现，BasicMessageChannel 支持数据双向传递，有返回值。~~\n\n\n### Flutter 向原生通信\n\n\n#### Flutter 端\n\n```dart\n\nclass MethodChannelPage extends StatefulWidget {\n  @override\n  _MethodChannelPageState createState() => _MethodChannelPageState();\n}\n\nclass _MethodChannelPageState extends State<MethodChannelPage> {\n  // 创建通信渠道，通道名称必须唯一，且与原生那边统一\n  MethodChannel methodsChannel = MethodChannel(\"com.chicdeals/methodsChannel\");\n  String _langText = '切换语言';\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold (\n      backgroundColor: Color(0xFFFFFFFF),\n      body: Align(\n        alignment: Alignment.center,\n        child: Container(\n          height: 44,\n          padding: EdgeInsets.only(left: 10, right: 10),\n          alignment: Alignment.center,\n          child: RaisedButton(\n            child: Text(\n              _langText,\n            ),\n            textColor: Colors.white,\n            color: Color(0xFF49C9A7),\n            onPressed: _sendMethodToNative,\n          ),\n        ),\n      ),\n    );\n  }\n\n  Future<void> _sendMethodToNative() async {\n    String sendMsg = 'Flutter切换语言';\n    // 向原生发送消息，标识符为 'flutter_change_language'\n    // 原生那边接收到消息，并相应结果回来\n    String result = await methodsChannel.invokeMethod('flutter_change_language', sendMsg);\n    // 刷新页面按钮文案\n    setState(() {\n      _langText = result;\n    });\n  }\n}\n\n```\n\n#### Android 端\n\n```java\npublic class FlutterDemoActivity extends AppCompatActivity {\n\n    private static final String TAG_FLUTTER_FRAGMENT = \"flutter_fragment\";\n    private MaterialButton mBtnChangeLanguage;\n    private FlutterFragment mFlutterFragment;\n\n    private MethodChannel mMethodChannel;\n\n    @Override\n    protected void onCreate(@Nullable Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activiy_flutter_demo);\n        mBtnChangeLanguage = findViewById(R.id.btn_change_language);\n\n        FragmentManager fragmentManager = getSupportFragmentManager();\n\n        mFlutterFragment = (FlutterFragment) fragmentManager.findFragmentByTag(TAG_FLUTTER_FRAGMENT);\n\n        // Create and attach a FlutterFragment if one does not exist.\n        if (mFlutterFragment == null) {\n            mFlutterFragment = FlutterFragment.withNewEngine()\n                    .initialRoute(\"Flutter Demo\")\n                    .build();\n\n            fragmentManager\n                    .beginTransaction()\n                    .add(R.id.container, mFlutterFragment, TAG_FLUTTER_FRAGMENT)\n                    .commit();\n        }\n    }\n\n    @Override\n    protected void onPostCreate(@Nullable Bundle savedInstanceState) {\n        super.onPostCreate(savedInstanceState);\n        // 通道名称需要与 Flutter 模块那边统一，并且唯一\n        mMethodChannel = new MethodChannel(getBinaryMessenger(), \"com.chicdeals/methodsChannel\");\n        \n        mMethodChannel.setMethodCallHandler(new MethodChannel.MethodCallHandler() {\n            @Override\n            public void onMethodCall(@NonNull MethodCall call, @NonNull MethodChannel.Result result) {\n                if (call.method.equals(\"flutter_change_language\")) {\n                    String callMsg = call.arguments.toString();\n                    // 回调 Flutter 模块那边\n                    result.success(callMsg);\n                    mBtnChangeLanguage.setText(callMsg);\n                }\n            }\n        });\n    }\n\n    protected FlutterEngine getFlutterEngine() {\n        return mFlutterFragment.getFlutterEngine();\n    }\n\n    private BinaryMessenger getBinaryMessenger() {\n        if (getFlutterEngine() == null) {\n            return null;\n        }\n\n        return getFlutterEngine().getDartExecutor().getBinaryMessenger();\n    }\n}\n````\n\n### Android 向 Flutter 通信\n\n#### Android 端\n\n```\npublic class FlutterDemoActivity extends AppCompatActivity {\n\n    private static final String TAG_FLUTTER_FRAGMENT = \"flutter_fragment\";\n    private MaterialButton mBtnChangeLanguage;\n    private FlutterFragment mFlutterFragment;\n\n    private MethodChannel mMethodChannel;\n\n    @Override\n    protected void onCreate(@Nullable Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activiy_flutter_demo);\n        mBtnChangeLanguage = findViewById(R.id.btn_change_language);\n\n        FragmentManager fragmentManager = getSupportFragmentManager();\n\n        mFlutterFragment = (FlutterFragment) fragmentManager.findFragmentByTag(TAG_FLUTTER_FRAGMENT);\n\n        // Create and attach a FlutterFragment if one does not exist.\n        if (mFlutterFragment == null) {\n            mFlutterFragment = FlutterFragment.withNewEngine()\n                    .initialRoute(\"Flutter Demo\")\n                    .build();\n\n            fragmentManager\n                    .beginTransaction()\n                    .add(R.id.container, mFlutterFragment, TAG_FLUTTER_FRAGMENT)\n                    .commit();\n        }\n    }\n\n    @Override\n    protected void onPostCreate(@Nullable Bundle savedInstanceState) {\n        super.onPostCreate(savedInstanceState);\n        // 通道名称需要与 Flutter 模块那边统一，并且唯一\n        mMethodChannel = new MethodChannel(getBinaryMessenger(), \"com.chicdeals/methodsChannel\");\n\n        mBtnChangeLanguage.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                String sendMsg = \"原生切换语言\";\n                // 向 Flutter 模块发送消息，标识符为 'native_change_language'，并带上消息\n                mMethodChannel.invokeMethod(\"native_change_language\", sendMsg);\n                mBtnChangeLanguage.setText(sendMsg);\n            }\n        });\n    }\n\n    protected FlutterEngine getFlutterEngine() {\n        return mFlutterFragment.getFlutterEngine();\n    }\n\n    private BinaryMessenger getBinaryMessenger() {\n        if (getFlutterEngine() == null) {\n            return null;\n        }\n\n        return getFlutterEngine().getDartExecutor().getBinaryMessenger();\n    }\n}\n\n```\n\n#### Flutter 端\n\n```\nclass MethodChannelPage extends StatefulWidget {\n  @override\n  _MethodChannelPageState createState() => _MethodChannelPageState();\n}\n\nclass _MethodChannelPageState extends State<MethodChannelPage> {\n  // 创建通信渠道，通道名称必须唯一，且与原生那边统一\n  MethodChannel methodsChannel = MethodChannel(\"com.chicdeals/methodsChannel\");\n  String _langText = '切换语言';\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold (\n      backgroundColor: Color(0xFFFFFFFF),\n      body: Align(\n        alignment: Alignment.center,\n        child: Container(\n          height: 44,\n          padding: EdgeInsets.only(left: 10, right: 10),\n          alignment: Alignment.center,\n          child: RaisedButton(\n            child: Text(\n              _langText,\n            ),\n            textColor: Colors.white,\n            color: Color(0xFF49C9A7),\n            onPressed: _sendMethodToNative,\n          ),\n        ),\n      ),\n    );\n  }\n\n  @override\n  void initState() {\n    // 监听原生传递消息回调\n    methodsChannel.setMethodCallHandler(_nativeCallHandler);\n    super.initState();\n  }\n\n  Future<dynamic> _nativeCallHandler(MethodCall call) async {\n    if(call.method == 'native_change_language') {\n      // 取出从原生带过来的信息\n      String callMsg = call.arguments.toString();\n      setState(() {\n        _langText = callMsg;\n      });\n    }\n  }\n}\n```\n\n### Demo 展示\n\n![image](/images/2020/04/flutter_channel_02.gif)\n\n### 参考链接\n\n* [撰写双端平台代码（插件编写实现）](https://flutter.cn/docs/development/platform-integration/platform-channels#step-3-add-an-android-platform-specific-implementation)\n* [一篇看懂 Android 与 Flutter 之间的通信](https://juejin.im/post/6844903873358856200)\n* [Flutter混合开发(三)：Android与Flutter之间通信详细指南](https://segmentfault.com/a/1190000021012102)","source":"_posts/flutter-channel.md","raw":"---\ntitle: Android 与 Flutter 之间通信\ndate: 2020-04-02 23:17:58\ntags: [Flutter]\ncategories: Flutter\n---\n\n### 概述\n\nFlutter 与原生之间的通信机制都是通过 Platform Channel 进行传递，如下图所示：\n\n![image](/images/2020/04/flutter_channel_01.png)\n\n原生 与 Flutter 之间的通信主要有有四种实现方式：\n\n1. 在初始化 Flutter 页面时会传递一个字符串 Route，因此我们就可以通过 Route 从 ``原生`` 向 ``Flutter`` 端传递自己想要的数据；\n2. 通过 MethodChannel 来实现，MethodChannel 支持数据双向传递，有返回值。\n3. ~~通过 EventChannel 来实现，EventChannel 仅支持数据单向传递，无返回值。~~\n4. ~~通过 BasicMessageChannel 来实现，BasicMessageChannel 支持数据双向传递，有返回值。~~\n\n\n### Flutter 向原生通信\n\n\n#### Flutter 端\n\n```dart\n\nclass MethodChannelPage extends StatefulWidget {\n  @override\n  _MethodChannelPageState createState() => _MethodChannelPageState();\n}\n\nclass _MethodChannelPageState extends State<MethodChannelPage> {\n  // 创建通信渠道，通道名称必须唯一，且与原生那边统一\n  MethodChannel methodsChannel = MethodChannel(\"com.chicdeals/methodsChannel\");\n  String _langText = '切换语言';\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold (\n      backgroundColor: Color(0xFFFFFFFF),\n      body: Align(\n        alignment: Alignment.center,\n        child: Container(\n          height: 44,\n          padding: EdgeInsets.only(left: 10, right: 10),\n          alignment: Alignment.center,\n          child: RaisedButton(\n            child: Text(\n              _langText,\n            ),\n            textColor: Colors.white,\n            color: Color(0xFF49C9A7),\n            onPressed: _sendMethodToNative,\n          ),\n        ),\n      ),\n    );\n  }\n\n  Future<void> _sendMethodToNative() async {\n    String sendMsg = 'Flutter切换语言';\n    // 向原生发送消息，标识符为 'flutter_change_language'\n    // 原生那边接收到消息，并相应结果回来\n    String result = await methodsChannel.invokeMethod('flutter_change_language', sendMsg);\n    // 刷新页面按钮文案\n    setState(() {\n      _langText = result;\n    });\n  }\n}\n\n```\n\n#### Android 端\n\n```java\npublic class FlutterDemoActivity extends AppCompatActivity {\n\n    private static final String TAG_FLUTTER_FRAGMENT = \"flutter_fragment\";\n    private MaterialButton mBtnChangeLanguage;\n    private FlutterFragment mFlutterFragment;\n\n    private MethodChannel mMethodChannel;\n\n    @Override\n    protected void onCreate(@Nullable Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activiy_flutter_demo);\n        mBtnChangeLanguage = findViewById(R.id.btn_change_language);\n\n        FragmentManager fragmentManager = getSupportFragmentManager();\n\n        mFlutterFragment = (FlutterFragment) fragmentManager.findFragmentByTag(TAG_FLUTTER_FRAGMENT);\n\n        // Create and attach a FlutterFragment if one does not exist.\n        if (mFlutterFragment == null) {\n            mFlutterFragment = FlutterFragment.withNewEngine()\n                    .initialRoute(\"Flutter Demo\")\n                    .build();\n\n            fragmentManager\n                    .beginTransaction()\n                    .add(R.id.container, mFlutterFragment, TAG_FLUTTER_FRAGMENT)\n                    .commit();\n        }\n    }\n\n    @Override\n    protected void onPostCreate(@Nullable Bundle savedInstanceState) {\n        super.onPostCreate(savedInstanceState);\n        // 通道名称需要与 Flutter 模块那边统一，并且唯一\n        mMethodChannel = new MethodChannel(getBinaryMessenger(), \"com.chicdeals/methodsChannel\");\n        \n        mMethodChannel.setMethodCallHandler(new MethodChannel.MethodCallHandler() {\n            @Override\n            public void onMethodCall(@NonNull MethodCall call, @NonNull MethodChannel.Result result) {\n                if (call.method.equals(\"flutter_change_language\")) {\n                    String callMsg = call.arguments.toString();\n                    // 回调 Flutter 模块那边\n                    result.success(callMsg);\n                    mBtnChangeLanguage.setText(callMsg);\n                }\n            }\n        });\n    }\n\n    protected FlutterEngine getFlutterEngine() {\n        return mFlutterFragment.getFlutterEngine();\n    }\n\n    private BinaryMessenger getBinaryMessenger() {\n        if (getFlutterEngine() == null) {\n            return null;\n        }\n\n        return getFlutterEngine().getDartExecutor().getBinaryMessenger();\n    }\n}\n````\n\n### Android 向 Flutter 通信\n\n#### Android 端\n\n```\npublic class FlutterDemoActivity extends AppCompatActivity {\n\n    private static final String TAG_FLUTTER_FRAGMENT = \"flutter_fragment\";\n    private MaterialButton mBtnChangeLanguage;\n    private FlutterFragment mFlutterFragment;\n\n    private MethodChannel mMethodChannel;\n\n    @Override\n    protected void onCreate(@Nullable Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activiy_flutter_demo);\n        mBtnChangeLanguage = findViewById(R.id.btn_change_language);\n\n        FragmentManager fragmentManager = getSupportFragmentManager();\n\n        mFlutterFragment = (FlutterFragment) fragmentManager.findFragmentByTag(TAG_FLUTTER_FRAGMENT);\n\n        // Create and attach a FlutterFragment if one does not exist.\n        if (mFlutterFragment == null) {\n            mFlutterFragment = FlutterFragment.withNewEngine()\n                    .initialRoute(\"Flutter Demo\")\n                    .build();\n\n            fragmentManager\n                    .beginTransaction()\n                    .add(R.id.container, mFlutterFragment, TAG_FLUTTER_FRAGMENT)\n                    .commit();\n        }\n    }\n\n    @Override\n    protected void onPostCreate(@Nullable Bundle savedInstanceState) {\n        super.onPostCreate(savedInstanceState);\n        // 通道名称需要与 Flutter 模块那边统一，并且唯一\n        mMethodChannel = new MethodChannel(getBinaryMessenger(), \"com.chicdeals/methodsChannel\");\n\n        mBtnChangeLanguage.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                String sendMsg = \"原生切换语言\";\n                // 向 Flutter 模块发送消息，标识符为 'native_change_language'，并带上消息\n                mMethodChannel.invokeMethod(\"native_change_language\", sendMsg);\n                mBtnChangeLanguage.setText(sendMsg);\n            }\n        });\n    }\n\n    protected FlutterEngine getFlutterEngine() {\n        return mFlutterFragment.getFlutterEngine();\n    }\n\n    private BinaryMessenger getBinaryMessenger() {\n        if (getFlutterEngine() == null) {\n            return null;\n        }\n\n        return getFlutterEngine().getDartExecutor().getBinaryMessenger();\n    }\n}\n\n```\n\n#### Flutter 端\n\n```\nclass MethodChannelPage extends StatefulWidget {\n  @override\n  _MethodChannelPageState createState() => _MethodChannelPageState();\n}\n\nclass _MethodChannelPageState extends State<MethodChannelPage> {\n  // 创建通信渠道，通道名称必须唯一，且与原生那边统一\n  MethodChannel methodsChannel = MethodChannel(\"com.chicdeals/methodsChannel\");\n  String _langText = '切换语言';\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold (\n      backgroundColor: Color(0xFFFFFFFF),\n      body: Align(\n        alignment: Alignment.center,\n        child: Container(\n          height: 44,\n          padding: EdgeInsets.only(left: 10, right: 10),\n          alignment: Alignment.center,\n          child: RaisedButton(\n            child: Text(\n              _langText,\n            ),\n            textColor: Colors.white,\n            color: Color(0xFF49C9A7),\n            onPressed: _sendMethodToNative,\n          ),\n        ),\n      ),\n    );\n  }\n\n  @override\n  void initState() {\n    // 监听原生传递消息回调\n    methodsChannel.setMethodCallHandler(_nativeCallHandler);\n    super.initState();\n  }\n\n  Future<dynamic> _nativeCallHandler(MethodCall call) async {\n    if(call.method == 'native_change_language') {\n      // 取出从原生带过来的信息\n      String callMsg = call.arguments.toString();\n      setState(() {\n        _langText = callMsg;\n      });\n    }\n  }\n}\n```\n\n### Demo 展示\n\n![image](/images/2020/04/flutter_channel_02.gif)\n\n### 参考链接\n\n* [撰写双端平台代码（插件编写实现）](https://flutter.cn/docs/development/platform-integration/platform-channels#step-3-add-an-android-platform-specific-implementation)\n* [一篇看懂 Android 与 Flutter 之间的通信](https://juejin.im/post/6844903873358856200)\n* [Flutter混合开发(三)：Android与Flutter之间通信详细指南](https://segmentfault.com/a/1190000021012102)","slug":"flutter-channel","published":1,"updated":"2020-11-25T15:26:37.343Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cks0kfiee0043w3yzc11mgdwr","content":"<h3 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h3><p>Flutter 与原生之间的通信机制都是通过 Platform Channel 进行传递，如下图所示：</p>\n<p><img src=\"/images/2020/04/flutter_channel_01.png\" alt=\"image\"></p>\n<p>原生 与 Flutter 之间的通信主要有有四种实现方式：</p>\n<ol>\n<li>在初始化 Flutter 页面时会传递一个字符串 Route，因此我们就可以通过 Route 从 <code>原生</code> 向 <code>Flutter</code> 端传递自己想要的数据；</li>\n<li>通过 MethodChannel 来实现，MethodChannel 支持数据双向传递，有返回值。</li>\n<li><del>通过 EventChannel 来实现，EventChannel 仅支持数据单向传递，无返回值。</del></li>\n<li><del>通过 BasicMessageChannel 来实现，BasicMessageChannel 支持数据双向传递，有返回值。</del></li>\n</ol>\n<h3 id=\"Flutter-向原生通信\"><a href=\"#Flutter-向原生通信\" class=\"headerlink\" title=\"Flutter 向原生通信\"></a>Flutter 向原生通信</h3><h4 id=\"Flutter-端\"><a href=\"#Flutter-端\" class=\"headerlink\" title=\"Flutter 端\"></a>Flutter 端</h4><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MethodChannelPage</span> <span class=\"keyword\">extends</span> <span class=\"title\">StatefulWidget</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  _MethodChannelPageState createState() =&gt; _MethodChannelPageState();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">_MethodChannelPageState</span> <span class=\"keyword\">extends</span> <span class=\"title\">State</span>&lt;<span class=\"title\">MethodChannelPage</span>&gt; </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 创建通信渠道，通道名称必须唯一，且与原生那边统一</span></span><br><span class=\"line\">  MethodChannel methodsChannel = MethodChannel(<span class=\"string\">\"com.chicdeals/methodsChannel\"</span>);</span><br><span class=\"line\">  <span class=\"built_in\">String</span> _langText = <span class=\"string\">'切换语言'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Scaffold (</span><br><span class=\"line\">      backgroundColor: Color(<span class=\"number\">0xFFFFFFFF</span>),</span><br><span class=\"line\">      body: Align(</span><br><span class=\"line\">        alignment: Alignment.center,</span><br><span class=\"line\">        child: Container(</span><br><span class=\"line\">          height: <span class=\"number\">44</span>,</span><br><span class=\"line\">          padding: EdgeInsets.only(left: <span class=\"number\">10</span>, right: <span class=\"number\">10</span>),</span><br><span class=\"line\">          alignment: Alignment.center,</span><br><span class=\"line\">          child: RaisedButton(</span><br><span class=\"line\">            child: Text(</span><br><span class=\"line\">              _langText,</span><br><span class=\"line\">            ),</span><br><span class=\"line\">            textColor: Colors.white,</span><br><span class=\"line\">            color: Color(<span class=\"number\">0xFF49C9A7</span>),</span><br><span class=\"line\">            onPressed: _sendMethodToNative,</span><br><span class=\"line\">          ),</span><br><span class=\"line\">        ),</span><br><span class=\"line\">      ),</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  Future&lt;<span class=\"keyword\">void</span>&gt; _sendMethodToNative() <span class=\"keyword\">async</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">String</span> sendMsg = <span class=\"string\">'Flutter切换语言'</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 向原生发送消息，标识符为 'flutter_change_language'</span></span><br><span class=\"line\">    <span class=\"comment\">// 原生那边接收到消息，并相应结果回来</span></span><br><span class=\"line\">    <span class=\"built_in\">String</span> result = <span class=\"keyword\">await</span> methodsChannel.invokeMethod(<span class=\"string\">'flutter_change_language'</span>, sendMsg);</span><br><span class=\"line\">    <span class=\"comment\">// 刷新页面按钮文案</span></span><br><span class=\"line\">    setState(() &#123;</span><br><span class=\"line\">      _langText = result;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Android-端\"><a href=\"#Android-端\" class=\"headerlink\" title=\"Android 端\"></a>Android 端</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FlutterDemoActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">AppCompatActivity</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String TAG_FLUTTER_FRAGMENT = <span class=\"string\">\"flutter_fragment\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> MaterialButton mBtnChangeLanguage;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> FlutterFragment mFlutterFragment;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> MethodChannel mMethodChannel;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(@Nullable Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">        setContentView(R.layout.activiy_flutter_demo);</span><br><span class=\"line\">        mBtnChangeLanguage = findViewById(R.id.btn_change_language);</span><br><span class=\"line\"></span><br><span class=\"line\">        FragmentManager fragmentManager = getSupportFragmentManager();</span><br><span class=\"line\"></span><br><span class=\"line\">        mFlutterFragment = (FlutterFragment) fragmentManager.findFragmentByTag(TAG_FLUTTER_FRAGMENT);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Create and attach a FlutterFragment if one does not exist.</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mFlutterFragment == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            mFlutterFragment = FlutterFragment.withNewEngine()</span><br><span class=\"line\">                    .initialRoute(<span class=\"string\">\"Flutter Demo\"</span>)</span><br><span class=\"line\">                    .build();</span><br><span class=\"line\"></span><br><span class=\"line\">            fragmentManager</span><br><span class=\"line\">                    .beginTransaction()</span><br><span class=\"line\">                    .add(R.id.container, mFlutterFragment, TAG_FLUTTER_FRAGMENT)</span><br><span class=\"line\">                    .commit();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onPostCreate</span><span class=\"params\">(@Nullable Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onPostCreate(savedInstanceState);</span><br><span class=\"line\">        <span class=\"comment\">// 通道名称需要与 Flutter 模块那边统一，并且唯一</span></span><br><span class=\"line\">        mMethodChannel = <span class=\"keyword\">new</span> MethodChannel(getBinaryMessenger(), <span class=\"string\">\"com.chicdeals/methodsChannel\"</span>);</span><br><span class=\"line\">        </span><br><span class=\"line\">        mMethodChannel.setMethodCallHandler(<span class=\"keyword\">new</span> MethodChannel.MethodCallHandler() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onMethodCall</span><span class=\"params\">(@NonNull MethodCall call, @NonNull MethodChannel.Result result)</span> </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (call.method.equals(<span class=\"string\">\"flutter_change_language\"</span>)) &#123;</span><br><span class=\"line\">                    String callMsg = call.arguments.toString();</span><br><span class=\"line\">                    <span class=\"comment\">// 回调 Flutter 模块那边</span></span><br><span class=\"line\">                    result.success(callMsg);</span><br><span class=\"line\">                    mBtnChangeLanguage.setText(callMsg);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> FlutterEngine <span class=\"title\">getFlutterEngine</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> mFlutterFragment.getFlutterEngine();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> BinaryMessenger <span class=\"title\">getBinaryMessenger</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (getFlutterEngine() == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> getFlutterEngine().getDartExecutor().getBinaryMessenger();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">`</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Android-向-Flutter-通信\"><a href=\"#Android-向-Flutter-通信\" class=\"headerlink\" title=\"Android 向 Flutter 通信\"></a>Android 向 Flutter 通信</h3><h4 id=\"Android-端-1\"><a href=\"#Android-端-1\" class=\"headerlink\" title=\"Android 端\"></a>Android 端</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class FlutterDemoActivity extends AppCompatActivity &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private static final String TAG_FLUTTER_FRAGMENT = &quot;flutter_fragment&quot;;</span><br><span class=\"line\">    private MaterialButton mBtnChangeLanguage;</span><br><span class=\"line\">    private FlutterFragment mFlutterFragment;</span><br><span class=\"line\"></span><br><span class=\"line\">    private MethodChannel mMethodChannel;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    protected void onCreate(@Nullable Bundle savedInstanceState) &#123;</span><br><span class=\"line\">        super.onCreate(savedInstanceState);</span><br><span class=\"line\">        setContentView(R.layout.activiy_flutter_demo);</span><br><span class=\"line\">        mBtnChangeLanguage = findViewById(R.id.btn_change_language);</span><br><span class=\"line\"></span><br><span class=\"line\">        FragmentManager fragmentManager = getSupportFragmentManager();</span><br><span class=\"line\"></span><br><span class=\"line\">        mFlutterFragment = (FlutterFragment) fragmentManager.findFragmentByTag(TAG_FLUTTER_FRAGMENT);</span><br><span class=\"line\"></span><br><span class=\"line\">        // Create and attach a FlutterFragment if one does not exist.</span><br><span class=\"line\">        if (mFlutterFragment == null) &#123;</span><br><span class=\"line\">            mFlutterFragment = FlutterFragment.withNewEngine()</span><br><span class=\"line\">                    .initialRoute(&quot;Flutter Demo&quot;)</span><br><span class=\"line\">                    .build();</span><br><span class=\"line\"></span><br><span class=\"line\">            fragmentManager</span><br><span class=\"line\">                    .beginTransaction()</span><br><span class=\"line\">                    .add(R.id.container, mFlutterFragment, TAG_FLUTTER_FRAGMENT)</span><br><span class=\"line\">                    .commit();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    protected void onPostCreate(@Nullable Bundle savedInstanceState) &#123;</span><br><span class=\"line\">        super.onPostCreate(savedInstanceState);</span><br><span class=\"line\">        // 通道名称需要与 Flutter 模块那边统一，并且唯一</span><br><span class=\"line\">        mMethodChannel = new MethodChannel(getBinaryMessenger(), &quot;com.chicdeals/methodsChannel&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">        mBtnChangeLanguage.setOnClickListener(new View.OnClickListener() &#123;</span><br><span class=\"line\">            @Override</span><br><span class=\"line\">            public void onClick(View v) &#123;</span><br><span class=\"line\">                String sendMsg = &quot;原生切换语言&quot;;</span><br><span class=\"line\">                // 向 Flutter 模块发送消息，标识符为 &apos;native_change_language&apos;，并带上消息</span><br><span class=\"line\">                mMethodChannel.invokeMethod(&quot;native_change_language&quot;, sendMsg);</span><br><span class=\"line\">                mBtnChangeLanguage.setText(sendMsg);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    protected FlutterEngine getFlutterEngine() &#123;</span><br><span class=\"line\">        return mFlutterFragment.getFlutterEngine();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private BinaryMessenger getBinaryMessenger() &#123;</span><br><span class=\"line\">        if (getFlutterEngine() == null) &#123;</span><br><span class=\"line\">            return null;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        return getFlutterEngine().getDartExecutor().getBinaryMessenger();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Flutter-端-1\"><a href=\"#Flutter-端-1\" class=\"headerlink\" title=\"Flutter 端\"></a>Flutter 端</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class MethodChannelPage extends StatefulWidget &#123;</span><br><span class=\"line\">  @override</span><br><span class=\"line\">  _MethodChannelPageState createState() =&gt; _MethodChannelPageState();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class _MethodChannelPageState extends State&lt;MethodChannelPage&gt; &#123;</span><br><span class=\"line\">  // 创建通信渠道，通道名称必须唯一，且与原生那边统一</span><br><span class=\"line\">  MethodChannel methodsChannel = MethodChannel(&quot;com.chicdeals/methodsChannel&quot;);</span><br><span class=\"line\">  String _langText = &apos;切换语言&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">  @override</span><br><span class=\"line\">  Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    return Scaffold (</span><br><span class=\"line\">      backgroundColor: Color(0xFFFFFFFF),</span><br><span class=\"line\">      body: Align(</span><br><span class=\"line\">        alignment: Alignment.center,</span><br><span class=\"line\">        child: Container(</span><br><span class=\"line\">          height: 44,</span><br><span class=\"line\">          padding: EdgeInsets.only(left: 10, right: 10),</span><br><span class=\"line\">          alignment: Alignment.center,</span><br><span class=\"line\">          child: RaisedButton(</span><br><span class=\"line\">            child: Text(</span><br><span class=\"line\">              _langText,</span><br><span class=\"line\">            ),</span><br><span class=\"line\">            textColor: Colors.white,</span><br><span class=\"line\">            color: Color(0xFF49C9A7),</span><br><span class=\"line\">            onPressed: _sendMethodToNative,</span><br><span class=\"line\">          ),</span><br><span class=\"line\">        ),</span><br><span class=\"line\">      ),</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  @override</span><br><span class=\"line\">  void initState() &#123;</span><br><span class=\"line\">    // 监听原生传递消息回调</span><br><span class=\"line\">    methodsChannel.setMethodCallHandler(_nativeCallHandler);</span><br><span class=\"line\">    super.initState();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  Future&lt;dynamic&gt; _nativeCallHandler(MethodCall call) async &#123;</span><br><span class=\"line\">    if(call.method == &apos;native_change_language&apos;) &#123;</span><br><span class=\"line\">      // 取出从原生带过来的信息</span><br><span class=\"line\">      String callMsg = call.arguments.toString();</span><br><span class=\"line\">      setState(() &#123;</span><br><span class=\"line\">        _langText = callMsg;</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Demo-展示\"><a href=\"#Demo-展示\" class=\"headerlink\" title=\"Demo 展示\"></a>Demo 展示</h3><p><img src=\"/images/2020/04/flutter_channel_02.gif\" alt=\"image\"></p>\n<h3 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h3><ul>\n<li><a href=\"https://flutter.cn/docs/development/platform-integration/platform-channels#step-3-add-an-android-platform-specific-implementation\" target=\"_blank\" rel=\"noopener\">撰写双端平台代码（插件编写实现）</a></li>\n<li><a href=\"https://juejin.im/post/6844903873358856200\" target=\"_blank\" rel=\"noopener\">一篇看懂 Android 与 Flutter 之间的通信</a></li>\n<li><a href=\"https://segmentfault.com/a/1190000021012102\" target=\"_blank\" rel=\"noopener\">Flutter混合开发(三)：Android与Flutter之间通信详细指南</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h3><p>Flutter 与原生之间的通信机制都是通过 Platform Channel 进行传递，如下图所示：</p>\n<p><img src=\"/images/2020/04/flutter_channel_01.png\" alt=\"image\"></p>\n<p>原生 与 Flutter 之间的通信主要有有四种实现方式：</p>\n<ol>\n<li>在初始化 Flutter 页面时会传递一个字符串 Route，因此我们就可以通过 Route 从 <code>原生</code> 向 <code>Flutter</code> 端传递自己想要的数据；</li>\n<li>通过 MethodChannel 来实现，MethodChannel 支持数据双向传递，有返回值。</li>\n<li><del>通过 EventChannel 来实现，EventChannel 仅支持数据单向传递，无返回值。</del></li>\n<li><del>通过 BasicMessageChannel 来实现，BasicMessageChannel 支持数据双向传递，有返回值。</del></li>\n</ol>\n<h3 id=\"Flutter-向原生通信\"><a href=\"#Flutter-向原生通信\" class=\"headerlink\" title=\"Flutter 向原生通信\"></a>Flutter 向原生通信</h3><h4 id=\"Flutter-端\"><a href=\"#Flutter-端\" class=\"headerlink\" title=\"Flutter 端\"></a>Flutter 端</h4><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MethodChannelPage</span> <span class=\"keyword\">extends</span> <span class=\"title\">StatefulWidget</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  _MethodChannelPageState createState() =&gt; _MethodChannelPageState();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">_MethodChannelPageState</span> <span class=\"keyword\">extends</span> <span class=\"title\">State</span>&lt;<span class=\"title\">MethodChannelPage</span>&gt; </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 创建通信渠道，通道名称必须唯一，且与原生那边统一</span></span><br><span class=\"line\">  MethodChannel methodsChannel = MethodChannel(<span class=\"string\">\"com.chicdeals/methodsChannel\"</span>);</span><br><span class=\"line\">  <span class=\"built_in\">String</span> _langText = <span class=\"string\">'切换语言'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Scaffold (</span><br><span class=\"line\">      backgroundColor: Color(<span class=\"number\">0xFFFFFFFF</span>),</span><br><span class=\"line\">      body: Align(</span><br><span class=\"line\">        alignment: Alignment.center,</span><br><span class=\"line\">        child: Container(</span><br><span class=\"line\">          height: <span class=\"number\">44</span>,</span><br><span class=\"line\">          padding: EdgeInsets.only(left: <span class=\"number\">10</span>, right: <span class=\"number\">10</span>),</span><br><span class=\"line\">          alignment: Alignment.center,</span><br><span class=\"line\">          child: RaisedButton(</span><br><span class=\"line\">            child: Text(</span><br><span class=\"line\">              _langText,</span><br><span class=\"line\">            ),</span><br><span class=\"line\">            textColor: Colors.white,</span><br><span class=\"line\">            color: Color(<span class=\"number\">0xFF49C9A7</span>),</span><br><span class=\"line\">            onPressed: _sendMethodToNative,</span><br><span class=\"line\">          ),</span><br><span class=\"line\">        ),</span><br><span class=\"line\">      ),</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  Future&lt;<span class=\"keyword\">void</span>&gt; _sendMethodToNative() <span class=\"keyword\">async</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">String</span> sendMsg = <span class=\"string\">'Flutter切换语言'</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 向原生发送消息，标识符为 'flutter_change_language'</span></span><br><span class=\"line\">    <span class=\"comment\">// 原生那边接收到消息，并相应结果回来</span></span><br><span class=\"line\">    <span class=\"built_in\">String</span> result = <span class=\"keyword\">await</span> methodsChannel.invokeMethod(<span class=\"string\">'flutter_change_language'</span>, sendMsg);</span><br><span class=\"line\">    <span class=\"comment\">// 刷新页面按钮文案</span></span><br><span class=\"line\">    setState(() &#123;</span><br><span class=\"line\">      _langText = result;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Android-端\"><a href=\"#Android-端\" class=\"headerlink\" title=\"Android 端\"></a>Android 端</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FlutterDemoActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">AppCompatActivity</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String TAG_FLUTTER_FRAGMENT = <span class=\"string\">\"flutter_fragment\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> MaterialButton mBtnChangeLanguage;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> FlutterFragment mFlutterFragment;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> MethodChannel mMethodChannel;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(@Nullable Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">        setContentView(R.layout.activiy_flutter_demo);</span><br><span class=\"line\">        mBtnChangeLanguage = findViewById(R.id.btn_change_language);</span><br><span class=\"line\"></span><br><span class=\"line\">        FragmentManager fragmentManager = getSupportFragmentManager();</span><br><span class=\"line\"></span><br><span class=\"line\">        mFlutterFragment = (FlutterFragment) fragmentManager.findFragmentByTag(TAG_FLUTTER_FRAGMENT);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Create and attach a FlutterFragment if one does not exist.</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mFlutterFragment == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            mFlutterFragment = FlutterFragment.withNewEngine()</span><br><span class=\"line\">                    .initialRoute(<span class=\"string\">\"Flutter Demo\"</span>)</span><br><span class=\"line\">                    .build();</span><br><span class=\"line\"></span><br><span class=\"line\">            fragmentManager</span><br><span class=\"line\">                    .beginTransaction()</span><br><span class=\"line\">                    .add(R.id.container, mFlutterFragment, TAG_FLUTTER_FRAGMENT)</span><br><span class=\"line\">                    .commit();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onPostCreate</span><span class=\"params\">(@Nullable Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onPostCreate(savedInstanceState);</span><br><span class=\"line\">        <span class=\"comment\">// 通道名称需要与 Flutter 模块那边统一，并且唯一</span></span><br><span class=\"line\">        mMethodChannel = <span class=\"keyword\">new</span> MethodChannel(getBinaryMessenger(), <span class=\"string\">\"com.chicdeals/methodsChannel\"</span>);</span><br><span class=\"line\">        </span><br><span class=\"line\">        mMethodChannel.setMethodCallHandler(<span class=\"keyword\">new</span> MethodChannel.MethodCallHandler() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onMethodCall</span><span class=\"params\">(@NonNull MethodCall call, @NonNull MethodChannel.Result result)</span> </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (call.method.equals(<span class=\"string\">\"flutter_change_language\"</span>)) &#123;</span><br><span class=\"line\">                    String callMsg = call.arguments.toString();</span><br><span class=\"line\">                    <span class=\"comment\">// 回调 Flutter 模块那边</span></span><br><span class=\"line\">                    result.success(callMsg);</span><br><span class=\"line\">                    mBtnChangeLanguage.setText(callMsg);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> FlutterEngine <span class=\"title\">getFlutterEngine</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> mFlutterFragment.getFlutterEngine();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> BinaryMessenger <span class=\"title\">getBinaryMessenger</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (getFlutterEngine() == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> getFlutterEngine().getDartExecutor().getBinaryMessenger();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">`</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Android-向-Flutter-通信\"><a href=\"#Android-向-Flutter-通信\" class=\"headerlink\" title=\"Android 向 Flutter 通信\"></a>Android 向 Flutter 通信</h3><h4 id=\"Android-端-1\"><a href=\"#Android-端-1\" class=\"headerlink\" title=\"Android 端\"></a>Android 端</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class FlutterDemoActivity extends AppCompatActivity &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private static final String TAG_FLUTTER_FRAGMENT = &quot;flutter_fragment&quot;;</span><br><span class=\"line\">    private MaterialButton mBtnChangeLanguage;</span><br><span class=\"line\">    private FlutterFragment mFlutterFragment;</span><br><span class=\"line\"></span><br><span class=\"line\">    private MethodChannel mMethodChannel;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    protected void onCreate(@Nullable Bundle savedInstanceState) &#123;</span><br><span class=\"line\">        super.onCreate(savedInstanceState);</span><br><span class=\"line\">        setContentView(R.layout.activiy_flutter_demo);</span><br><span class=\"line\">        mBtnChangeLanguage = findViewById(R.id.btn_change_language);</span><br><span class=\"line\"></span><br><span class=\"line\">        FragmentManager fragmentManager = getSupportFragmentManager();</span><br><span class=\"line\"></span><br><span class=\"line\">        mFlutterFragment = (FlutterFragment) fragmentManager.findFragmentByTag(TAG_FLUTTER_FRAGMENT);</span><br><span class=\"line\"></span><br><span class=\"line\">        // Create and attach a FlutterFragment if one does not exist.</span><br><span class=\"line\">        if (mFlutterFragment == null) &#123;</span><br><span class=\"line\">            mFlutterFragment = FlutterFragment.withNewEngine()</span><br><span class=\"line\">                    .initialRoute(&quot;Flutter Demo&quot;)</span><br><span class=\"line\">                    .build();</span><br><span class=\"line\"></span><br><span class=\"line\">            fragmentManager</span><br><span class=\"line\">                    .beginTransaction()</span><br><span class=\"line\">                    .add(R.id.container, mFlutterFragment, TAG_FLUTTER_FRAGMENT)</span><br><span class=\"line\">                    .commit();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    protected void onPostCreate(@Nullable Bundle savedInstanceState) &#123;</span><br><span class=\"line\">        super.onPostCreate(savedInstanceState);</span><br><span class=\"line\">        // 通道名称需要与 Flutter 模块那边统一，并且唯一</span><br><span class=\"line\">        mMethodChannel = new MethodChannel(getBinaryMessenger(), &quot;com.chicdeals/methodsChannel&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">        mBtnChangeLanguage.setOnClickListener(new View.OnClickListener() &#123;</span><br><span class=\"line\">            @Override</span><br><span class=\"line\">            public void onClick(View v) &#123;</span><br><span class=\"line\">                String sendMsg = &quot;原生切换语言&quot;;</span><br><span class=\"line\">                // 向 Flutter 模块发送消息，标识符为 &apos;native_change_language&apos;，并带上消息</span><br><span class=\"line\">                mMethodChannel.invokeMethod(&quot;native_change_language&quot;, sendMsg);</span><br><span class=\"line\">                mBtnChangeLanguage.setText(sendMsg);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    protected FlutterEngine getFlutterEngine() &#123;</span><br><span class=\"line\">        return mFlutterFragment.getFlutterEngine();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private BinaryMessenger getBinaryMessenger() &#123;</span><br><span class=\"line\">        if (getFlutterEngine() == null) &#123;</span><br><span class=\"line\">            return null;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        return getFlutterEngine().getDartExecutor().getBinaryMessenger();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Flutter-端-1\"><a href=\"#Flutter-端-1\" class=\"headerlink\" title=\"Flutter 端\"></a>Flutter 端</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class MethodChannelPage extends StatefulWidget &#123;</span><br><span class=\"line\">  @override</span><br><span class=\"line\">  _MethodChannelPageState createState() =&gt; _MethodChannelPageState();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class _MethodChannelPageState extends State&lt;MethodChannelPage&gt; &#123;</span><br><span class=\"line\">  // 创建通信渠道，通道名称必须唯一，且与原生那边统一</span><br><span class=\"line\">  MethodChannel methodsChannel = MethodChannel(&quot;com.chicdeals/methodsChannel&quot;);</span><br><span class=\"line\">  String _langText = &apos;切换语言&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">  @override</span><br><span class=\"line\">  Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    return Scaffold (</span><br><span class=\"line\">      backgroundColor: Color(0xFFFFFFFF),</span><br><span class=\"line\">      body: Align(</span><br><span class=\"line\">        alignment: Alignment.center,</span><br><span class=\"line\">        child: Container(</span><br><span class=\"line\">          height: 44,</span><br><span class=\"line\">          padding: EdgeInsets.only(left: 10, right: 10),</span><br><span class=\"line\">          alignment: Alignment.center,</span><br><span class=\"line\">          child: RaisedButton(</span><br><span class=\"line\">            child: Text(</span><br><span class=\"line\">              _langText,</span><br><span class=\"line\">            ),</span><br><span class=\"line\">            textColor: Colors.white,</span><br><span class=\"line\">            color: Color(0xFF49C9A7),</span><br><span class=\"line\">            onPressed: _sendMethodToNative,</span><br><span class=\"line\">          ),</span><br><span class=\"line\">        ),</span><br><span class=\"line\">      ),</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  @override</span><br><span class=\"line\">  void initState() &#123;</span><br><span class=\"line\">    // 监听原生传递消息回调</span><br><span class=\"line\">    methodsChannel.setMethodCallHandler(_nativeCallHandler);</span><br><span class=\"line\">    super.initState();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  Future&lt;dynamic&gt; _nativeCallHandler(MethodCall call) async &#123;</span><br><span class=\"line\">    if(call.method == &apos;native_change_language&apos;) &#123;</span><br><span class=\"line\">      // 取出从原生带过来的信息</span><br><span class=\"line\">      String callMsg = call.arguments.toString();</span><br><span class=\"line\">      setState(() &#123;</span><br><span class=\"line\">        _langText = callMsg;</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Demo-展示\"><a href=\"#Demo-展示\" class=\"headerlink\" title=\"Demo 展示\"></a>Demo 展示</h3><p><img src=\"/images/2020/04/flutter_channel_02.gif\" alt=\"image\"></p>\n<h3 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h3><ul>\n<li><a href=\"https://flutter.cn/docs/development/platform-integration/platform-channels#step-3-add-an-android-platform-specific-implementation\" target=\"_blank\" rel=\"noopener\">撰写双端平台代码（插件编写实现）</a></li>\n<li><a href=\"https://juejin.im/post/6844903873358856200\" target=\"_blank\" rel=\"noopener\">一篇看懂 Android 与 Flutter 之间的通信</a></li>\n<li><a href=\"https://segmentfault.com/a/1190000021012102\" target=\"_blank\" rel=\"noopener\">Flutter混合开发(三)：Android与Flutter之间通信详细指南</a></li>\n</ul>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cks0kfic30002w3yzp6tlg5ag","category_id":"cks0kfic80006w3yz6jmtxmtm","_id":"cks0kfich000iw3yzjm0sn7dw"},{"post_id":"cks0kficb000bw3yzbo3rbw36","category_id":"cks0kfic80006w3yz6jmtxmtm","_id":"cks0kficj000lw3yzwx41wsf2"},{"post_id":"cks0kfic60005w3yz1h09w4t1","category_id":"cks0kfic80006w3yz6jmtxmtm","_id":"cks0kfick000pw3yzfpzcm3ga"},{"post_id":"cks0kficf000hw3yzdgm5emlq","category_id":"cks0kfic80006w3yz6jmtxmtm","_id":"cks0kficm000tw3yzve49eaq9"},{"post_id":"cks0kficd000ew3yzuq86g861","category_id":"cks0kfici000jw3yzgyuzi0uw","_id":"cks0kfico000yw3yzqcarvfax"},{"post_id":"cks0kficl000rw3yzlskoy83w","category_id":"cks0kfic80006w3yz6jmtxmtm","_id":"cks0kficp0012w3yz3wqz2asp"},{"post_id":"cks0kfici000kw3yzr05qja1m","category_id":"cks0kficl000sw3yzmhhdanc2","_id":"cks0kficq0015w3yz46yfxxer"},{"post_id":"cks0kficp0011w3yzpkk3t2yn","category_id":"cks0kfico000zw3yzq9ekozu5","_id":"cks0kfict001cw3yzckaeku44"},{"post_id":"cks0kfick000ow3yzo7es42r4","category_id":"cks0kfico000zw3yzq9ekozu5","_id":"cks0kficu001gw3yzitawl1fl"},{"post_id":"cks0kficq0014w3yz4r2lp4rx","category_id":"cks0kfico000zw3yzq9ekozu5","_id":"cks0kficv001kw3yz8n0pbbu2"},{"post_id":"cks0kficr0019w3yzkpin4rwc","category_id":"cks0kficl000sw3yzmhhdanc2","_id":"cks0kficx001nw3yz4z5igesr"},{"post_id":"cks0kficm000ww3yzwkge7tzz","category_id":"cks0kfico000zw3yzq9ekozu5","_id":"cks0kficy001qw3yzamoy18fh"},{"post_id":"cks0kficn000xw3yzf5jctqqa","category_id":"cks0kfico000zw3yzq9ekozu5","_id":"cks0kficz001uw3yzw1mtvp27"},{"post_id":"cks0kfics001bw3yzxpfzo8sd","category_id":"cks0kficw001lw3yzlv8fynnf","_id":"cks0kfid1001xw3yza9zht3i8"},{"post_id":"cks0kficz001tw3yz9nycofwl","category_id":"cks0kficw001lw3yzlv8fynnf","_id":"cks0kfid40022w3yz0y0y3wwb"},{"post_id":"cks0kficu001fw3yztpf8ac29","category_id":"cks0kficz001sw3yz4gxtmftj","_id":"cks0kfid60025w3yzwdwlxa82"},{"post_id":"cks0kfid30021w3yzhuukvu73","category_id":"cks0kficw001lw3yzlv8fynnf","_id":"cks0kfid9002cw3yzvu43sm9a"},{"post_id":"cks0kficx001pw3yzi7njbo6m","category_id":"cks0kfid2001zw3yzrth0kp3i","_id":"cks0kfidc002gw3yzfeo5kxtl"},{"post_id":"cks0kfid70029w3yzwq5yrilm","category_id":"cks0kfici000jw3yzgyuzi0uw","_id":"cks0kfidd002iw3yzt2xy3r4r"},{"post_id":"cks0kfid0001ww3yz3m732j1e","category_id":"cks0kfid60026w3yzs9git7ix","_id":"cks0kfidd002lw3yzywmfqh56"},{"post_id":"cks0kfid9002bw3yzynkeomvh","category_id":"cks0kfici000jw3yzgyuzi0uw","_id":"cks0kfide002nw3yzvgwacffi"},{"post_id":"cks0kfid1001yw3yzhe4a0h88","category_id":"cks0kfid60026w3yzs9git7ix","_id":"cks0kfidf002pw3yzhwbrhuuf"},{"post_id":"cks0kfid50024w3yz0z3lrsbw","category_id":"cks0kfidd002jw3yzojh03x4r","_id":"cks0kfidg002rw3yzrgtjgo75"},{"post_id":"cks0kfiec0041w3yz31kd91fh","category_id":"cks0kfic80006w3yz6jmtxmtm","_id":"cks0kfieh0048w3yzd820sbtl"},{"post_id":"cks0kfiee0043w3yzc11mgdwr","category_id":"cks0kfico000zw3yzq9ekozu5","_id":"cks0kfiei0049w3yzrb15joab"}],"PostTag":[{"post_id":"cks0kfic80007w3yzzu0k47gi","tag_id":"cks0kfic50004w3yzl7v25x59","_id":"cks0kficb000aw3yzff1z8qi2"},{"post_id":"cks0kfibw0000w3yz339kgxx5","tag_id":"cks0kfic50004w3yzl7v25x59","_id":"cks0kficd000dw3yzpi1tndki"},{"post_id":"cks0kfic90008w3yzdi53n5pf","tag_id":"cks0kfic50004w3yzl7v25x59","_id":"cks0kfice000gw3yz18zpvaj9"},{"post_id":"cks0kficf000hw3yzdgm5emlq","tag_id":"cks0kfic50004w3yzl7v25x59","_id":"cks0kficj000nw3yzcdv0p8th"},{"post_id":"cks0kfic30002w3yzp6tlg5ag","tag_id":"cks0kfic50004w3yzl7v25x59","_id":"cks0kficl000qw3yziao2hwh3"},{"post_id":"cks0kfic30002w3yzp6tlg5ag","tag_id":"cks0kfice000fw3yzda17p8js","_id":"cks0kficm000vw3yzrra2kbyt"},{"post_id":"cks0kfic60005w3yz1h09w4t1","tag_id":"cks0kfic50004w3yzl7v25x59","_id":"cks0kficp0013w3yzdhcajqlc"},{"post_id":"cks0kfic60005w3yz1h09w4t1","tag_id":"cks0kficm000uw3yzlox7cncq","_id":"cks0kficq0016w3yzx7f7mlq0"},{"post_id":"cks0kficb000bw3yzbo3rbw36","tag_id":"cks0kfico0010w3yzizcb4zhy","_id":"cks0kfics001aw3yz04jo12l1"},{"post_id":"cks0kficb000bw3yzbo3rbw36","tag_id":"cks0kfic50004w3yzl7v25x59","_id":"cks0kfict001ew3yzvv3w8j76"},{"post_id":"cks0kfici000kw3yzr05qja1m","tag_id":"cks0kficr0018w3yz288070ao","_id":"cks0kficv001iw3yz7kbhiy44"},{"post_id":"cks0kfick000ow3yzo7es42r4","tag_id":"cks0kficu001hw3yz1epp120z","_id":"cks0kficy001rw3yzlhou7tk0"},{"post_id":"cks0kficl000rw3yzlskoy83w","tag_id":"cks0kfic50004w3yzl7v25x59","_id":"cks0kfid50023w3yzutujx2ej"},{"post_id":"cks0kficl000rw3yzlskoy83w","tag_id":"cks0kficx001ow3yzgwao8nx4","_id":"cks0kfid70027w3yzkyczri5h"},{"post_id":"cks0kficl000rw3yzlskoy83w","tag_id":"cks0kfid0001vw3yzsn4rkiqa","_id":"cks0kfid8002aw3yz4zwrrd29"},{"post_id":"cks0kficm000ww3yzwkge7tzz","tag_id":"cks0kficu001hw3yz1epp120z","_id":"cks0kfida002ew3yzl2mn13pm"},{"post_id":"cks0kficn000xw3yzf5jctqqa","tag_id":"cks0kficu001hw3yz1epp120z","_id":"cks0kfidd002hw3yzsalvkjgj"},{"post_id":"cks0kficp0011w3yzpkk3t2yn","tag_id":"cks0kficu001hw3yz1epp120z","_id":"cks0kfide002mw3yzsco720py"},{"post_id":"cks0kficq0014w3yz4r2lp4rx","tag_id":"cks0kficu001hw3yz1epp120z","_id":"cks0kfidg002qw3yzj9nn081t"},{"post_id":"cks0kficr0019w3yzkpin4rwc","tag_id":"cks0kficr0018w3yz288070ao","_id":"cks0kfidh002tw3yzehprv9ob"},{"post_id":"cks0kfics001bw3yzxpfzo8sd","tag_id":"cks0kfidg002sw3yzpg9mlmgi","_id":"cks0kfidj002xw3yzkp9gseeq"},{"post_id":"cks0kfics001bw3yzxpfzo8sd","tag_id":"cks0kfidh002uw3yzv4xg2b4l","_id":"cks0kfidj002yw3yzth583zbd"},{"post_id":"cks0kfics001bw3yzxpfzo8sd","tag_id":"cks0kfidi002vw3yzviw3149z","_id":"cks0kfidj0030w3yzruzmwa0o"},{"post_id":"cks0kficu001fw3yztpf8ac29","tag_id":"cks0kfidi002ww3yzvhmtb8e6","_id":"cks0kfidk0031w3yzmsbv8j9z"},{"post_id":"cks0kficv001jw3yzszjuctho","tag_id":"cks0kfidj002zw3yz59ebpdus","_id":"cks0kfidm0034w3yzal5j6k1c"},{"post_id":"cks0kficv001jw3yzszjuctho","tag_id":"cks0kfidk0032w3yze5dp35o5","_id":"cks0kfidm0035w3yzel2016ku"},{"post_id":"cks0kficw001mw3yz6w58yil8","tag_id":"cks0kfidj002zw3yz59ebpdus","_id":"cks0kfidm0037w3yzahlqlezk"},{"post_id":"cks0kficx001pw3yzi7njbo6m","tag_id":"cks0kfidm0036w3yzhfpac0yu","_id":"cks0kfido0039w3yzjfh24411"},{"post_id":"cks0kficz001tw3yz9nycofwl","tag_id":"cks0kfidm0036w3yzhfpac0yu","_id":"cks0kfidt003fw3yzil0gfpty"},{"post_id":"cks0kficz001tw3yz9nycofwl","tag_id":"cks0kfido003aw3yz4njbpsa6","_id":"cks0kfidu003gw3yzxcuuzp9n"},{"post_id":"cks0kficz001tw3yz9nycofwl","tag_id":"cks0kfidp003bw3yzijrikmi1","_id":"cks0kfidu003iw3yz015jgn12"},{"post_id":"cks0kficz001tw3yz9nycofwl","tag_id":"cks0kfidg002sw3yzpg9mlmgi","_id":"cks0kfidu003jw3yzu5c7e2fv"},{"post_id":"cks0kficz001tw3yz9nycofwl","tag_id":"cks0kfidi002vw3yzviw3149z","_id":"cks0kfidv003lw3yzsgz86bqq"},{"post_id":"cks0kfid0001ww3yz3m732j1e","tag_id":"cks0kfidt003ew3yz5kvvj4d4","_id":"cks0kfidv003mw3yzh1dwkr9i"},{"post_id":"cks0kfid0001ww3yz3m732j1e","tag_id":"cks0kfidu003hw3yzc3g13sa4","_id":"cks0kfidw003ow3yzrn02v17g"},{"post_id":"cks0kfid1001yw3yzhe4a0h88","tag_id":"cks0kfidu003hw3yzc3g13sa4","_id":"cks0kfidx003qw3yze9zzgwwc"},{"post_id":"cks0kfid1001yw3yzhe4a0h88","tag_id":"cks0kfidt003ew3yz5kvvj4d4","_id":"cks0kfidx003rw3yzozn7tu2q"},{"post_id":"cks0kfid30021w3yzhuukvu73","tag_id":"cks0kfidg002sw3yzpg9mlmgi","_id":"cks0kfidz003vw3yzk0aly4ag"},{"post_id":"cks0kfid30021w3yzhuukvu73","tag_id":"cks0kfidx003sw3yzgpwxqz99","_id":"cks0kfidz003ww3yz3vfs5sn7"},{"post_id":"cks0kfid30021w3yzhuukvu73","tag_id":"cks0kfidi002vw3yzviw3149z","_id":"cks0kfie0003yw3yz21fvfo3n"},{"post_id":"cks0kfid50024w3yz0z3lrsbw","tag_id":"cks0kfidz003uw3yzmczkw2a0","_id":"cks0kfie0003zw3yzoktgral0"},{"post_id":"cks0kfid50024w3yz0z3lrsbw","tag_id":"cks0kfie0003xw3yzlre6uqik","_id":"cks0kfie00040w3yzjkm04zbp"},{"post_id":"cks0kfiec0041w3yz31kd91fh","tag_id":"cks0kfic50004w3yzl7v25x59","_id":"cks0kfief0045w3yzauka63t0"},{"post_id":"cks0kfiee0043w3yzc11mgdwr","tag_id":"cks0kficu001hw3yz1epp120z","_id":"cks0kfieh0047w3yztjbjuxmb"}],"Tag":[{"name":"Android","_id":"cks0kfic50004w3yzl7v25x59"},{"name":"Font","_id":"cks0kfice000fw3yzda17p8js"},{"name":"Material Design","_id":"cks0kficm000uw3yzlox7cncq"},{"name":"面试","_id":"cks0kfico0010w3yzizcb4zhy"},{"name":"Git","_id":"cks0kficr0018w3yz288070ao"},{"name":"Flutter","_id":"cks0kficu001hw3yz1epp120z"},{"name":"DataBinding","_id":"cks0kficx001ow3yzgwao8nx4"},{"name":"ViewBindings","_id":"cks0kfid0001vw3yzsn4rkiqa"},{"name":"翻墙","_id":"cks0kfidg002sw3yzpg9mlmgi"},{"name":"Google Cloud","_id":"cks0kfidh002uw3yzv4xg2b4l"},{"name":"VPN","_id":"cks0kfidi002vw3yzviw3149z"},{"name":"Blog","_id":"cks0kfidi002ww3yzvhmtb8e6"},{"name":"Jenkins","_id":"cks0kfidj002zw3yz59ebpdus"},{"name":"MacOs","_id":"cks0kfidk0032w3yze5dp35o5"},{"name":"工具","_id":"cks0kfidm0036w3yzhfpac0yu"},{"name":"终端","_id":"cks0kfido003aw3yz4njbpsa6"},{"name":"代理","_id":"cks0kfidp003bw3yzijrikmi1"},{"name":"爬虫","_id":"cks0kfidt003ew3yz5kvvj4d4"},{"name":"Python","_id":"cks0kfidu003hw3yzc3g13sa4"},{"name":"Surge","_id":"cks0kfidx003sw3yzgpwxqz99"},{"name":"iOS","_id":"cks0kfidz003uw3yzmczkw2a0"},{"name":"Xcode","_id":"cks0kfie0003xw3yzlre6uqik"}]}}